#!/usr/bin/python2.3
# -*- mode: python -*-
#
# Copyright (c) 2004 Specifix, Inc.
# All rights reserved
#

import branch
import changeset
import commit
import cook
import database
import display
import log
import os
import repository
import rollbacks
import srscfg
import srcctl
import sys
import updatecmd
import util

if sys.version_info < (2, 3):
    print "error: python 2.3 or greater is requried"
    sys.exit(1)

sys.excepthook = util.excepthook

try:
    cfg = srscfg.SrsConfiguration()
except srscfg.ParseError, e:
    log.error(str(e))
    sys.exit(1)

def usage(rc = 1):
    print "usage: srs branch <newbranch> <branchfrom> [<trove>]"
    print "       srs changeset <pkg> [<oldver>] <newver> <outfile>"
    print "       srs cook    [--prep] [--macros file] <first.recipe> <second.recipe> ..."
    print "       srs commit  <changeset>"
    print "       srs pkglist <pkgname> <version>"
    print "       srs replist <pkgname> <version>"
    print "       srs rblist"
    print "       srs rollback"
    print "       srs source [usage]"
    print "       srs update  <pkgname> <version>"
    print "           update  <changeset>"
    print "       srs usage"
    print ""
    print "changeset flags: --fromdb"
    print ""
    print "common flags:  --branch <defaultbranch>"
    print '               --config "<item> <value>"'
    print "               --reppath <repository-path>"
    print "               --root <root>"
    print ""
    print "pkglist flags: --all"
    print "               --ls"
    sys.exit(rc)

otherArgs = [ sys.argv[0] ]
argSet = {}
argDef = {}
cfgMap = {}
# 0 - arg may occur, no parameter
# 1 - arg may occur once, w/ parameter
# 2 - arg may occur N times, w/ parameter

cfgMap["branch"] = "defaultbranch"
cfgMap["reppath"] = "reppath"
cfgMap["root"] = "root"

argDef["fromdb"] = 0
argDef["config"] = 2
argDef["all"] = 0
argDef["prep"] = 0
argDef["macros"] = 1
argDef["ls"] = 0

argDef.update(srcctl.argDef)

for arg in cfgMap.keys():
    argDef[arg] = 1

i = 1
while i < len(sys.argv):
    if sys.argv[i][:2] != "--":
	otherArgs.append(sys.argv[i])
    else:
	arg = sys.argv[i][2:]
	if not argDef.has_key(arg): usage()

	if not argDef[arg]:
	    argSet[arg] = 1
	else:
	    # the argument takes a parameter
	    i = i + 1
	    if i >= len(sys.argv): usage()

	    if argDef[arg] == 1:
		# exactly one parameter is allowd
		if argSet.has_key(arg): usage()
		argSet[arg] = sys.argv[i]
	    else:
		# multiple parameters may occur
		if argSet.has_key(arg):
		    argSet[arg].append(sys.argv[i])
		else:
		    argSet[arg] = [sys.argv[i]]

    i = i + 1

if argSet.has_key('config'):
    for param in argSet['config']:
	cfg.configLine(param)

    del argSet['config']

for (arg, name) in cfgMap.items():
    if argSet.has_key(arg):
	cfg.configLine("%s %s" % (name, argSet[arg]))
	del argSet[arg]

if (len(otherArgs) < 2):
    usage()
elif (otherArgs[1] == "branch"):
    if argSet: usage
    if len(otherArgs) < 4 or len(otherArgs) > 5: usage()
    repos = repository.LocalRepository(cfg.reppath, "c")

    args = [repos, cfg.packagenamespace ] + otherArgs[2:]
    branch.branch(*args)
elif (otherArgs[1] == "changeset"):
    # current usage is "package file oldversion newversion"
    if len(otherArgs) != 5 and len(otherArgs) != 6:
	usage()

    name = otherArgs[2]
    if len(otherArgs) == 6:
	(old, new) = (otherArgs[3], otherArgs[4])
	outFile = otherArgs[5]
    else:
	(old, new) = (None, otherArgs[3])
	outFile = otherArgs[4]

    if argSet.has_key('fromdb'):
        del argSet['fromdb']
	repos = database.Database(cfg.root, cfg.dbpath, "r")
    else:
	repos = repository.LocalRepository(cfg.reppath, "r")

    changeset.ChangeSetCommand(repos, cfg, name, outFile, old, new)
elif (otherArgs[1] == "commit"):
    if len(otherArgs) < 3: usage()
    repos = repository.LocalRepository(cfg.reppath, "c")
    for changeSet in otherArgs[2:]:
	commit.doCommit(repos, cfg, changeSet)
elif (otherArgs[1] == "config"):
    if argSet: usage
    if (len(otherArgs) > 2):
	usage()
    else:
	cfg.display()
elif (otherArgs[1] == "cook"):
    macros = ()
    prep = 0
    if argSet.has_key('prep'):
        del argSet['prep']
        prep = 1
    if argSet.has_key('macros'):
        argSet['macros']
        f = open(argSet['macros'])
        # XXX sick hack
        macroSrc = "macros =" + f.read()
        exec macroSrc
        del f
        del argSet['macros']
    if argSet: usage()

    cook.cookCommand(cfg, otherArgs[2:], prep, macros)                
elif (otherArgs[1] == "import"):
    print "this is broken"
elif (otherArgs[1] == "pkglist" or otherArgs[1] == "replist"):
    all = argSet.has_key('all')
    if all: del argSet['all']

    ls = argSet.has_key('ls')
    if ls: del argSet['ls']

    if otherArgs[1] == "replist":
	queryRepos = repository.LocalRepository(cfg.reppath, "r")
    else:
	queryRepos = database.Database(cfg.root, cfg.dbpath, "r")

    if argSet: usage()

    if len(otherArgs) >= 2 and len(otherArgs) <= 4:
	args = [queryRepos, cfg, all, ls] + otherArgs[2:]
        try:
            display.displayPkgs(*args)
        except IOError, msg:
            sys.stderr.write(msg.strerror + '\n')
            sys.exit(1)
    else:
	usage()
elif (otherArgs[1] == "rblist"):
    if argSet: usage
    db = database.Database(cfg.root, cfg.dbpath, "r")
    rollbacks.listRollbacks(db, cfg)
elif (otherArgs[1] == "rollback"):
    if argSet: usage
    db = database.Database(cfg.root, cfg.dbpath, "c")
    args = [db, cfg] + otherArgs[2:]
    rollbacks.apply(*args)
elif (otherArgs[1] == "source" or otherArgs[1] == "src"):
    srcctl.sourceCommand(cfg, otherArgs[2:], argSet)
elif (otherArgs[1] == "update"):
    if argSet: usage
    if len(otherArgs) >=3 and len(otherArgs) <= 4:
	repos = repository.LocalRepository(cfg.reppath, "r")
	db = database.Database(cfg.root, cfg.dbpath, "c")

	args = [repos, db, cfg] + otherArgs[2:]
	updatecmd.doUpdate(*args)
    else:
	usage()
elif (otherArgs[1] == "usage"):
    usage(rc = 0)
else:
    usage()
if log.errorOccurred():
    sys.exit(1)
