#!/usr/bin/python
#
# Copyright (c) 2004 Specifix, Inc.
# All rights reserved
#

import changeset
import commit
import cook
import display
import os
import repository
import signal
import srscfg
import sys
import update
import util

sys.excepthook = util.excepthook

cfg = srscfg.SrsConfiguration()

def usage():
    print "usage: srs changeset <pkg> [<oldver>] <newver> <outfile>"
    print "       srs cook    [--prep] <first.recipe> <second.recipe> ..."
    print "       srs commit  <file>"
    print "       srs pkglist <pkgname> <version>"
    print "       srs replist <pkgname> <version>"
    print "       srs update  <pkgname> <version>"
    print "                   <pkgfile>"
    print ""
    print "common flags:  --branch <defaultbranch>"
    print '               --config "<item> <value>"'
    print "               --reppath <repository-path>"
    print "               --root <root>"
    print ""
    print "pkglist flags: --all"
    print "               --ls"
    sys.exit(0)

otherArgs = [ sys.argv[0] ]
argSet = {}
argDef = {}
cfgMap = {}
# 0 - arg may occur, no parameter
# 1 - arg may occur once, w/ parameter
# 2 - arg may occur N times, w/ parameter

cfgMap["branch"] = "defaultbranch"
cfgMap["reppath"] = "reppath"
cfgMap["root"] = "root"

argDef["config"] = 2
argDef["all"] = 0
argDef["prep"] = 0
argDef["ls"] = 0

for arg in cfgMap.keys():
    argDef[arg] = 1

i = 1
while i < len(sys.argv):
    if sys.argv[i][:2] != "--":
	otherArgs.append(sys.argv[i])
    else:
	arg = sys.argv[i][2:]
	if not argDef.has_key(arg): usage

	if not argDef[arg]:
	    argSet[arg] = 1
	else:
	    # the argument takes a parameter
	    i = i + 1
	    if i >= len(sys.argv): usage

	    if argDef[arg] == 1:
		# exactly one parameter is allowd
		if argSet.has_key(arg): usage
		argSet[arg] = sys.argv[i]
	    else:
		# multiple parameters may occur
		if argSet.has_key(arg):
		    argSet[arg].append(sys.argv[i])
		else:
		    argSet[arg] = [sys.argv[i]]

    i = i + 1

if argSet.has_key('config'):
    for param in argSet['config']:
	cfg.configLine(param)

    del argSet['config']

for (arg, name) in cfgMap.items():
    if argSet.has_key(arg):
	cfg.configLine("%s %s" % (name, argSet[arg]))
	del argSet[arg]

if (len(otherArgs) < 2):
    usage()
elif (otherArgs[1] == "import"):
    print "this is broken"
elif (otherArgs[1] == "changeset"):
    # current usage is "package file oldversion newversion"
    if len(otherArgs) != 5 and len(otherArgs) != 6:
	usage()

    name = otherArgs[2]
    if len(otherArgs) == 6:
	(old, new) = (otherArgs[3], otherArgs[4])
	outFile = otherArgs[5]
    else:
	(old, new) = (None, otherArgs[3])
	outFile = otherArgs[4]

    repos = repository.Repository(cfg.reppath, "c")
    changeset.ChangeSetCommand(repos, cfg, name, outFile, old, new)
elif (otherArgs[1] == "commit"):
    repos = repository.Repository(cfg.reppath, "c")
    for changeSet in otherArgs[2:]:
	commit.doCommit(repos, cfg, changeSet)
elif (otherArgs[1] == "cook"):
    prep = 0
    if argSet.has_key('prep'):
        del argSet['prep']
        prep = 1
    if argSet: usage
    for file in otherArgs[2:]:
        if file[0] != '/':
            file = "%s/%s" % (os.getcwd(), file)
        # we want to fork here to isolate changes the recipe might make
        # in the environment (such as environment variables)
        signal.signal(signal.SIGTTOU, signal.SIG_IGN)
        pid = os.fork()
        if not pid:
            os.setpgrp()
            os.tcsetpgrp(0, os.getpgrp())
	    repos = repository.Repository(cfg.reppath, "r")
            cook.cook(repos, cfg, file, prep=prep)
            sys.exit(0)
        else:
            while 1:
                try:
                    # XXX replace 2 with os.WUNTRACED in python 2.3
                    (id, status) = os.waitpid(pid, 2)
                    if os.WIFSTOPPED(status):
                        os.kill(os.getpid(), os.WSTOPSIG(status))
                        os.tcsetpgrp(0, pid)
                        os.kill(-pid, signal.SIGCONT)
                    else:
                        break
                except KeyboardInterrupt:
                    os.kill(-pid, signal.SIGINT)
        os.tcsetpgrp(0, os.getpgrp())
                
elif (otherArgs[1] == "pkglist" or otherArgs[1] == "replist"):
    all = argSet.has_key('all')
    if all: del argSet['all']

    ls = argSet.has_key('ls')
    if ls: del argSet['ls']

    if otherArgs[1] == "replist":
	queryRepos = repository.Repository(cfg.reppath, "r")
    else:
	queryRepos = repository.Database(cfg.root, cfg.dbpath, "r")

    if argSet: usage

    if len(otherArgs) >= 2 and len(otherArgs) <= 4:
	args = [queryRepos, cfg, all, ls] + otherArgs[2:]
	display.displayPkgs(*args)
    else:
	usage()
elif (otherArgs[1] == "update"):
    if argSet: usage
    if len(otherArgs) >=3 and len(otherArgs) <= 4:
	repos = repository.Repository(cfg.reppath, "r")
	db = repository.Database(cfg.root, cfg.dbpath, "c")

	args = [repos, db, cfg] + otherArgs[2:]
	update.doUpdate(*args)
    else:
	usage()
elif (otherArgs[1] == "config"):
    if argSet: usage
    if (len(otherArgs) > 2):
	usage()
    else:
	cfg.display()
else:
    usage()
