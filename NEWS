Changes in @NEW@:
  o Client Changes:
    * cvc and conary now take -r to mean --root and -c to mean --config.
      Commands that take --info now take -i as an alternative.
    * contexts may now override any configuration option. (CNY-812)

  o Build (cvc) Changes:
    * "cvc commit -m'commit message'" is now accepted.  Previously, a
      space was required between the -m and the message.
    * Permissions are now preserved by tar when extracting a tar
      archive added with r.addArchive().

  o Optimizations:
    * Getting a large number of troves (without files) from the local database
      has been sped up by 30%.  (CNY-907).
    * conary q --troves is 2 times faster, conary q, conary q --deps and 
      --info  are 30% faster, and conary q --troves --recurse is 4-6 times 
      faster on a test machine.

Changes in 1.0.32:
  o Optimizations
    * Duplicate trove instantiations have been removed. Build requires are
      no longer thawed out of abstract change sets, and methods were added
      to get dependency and path hash information directly from trove
      change set objects. These changes combined for a 50% speedup on
      update --info of a large group into an empty root and saved a few
      megs of memory as well (CNY-892)
    * The changes in the previous version of Conary in how XML-RPC
      responses are decompressed actually made Conary slower.  These
      changes have been reverted.

  o Build (cvc) Changes:
    * The Requires() policy now reads pkg-config files and converts the
      "Requires:" lines in them into trove dependencies, removing the
      need to specify those dependencies manually. (CNY-896)
    * Files in /etc/conary/macros.d/ are now loaded in sorted order
      after initial macros are read from /etc/conary/macros. (CNY-878)

  o Bug Fixes:
    * Conary now runs tagscripts correctly when passed a relative root 
      parameter (CNY-416).
    * cvc log now works when there are multiple branches matching for the
      same trove on the same label.
    * Fixed resolveLevel 2 so that it does not try to update packages that
      are already a part of the update. (CNY-886, CNY-780)
    * Fixed resolveLevel 2 so that it does not repeatedly try to perform 
      the same update. (CNY-887)
    * cvc cook | less now leaves less in control of the terminal. (CNY-802)
    * The download thread terminating during an update is now a fatal
      error.
    * The web interface to a conary repository will now print an error
      message instead of a traceback when adding an entitlement class
      with access to a group that does not exist.
    * cvc cook group now limits the number of path conflicts displayed for 
      one trove to 10. (CNY-910)
    * Conary update now respects local changes when a group update occurs
      along with the update of the switched trove.  For example, switch
      foo to be installed from another branch instead of the default, 
      and then update foo and its containing group at the same time would
      cause conary to try to reinstall the original foo (resulting in path
      conflicts). (CNY-915)
    * loadRecipe now selects the most recent of two recipes available
      in the case where there are multiple choices due to label
      multiplicity. (CNY-918)

Changes in 1.0.31:
  o Client Changes:
    * Conary now restarts itself after updating critical conary
      components (currently, that consists of conary).  Hooks have
      been added for other components using the conary api to specify
      other troves as critical.  Also, hooks have been added for other
      components to specify a trove to update last. (CNY-805, CNY-808)
    * Conary now warns the user when they will be causing label
      conflicts - that is when an operation would cause two different
      branches of development for a single trove to end up with the
      same trailing label.  Since most conary operations are label
      based, such label conflicts can be confusing to work with and
      are almost never desireable - except in those few cases where
      they are necessary.  (CNY-796)
    * The conary repository client now retries when a DNS lookup of a
      server hostname fails with a "temporary failure in name
      resolution" error.

  o Optimizations
    * The getFileContents() and getFileVersions() server side calls
      have been optimized for faster execution.
    * The SQL query in getTroveList() has been sped up by a 3-5x factor.
    * dbstore now has support for executemany()
    * Inserts into local database now use executemany().

  o Server Changes
    * Several SQL queries have been updated for PostgreSQL compatibility

  o Build (cvc) Changes:
    * The "cvc add" command no longer assumes files it doesn't know to
      be binary are text files; there are lists for both binary and
      text types, and files which are added which aren't in either
      list need to be added with "--text" or "--binary". (CNY-838)
    * A "cvc set" command has been added to change files between
      binary and text mode for files in source components.
    * The "cvc diff" command no longer tries to display the contents
      of autosource files. (CNY-866)
    * The "cvc annotate" command no longer displays pathIds in the
      error message for the specified path not being included in the
      source trove.  It displays the path name instead.
    * The "cvc annotate" command now gives an error when it is run on
      a binary file.
    * A "cvc refresh" command has been added.  It allows you to
      request that cvc fetch new upstream versions of files referenced
      by URL.  Thanks to Pavel Volkovitskiy for the initial
      implementation of this feature. (CNY-743)
    * The "cvc newpkg" command and the PackageSpec policy now disallow
      certain potentially confusing characters in trove
      names. (CNY-842)
    * The PythonSetup() build action has been modified to be more
      consistent with other build actions. The "setupName" paramater
      has been added, which can specify a command to run (defaults to
      "setup.py"). The first argument, similar to Configure(), passes
      arguments to the command being specified by setupName. (CNY-355)
    * The "cvc commit" command now recognizes .html, .css, .kid, and .cfg
      as extensions that identify text files. (CNY-891)
    * The PythonSetup build action has been modified to make it
      clearer what its "dir" and "rootDir" options specify. (CNY-328)

  o Bug Fixes:
    * Conary commands no longer perform an unnecessary database check
      on the local system. (CNY-571)
    * A bug that could allow conary to consider a no-op update as an
      install (and could result in tracebacks in some situations) has
      been fixed. (CNY-845)
    * If you've made a local modification to a package and then try to
      downgrade it later, Conary will now downgrade included
      components as well. (CNY-836)
    * The error message produced by "cvc cook" when a source component
      exists on multiple branches with the same trailing label has
      been improved. (CNY-714)
    * Error handling when manipulating entitlements via XML-RPC has
      been improved. (CNY-692)
    * The usage message displayed when running "conary changeset" has
      been corrected. (CNY-864)
    * Conary no longer tracebacks when a disconnected cook tries to
      load a superclass.  Conary also gives better messages when the
      loaded recipe has a traceback.  Thanks to David Coulthart for
      the core of this patch. (CNY-518, CNY-713)
    * A bug in soname dependency scoring has been fixed.  Dependency
      scoring when multiple sonames were being scored would simply use
      the value of the last soname, instead of the cumulative score.
      Note that the dependencies that did not match at all would still
      return as not matching, so this bug only affected Conary's
      ability to select the best match.
    * A bug in architecture dependency scoring has been fixed.
      Matching architectures are now counted as having a positive
      value, so that when performing dependency resolution on an
      x86_64 machine, troves that have flavor "is: x86_64 x86" will be
      preferred to those with flavor "is: x86".
    * The PythonSetup command ignored any C compiler macros that had
      been set.  The template has been changed to use them in the same
      way that Configure() uses them; as environment variables.
    * The warning message produced when r.Replace() refuses to modify
      a non-regular file now includes the path, as intended.
      (CNY-844)
    * A traceback that occurred when a resolveLevel 2 update resulted
      in a component being erased has been fixed. (CNY-879)
    * Conary now works around a possible threading deadlock when
      exceptions are raised in Threading.join().  The bug is in the
      standard Python threading library, and is fixed in 2.4.3.
      Conary will use a workaround when running under older versions
      of Python. (CNY-795)
    * Checks have been added to the XML-RPC transport system to see if
      an abort has been requested while waiting for a response from
      the server.  This allows the main thread to terminate the
      changeset download thread if it is waiting for an XML-RPC
      response from the server.  (CNY-795)
    * A bug in Conary's handling of an unusual case when multiple
      files being installed share the same content, and one of the
      files has been erased locally has been fixed.
    * A traceback that occurred when a manually removed file switches
      packages during an update has been fixed. (CNY-869)
    * When you remove a file and replace it with a directory, Conary
      now treats it as a removal. (CNY-872)
    * Conary's OpenPGP implementation now dynamically uses RIPEMD if
      it is available from PyCrpyto.  Some PyCrypto builds don't
      include RIPEMD hash support. (CNY-868)
    * A bug that allowed merging changesets with conflicting file
      contents for configuration files with the same pathId has been
      fixed.  Applying the resulting merged changeset caused
      IntegrityErrors.  (CNY-888)

Changes in 1.0.30:
  o System Update Changes:
    These changes make Conary much more robust when applying updates
    that move files from one package to another.

    * Components that modify the same files are now required to be in
      the same update job.  For example, if a file moves from
      component a:runtime to component b:runtime, the erase of
      component a:runtime and the install of component b:runtime will
      occur at the same time. (CNY-758).
    * Files moving between components as part of a single job are now
      treated as file updates instead of separate add/remove events.
      (CNY-750, CNY-786, CNY-359)

  o Client Changes:
    * The source component is now displayed in "conary rq --info"
      output.
    * Entitlements can now be passed into ConaryClient and
      NetworkRepositoryClient objects directly. (CNY-640)
    * Exceptions raised in callback functions are now issued as
      warnings and the current job is finished before
      existing. KeyboardInterrupts and SystemExits are handled
      immediately. (CNY-806)
    * The "--debug" command line flag now provides information that is
      useful to the end-user during the update process.  The
      "--debug=all" flag will provide output that is useful to conary
      developers.
    * The output of "--debug" has been modified when performing
      dependency resolution.  The output should be more helpful to end
      users.  Also rearranged the output given when dependencies
      fail. (CNY-779)
    * Config files and diffs are no longer cached in ram during installs;
      they are now reread from the changeset whenever they are needed
      (CNY-821)
    * Binary conflicts no longer cause a traceback in cvc update
      (CNY-644,CNY-785)

  o Optimizations
    On a test system, "conary updateall --info" is around 24% faster
    than previous versions of Conary.

    * The SQL query used to retrieve troves from the local database
      has been optimized.  The new code is nearly four times faster
      for operations like "conary q group-dist --info".
    * The SQL query in getTroveContainers() used to determine the
      parent package(s) and groups(s) of a set of troves as recorded
      in the local database has been optimized.  The new code is
      almost 95 times faster. (0.2 seconds versus 19 seconds)
    * The code in getCompleteTroveSet() that creates Version and
      Flavor objects from entries in the database now caches the
      created object.  This is approximately a 4.5 times speed
      up. (2.10 seconds versus 9.4 seconds)
    * The code in iterUpdateContainerInfo has had similar version
      and flavor caching optimizations that make the code about 
      2.5 times faster (from 10 seconds to 4 seconds).

  o Build (cvc) Changes:
    * "cvc merge" and "cvc update" are now more verbose when
      patching. (CNY-406)
    * "cvc clone" now requires that you specify a message when cloning
      source components unless you specify --message.  It also gives
      more output about what it is doing (CNY-766, CNY-430).
    * "cvc clone" now has a --test parameter that runs through all
      steps of cloning without performing the clone.  --info is now
      more lightweight - it no longer downloads all of the file
      contents that would be cloned.
    * "cvc clone" now has a --full-recurse parameter that controls how
      recursion is performed.  Cloning a group no longer recurses by
      default.  The only way that a recursive group clone could
      succeed is if all troves in the group came from the same branch.
      This is almost never the case.
    * The "cvc cook" command now prints the flavor being built,
      as well as the version. (CNY-817)
    * The command line argument parsing in "cvc" has been modified.
      To use the "--resume" command line argument to specify that you
      wish to resume at a particular location, you must use
      "--resume=<loc>".  "--resume <loc>" will not work anymore.  This
      removes an ambiguity in how we parse optional parameters in
      Conary.
    * The PythonSetup build action no longer provides the older
      --single-version-externally-managed argument, and instead
      provides the --prefix, --install-purelib, --install-platlib,
      and --install-data arguments, which can be overridden with the
      purelib, platlib, and data keyword arguments, respectively.  This
      allows it to work correctly with a greater number of packages.
      It also provides the option of providing a "purePython=False"
      argument for python packages that mix architecture-specific
      and architecture-neutral files, and tries to automatically
      discover cases when it should be provided. (CNY-809)
    * Python dependencies were previously incorrectly calculated
      for certain module path elements added in some Python C
      code (for example, contents of the lib-dynload directory);
      these errors are now resolved by using external python
      to find system path elements. (CNY-813)
    * /etc/conary/mirrors/gnu has been added to enable mirror://
      references to the GNU mirror system.
    * The GNU mirror list was then significantly expanded and
      re-sorted.  (CNY-824)
    * /etc/conary/mirrors/cpan has been added to enable mirror://
      references to the Comprehensive Perl Archive network mirror
      system.
    * In group recipes, the methods r.add(), r.addAll(), and
      r.addNewGroup() have been modified to accept the use= parameter,
      which defaults to True (CNY-830).

  o Bug Fixes:
    * "conary rq" (with no arguments) no longer hides troves if the
      flavor that matches the system flavor is not built for the
      latest version. (CNY-784)
    * "cvc cook" now displays the correct label of the thing it is
      building, even when it is not the build label.
    * Running "cvc update" in a directory that has been created with
      "cvc newpkg" but has not yet been committed to the repository
      will now fail with an appropriate error message instead of
      displaying a traceback. (CNY-715)
    * Conary can now apply updates that change a file that is not a
      directory to a directory.
    * Currently version objects are cached to optimize Conary.
      Unfortunately, version objects are mutable objects.  That means
      that if two different pieces of code are given the same version
      object, modifications made by one part of the code could affect
      the other inadvertently.  A warning message has been added to
      the version object when setting or resetting timestamps to make
      developers aware of the problem.  Developers should copy the
      version object before calling setTimeStamps(),
      resetTimeStamps(), incrementSourceCount(), or
      incrementBuildCount() on it.  When creating a version object
      from a string and time stamp set, use the timeStamps= keyword
      argument to versions.VersionFromString() to avoid the copy.  In
      a later version of Conary, version objects will be immutable.
      New methods will be introduced that return new modified objects.
    * Conary no longer hangs waiting for the download thread when an error
      occured in the download thread which caused it to terminate.
    * "conary migrate" now returns an error much earlier if you are
      not using interactive mode. (CNY-826)
    * Files removed from troves (most often by --replace-files) are now
      properly skipped on updates to that trove when the file didn't change
      between versions. (CNY-828)
    * includeConfigFile now gives a much better error message when it
      cannot include a config file. (CNY-618)

Changes in 1.0.29:
  o Bug Fixes:
    * Conary now removes sources from the lookaside before unpacking SRPMs to
      ensure that the source referenced from the SRPM is actually contained in
      the SRPM. (CNY-771)
    * Errors found in the recipe while checking in will now display file name
      and line number information along with the error found.
    * The trove browser no longer shows duplicate entries for multihomed
      repositories.
    * A bug that kept sqlite-based 64-bit mirrors from being used as a source 
      for further mirrors has been fixed.

  o Build Changes:
    * Conary no longer prints policy error messages three times; it
      now prints each error immediately when it is found, and then
      summarizes all policy errors once (instead of twice) at the
      end of the build process. (CNY-776)

Changes in 1.0.28:
  o Client Changes:
    * Migrate no longer replaces by default as if --replace-files was
      specified. (CNY-769)

  o Server Changes:
    * The log retrieval function now returns a HTTP_NOT_IMPLEMENTED
      (501) instead of a HTTP_NOT_FOUND (404) if the logFile
      directive is not configured.

  o Build Changes:
    * Conary now recognizes that pkgconfig finds its files in
      /usr/share/pkgconfig as well as /usr/lib*/pkgconfig. (CNY-754)
    * /etc/conary/mirrors/cran has been added to enable mirror://
      references to the Comprehensive R Archive Network. (CNY-761)

  o Bug Fixes:
    * Conary now resets the timeStamps in all cases when
      getSourceVersion is called (CNY-708).
    * SQLite ANALYZE locks the database after it is run, causing
      updates to fail.
    * A bug that caused lists such as installLabelPath in
      configuration files to be parsed incorrectly when more than one
      space was between list elements has been fixed
    * A bug that caused Locally changed files to no be marked properly
      in rollbacks that were stored locally (including rollbacks for
      locally built troves) has been fixed. (CNY-645)
    * A bug that could cause "cvc cook" to create groups that include
      components needed to resolve dependencies that are already
      included not-by-default has been fixed.

Changes in 1.0.27:
  o Client Changes:
    * A "files preupdate" tag script method has been Implemented which
      gets run before tagged files are installed or changed. (CNY-636)
    * A bug that could cause "--replace-files" to remove ownership
      from every file in a trove has been fixed. (CNY-733)

    * Multiple bugs where using "--replace-files" could result in the
      new file having no owner have been fixed. (CNY-733)
    * The logcat script now supports revision 1 log entries.
    * The logcat script is now installed to /usr/share/conary/logcat

  o Build Changes:
    * Improved handling of the "package=" keyword argument for build
      actions.  In particular, made it available to all build actions,
      removed double-applying macros to the package specification,
      and fixed failure in cases like "MakeInstall(dir=doesnotexist,
      skipMissingDir=True, package=...)". (CNY-737, CNY-738)
    * The lookaside cache now looks in the repository for local sources
      when doing a repository cook. (CNY-744)
    * The mirror:// pseudo-URL handling now detects bad mirrors that
      provide an HTML document instead of the real archive when a
      full archive name is provided; previously, it did so only when
      guessing an archive name.  Thanks to Pavel Volkovitskiy for this
      fix. (CNY-745)
    * The Flavor policy has been slightly optimized for speed.

  o Server Changes:
    * ACL patterns now match to the end of the trove name instead of
      partial strings (CNY-719)

  o Bug Fixes:
    * The Conary repository server now invalidates changeset cache
      entries when adding a digital signature to a previously mirrored
      trove.
    * A bug that caused the mirror code to traceback when no callback
      function was provided to it has been fixed. (CNY-728)
    * Rolling back changes when the current trove has gone missing from
      the server now causes the client to generate the changeset to apply
      based on the trove stored in the local database (CNY-693)

Changes in 1.0.26:
  o Build Changes:
    * When cooking a group, adding "--debug" to the "cvc cook" command
      line now displays detailed information about why a component is
      being included to solve a dependency. (CNY-711)
    * The mirror:// functionality introduced in Conary 1.0.25 had two
      small bugs, one of which prevented mirror:// pseudo-URLs from
      working.  These bugs are now fixed, thanks to Pavel
      Volkovitskiy. (CNY-704)
    * The "cvc cook" command now announces which label it is building
      at the beginning of the cook, making it easier to catch mistakes
      early. Thanks to Pavel Volkovitskiy for this fix. (CNY-615)
    * The source actions (addSource, addArchive, etc.) can now take
      a "package=" argument like the build actions do.  Thanks to
      Pavel Volkovitskiy for contributing this capability.  (CNY-665)
    * The "preMake" option had a bad test for the ';' character; this
      test has been fixed and extended to include && and ||.
      thanks to Pavel Volkovitskiy for this fix. (CNY-580)
    * Many actions had a variety of options (dir=, subdir=, and
      subDir=) for specifying which directory to affect.  These have
      been converted to all prefer "dir=", though compatibility
      with older recipes is retained by continuing to allow the
      subDir= and subdir= options in cases where they have been
      allowed in the past. Thanks to Pavel Volkovitskiy for this
      enhancement. (CNY-668)

  o Server Changes:
    * The Conary web interface now provides a method to rely solely on
      a remote repository server to do authentication checks. (CNY-705)
    * The ACL checks on file contents and file object methods have
      been improved. (CNY-700)
    * Assertions have been added to prevent redirect entries from
      being added to normal troves.
    * An assertion has been added to ensure that redirects specify a
      branch, not a version.
    * The server returns a new FileStreamsMissing exception when the
      client requests file streams with getFileVersion or
      getFileVersions and the requested file stream is not present in
      the repository database. (CNY-721)
    * getFileVersions() now raises FileStreamMissing when it is given
      invalid request.
    * getFileContents() now raises a new FileHasNoContents exception
      when contents are requested for a file type which has no
      contents (such as a symlink).

  o Bug Fixes:
    * A bug that could cause "conary updateall" to attempt to erase
      the same trove twice due to a local update has been fixed.
      (CNY-603)
    * Attempts to target a clone to a version are now caught.  Only
      branches are valid clone targets. (CNY-709)
    * A bug that caused Trove() equality checks to fail when comparing
      redirects has been fixed.
    * A bug that caused the flavor of a redirect to be store
      improperly in the repository database has been fixed.
    * The resha1 script now properly skips troves which aren't present
      in the repository.
    * Conary 1.0.24 incorporated a fix for CNY-684 to correct behavior
      when storing src.rpm files rather than their contents.  The fix
      worked for local builds but not for commits to repositories.
      Conary 1.0.26 includes a fix that corrects the behavior when
      committing to a repository as well. (CNY-684)
    * A bug that prevented flavored redirects from being loaded from
      the repository database has been fixed.
    * "Conary migrate" now will follow redirects. (CNY-722)

Changes in 1.0.25:
  o Build Changes:
    * The addArchive() source action will search for reasonably-named
      archive files based on the name and version if given a URL ending
      with a "/" character. Thanks to Pavel Volkovitskiy for the
      initial implementation. (CNY-671)
    * All source actions, when given a URL that starts with "mirror://",
      will search a set of mirrors based on files in the mirrorDirs
      configuration entry, with default files provided in the
      /etc/conary/mirrors/ directory. Thanks to Pavel Volkovitskiy for
      the initial implementation. (CNY-171)
    * Symbolic links are now allowed to provide a soname even if they
      reference an ELF file only indirectly through other symbolic
      links.  Previously, a symbolic link could only provide a soname
      if it directly referenced an ELF file. (CNY-696)

  o Bug Fixes:
    * A bug that caused unhandled exceptions when downloading the file
      contents needed for a distributed changeset in threaded mode has
      been fixed. This bug was introduced in 1.0.24. (CNY-701)

Changes in 1.0.24:
  o Server Changes:
    * The server binary access log can now be downloaded by an
      administrator by visiting the http://servername/conary/log
      URL. Once the log is accessed it is rotated automatically by the
      repository server. Subsequent accesses to the log URL will only
      yield log entries added since the last access. (CNY-638)
    * The Users and Groups tab in the web management UI is no longer
      highlighted when administrators change their passwords.

  o Client Changes:
    * A --what-provides option has been added to "conary query" and
      "conary repquery".
    * A bug that installed extra components of a package that is being
      installed instead of updated due to the existing package being
      pinned has been fixed. (CNY-682)

  o Build Changes:
    * When pulling files out of a src.rpm file, Conary now stores the
      src.rpm file itself in the repository rather than the files
      pulled from it. (CNY-684)
    * Mono dependency version mappings are now discovered in CIL policy
      .config files. (CNY-686)
    * The internal util.literalRegex() function has been replaced by
      use of re.escape(). (CNY-634)

  o Bug Fixes:
    * The Conary Repository web interface no longer returns a
      HTTP_FORBIDDEN (403) when a bad password is given by the user.
      This allows the user to re-try authentication.
    * The --signatures and --buildreqs flags now work with "conary
      showcs".  (CNY-642)
    * A bug in the NetworkRepositoryClient default pwPrompt mechanism
      has been fixed.
    * Error messages when entitlements fail to load have been
      improved. (CNY-662)
    * The repository client no longer caches repository access info
      when the attempt to access was unsuccessful. (CNY-673, affects
      CNY-578)
    * A bug that caused x86 flavored troves from being updated
      properly when using "conary updateall" on an x86_64 system has
      been fixed. (CNY-628)
    * A bug that caused migrate behavior to not respect pins when the
      pinned troves were set to be erased (CNY-680).
    * Calling r.ComponentSpec(':foo') works again; it is exactly
      equivalent to r.ComponentSpec('foo'). (CNY-637)
    * Calling r.Move() with only one argument now fails explicitly
      rather than silently doing nothing. (CNY-614)

Changes in 1.0.23:
  o API Additions:
    * The interface to create, list and delete access groups and
      modify the users therein through is now exposed though
      ConaryClient.
    * The interface to delete entitlement groups is now exposed
      through ConaryClient.

  o Client Changes:
    * "conary updateall" now accepts the --keep-required command line
      argument.
    * the mirror script now provides download/commit feedback using
      display callbacks like other conary commands
    * the excludeTroves config option will now keep fresh installs from
      happening when an update job is split due to a pinned trove.

  o Server Changes:
    * The repository database migration code now reports an error when
      trying to migrate old-style redirects.  The code to perform the
      migration is incomplete and creates invalid new-style
      redirects.  If you have a repository with old-style redirects,
      contact rPath for assistance with your migration. (CNY-590)

  o Bug Fixes:
    * Subdirectories within source components are now better supported.
      Specifically, different subdirectories with the same filename will
      now work. (CNY-617)
    * The util.literalRegex() function now escapes parenthesis characters.
      (CNY-630)
    * Manifest files now handle file names containing "%" characters.
      Fix from Pavel Volkovitskiy. (CNY-627)
    * Fixed a bug in migrate that caused its behavior to shift when migrating 
      to the same version that is currently installed.
    * Fixed a bug in the logcat script that caused the entitlement field to
      display the user information instead. (CNY-629)

  o Build Changes:
    * The r.addArchive() source action can now unpack Rock Ridge and
      Joliet ISO images, with some limitations. (CNY-625)

Changes in 1.0.22:
  o Client Changes:
    * Conary now has hooks for allowing you to be prompted for both name
      and password when necessary.
    * Conary will no longer report a traceback when trying to perform 
      dependency resolution against repositories that are not available.
      Instead, it will print out a warning. (CNY-578)

  o Build Changes:
    * It is now possible to set environment variables to use within
      Conary builds from within conary configuration files, using the
      new "environment" configuration item.  Thanks to Pavel
      Volkovitskiy for implementing this feature. (CNY-592)
    * In previous versions of Conary, calls to r.PackageSpec() would
      improperly override previous calls to r.ComponentSpec(); now
      the ordering is preserved.  Thanks to Pavel Volkovitskiy for 
      this fix. (CNY-613)

  o Bug Fixes:
    * A bug that would allow recursively generated changesets to
      potentially have missing redirect flags has been fixed.
    * A bug in redirect handling when the branch changed but the trove
      name didn't has been fixed - conary will do a better job of
      determining what jobs to perform in this situation. (CNY-599, CNY-602)
    * Errors relating to PGP now just display the error instead of causing 
      conary to traceback. (CNY-591)
    * Conary sync on a locally cooked trove will no longer traceback (CNY-568)
    * --from-file and sync now work together.
    * An AssertionError that was occasionally reached by incorrect repository
      setups is now a ConaryInternalError
    * A bug when updating to a locally cooked trove when the user had 
      manually removed files has been fixed. (CNY-604)
    * CONARY files that are not accessible will no longer cause conary to
      traceback when trying to read context from them. (CNY-456)
    * signatureKeyMap configuration entries are now checked to ensure
      they are valid. (CNY-531)

Changes in 1.0.21:
  o Client Changes:
    * The "conary migrate" command has changed behavior significantly
      in order to make it more useful for updating a system to exactly
      match a different group.  However, this change makes it much
      less useful for updating normal systems.  "conary migrate"
      should not be used without first reading the man page
      description of its behavior.  The old migrate behavior is now
      available by using "conary sync --full".  "conary syncchildren"
      has been renamed to "conary sync", and its behavior has also
      been modified slightly as a result.  The old behavior is
      available by using "conary sync --current". Please read the man
      page for a full description of the "sync" command as well.  (CNY-477)

  o Build Changes:
    * A "package" keyword parameter has been added to build actions,
      which specifies the package and/or component to which to assign
      the files that are added (not modified or deleted) by that build
      action.  For example, r.MakeInstall(package="foo") will place
      all the new files installed by the MakeInstall action into the
      "foo" package.  Thanks to Pavel Volkovitskiy for contributing
      this capability.  (CNY-562)
    * A "httpHeaders" keyword parameter has been added to the
      r.addArchive(), r.addPatch(), and r.addSource() source actions
      so that headers can be added to the HTTP request.

  o Bug Fixes:
    * The r.addPatch() build action no longer depends on nohup to
      create a file in the current directory (a bug introduced in
      conary 1.0.19). (CNY-575)
    * Commits with missing files no longer traceback. (CNY-455)
    * A bug that caused "#!/usr/bin/env /bin/bash" to not be
      normalized to /bin/bash by the NormalizeInterpreterPaths policy
      has been fixed.
    * A bug that prevented Conary from being able to download files
      that contain '&' or ';' characters has been fixed.  This allows
      Conary to download sources from cgi-bin URLs.
    * "cvc merge" no longer fails to merge changes from the parent
      branch when the shadowed version doesn't exist on the parent
      branch.

Changes in 1.0.20:
  o Build Changes:
    * "jvmdir", "javadir", "javadocdir", and "thisjavadocdir" have
       been added to the default set of macros.
    * A r.JavaDoc() build action has been added.  It funtions
      exactly like the "r.Doc()" build action, except it coppies into
      "%(thisjavadocdir)s".
    * When the r.addArchive() source action attempts to guess the main
      directory in which to build, it now recognizes when when sources
      have been added in an order that defeats its algorithm and provides
      a helpful error message. (CNY-557)

  o Client Changes:
    * A --tag-script parameter has been added to the rollback
      command. (CNY-519)

  o Bug Fixes:
    * A bug in clone behavior that caused Conary to try to clone
      excessive troves has been fixed.  If you were cloning uphill
      from branch /a/b to /a, and a buildreq was satisfied by a trove
      on /a//c, Conary would try to clone the buildreq to /a as well.
      (CNY-499)
    * A bug in the "r.Ant()" and "r.JavaCompile()" build actions which
      caused the CLASSPATH variable to get mangled has been fixed.
    * A bug in 'r.ClassPath()' that caused a traceback has been fixed.
    * A bug that caused the "change password" tab to be displayed when
      browsing the repository via the web as an anonymous user has
      been fixed.
    * The web service code no longer permits the anonymous user to
      view the "change password" (/conary/chPassForm) form.
    * The r.addPatch() source action no longer hangs when presented
      with large patches, which fixes a bug introduced in Conary
      1.0.19.

Changes in 1.0.19:
  o API Change:
    * In order to fully represent empty flavors in Conary, a new Flavor
      object class has been added.  Previously, DependencySet objects
      were used to store flavor information.  Unfortunately it was not
      possible to distinguish "empty flavor" from "flavor not specified".
      When dealing with thawing frozen flavors, use ThawFlavor() instead
      of ThawDependencySet().  When testing to see if a flavor is empty,
      use the isEmpty() method of the flavor object.

  o Client Changes:
    * The default resolveLevel setting is now 2, this means that
      conary will try to update troves that would otherwise cause an
      update to fail.  See the conary man page for more details.
    * Multiple bugs have been fixed in interactive prompting for user
      passwords (CNY-466):
      - Password prompts are based on the server name portion of the
        label being accessed, not the actual hostname of the server
        (these are often different when repositoryMaps are used).
      - When no password callback is available, the operation will
        fail with an open error (which is identical to what would
        happen if no user name was present) instead of giving a
        traceback.
      - The download thread uses the passwords which the original
        thread obtained from the user.
      - The download thread is able to prompt for passwords from the
        user if distributed changesets require access to additional
        repositories.

  o Build Changes:
    * "r.Ant()", "r.JavaCompile()", and "r.ClassPath()" build actions
      have been added to support building java with conary.
    * "r.addPatch()" will now determine the patchlevel without users
      needing to add level= in the r.addPatch() call. The level
      parameter is still honored, but should not be needed.
    * "cvc cook --show-buildreqs" now displays build requirements
      inherited from parent recipe classes. (CNY-520)
    * The output of "cvc diff" and "cvc rdiff" can now be used as an
      input to patch when files are added between two versions. (CNY-424)
    * Use flags have been added for dom0 and domU.  They default to
      "sense prefernot".  The domU flag should be used to build
      binaries specific to Xen domU environments where special
      provisions are made for paravirtualization.  The dom0 flag
      should be used to build binaries specific to Xen dom0
      environments where special provisions are made for the
      hypervisor.  The existing "xen" flag should be used to build
      binaries specific to Xen which apply equally to Xen dom0 and
      domU environments.
    * Warning message for modes specified without an initial "0" have
      been improved to include the path that is affected. (CNY-530)

  o Server Changes:
    * Use the term Entitlement Class in all conary repository web interfaces
      replacing Entitlement Group.

  o Bugs Fixed:
    * The Conary Repository now returns an error to a client when
      committing duplicate troves that have an empty flavor. (CNY-476)
    * When checking out a source trove from a repository using
      "cvc checkout", the user is no longer warned about not being able
      to change the ownership of the files checked out.
    * A bug has been fixed in conary's determination of what troves
      had been updated locally.  This bug caused "conary updateall" to
      consider many x86 troves as needing to be updated separately
      instead of as a part of group-dist.  This could cause updateall
      failures. (CNY-497)
    * A bug that caused 'conary q tmpwatch:runtime --recurse' to traceback
      has been fixed (CNY-460)
    * Interactive mode now handles EOF by assuming it means 'no';
      thanks go to David Coulthart for the patch. (CNY-391)
    * Configuration settings in contexts can now be overridden from
      the command line. (CNY-22)
    * Redirect changesets now have primary troves, meaning they will
      display better when using "conary showchangeset". (CNY-450)
    * User's passwords are now masked when using "cvc context" (unless
      --show-passwords is specified). (CNY-471)
    * Removed excess output from commitaction which was caused by a
      change in option parsing code (CNY-405)

Changes in 1.0.18:
  o Client Changes:
    * Trying to shadow a cooked redirect now results in an error. (CNY-447)
    * A --keep-required option has been added to tell Conary to leave
      troves installed when removing them would break
      dependencies. This used to be the default behavior; Conary now
      issues a dependency error instead. (CNY-6)
    * "delete-entitlement" and "list-entitlements" options have been
      added to the "manageents" script.

  o Build Changes:
    * Python dependencies are now generated for .pyc files as well as
      for .py files. (CNY-459)

  o Server Changes:
    * Support for deleting entitlements, listing the entitlement
      groups a user can manage, and removing the ACL which lets a group
      manage an entitlement group has been added.
    * Entitlement management has been added to the Conary repository
      web interface. (CNY-483)

  o Bug Fixes:
    * The "list-groups" option to the "manageents" script has been
      corrected to list the groups the user can manage instead of the
      groups that user belongs to.

Changes in 1.0.17:
  o Client Changes:
    * Individual file removals performed by "conary remove" now create
      rollbacks. (CNY-7)
    * The repository mirroring client supports two new configuration
      options:
      - matchTroves is a regexp list that limits what troves will be
        mirrored based on the trove names;
      - recurseGroups takes a boolean value (True/False) which will
        cause the miror client to recurse through a groups and mirror
        everything that they include into the target repository.

  o Server Changes:
    * A single conary repository can host multiple serverNames. In the
      Conary repository's configuration file, the serverName directive
      can now specify a space separated list of valid server names
      which will be accepted and served from that repository. (CNY-16)

Changes in 1.0.16
  o Build Changes:
    * A check has been added to "cvc commit" that ensures a .recipe
      file exists in the CONARY state file.
    * Recipe classes can now set an "abstractBaseClass" class
      variable.  When set, Conary will not require a setup() method in
      the class.  This is used for creating superclass recipes where
      setup() methods are not needed.

  o Server Changes:
    * A new "entitlementCheckURL" configuration option has been added.
      This is a hook that allows external validation of entitlements.
    * The Conary Repository web interface look and feel has been
      updated.  The interface will look incorrect unless
      conary-web-common 1.0 or later is installed.

  o Bug Fixes:
    * When running "cvc log" on a newly created source component, cvc now
      errors gracefully instead of tracing back. (bz #863)
    * Conary now changes to the / directory before running tag
      scripts. (bz #1134)
    * "cvc co foo=invalidversionstring" now gives a more helpful error
      message. (bz #1037)
    * Cloning binary troves uphill now correctly checks for the source
      trove uphill.
    * A bug that would cause "conary migrate" to raise a KeyError when
      updating a group that referenced the same trove twice (through
      two subgroups) has been fixed.
    * A bug that caused miscalculations when determining whether a
      shadow has been modified has been fixed.
    * A number of bugs affecting resetting distributed changesets have
      been fixed.
    * A bug in the MySQL dbstore driver that caused the wrong
      character encoding to be used when switching databases has been
      fixed.
    * A bug where running updateall when one of the two groups that
      reference a trove has no update caused an erase of that trove to
      be requested has been fixed (CNY-748).

Changes in 1.0.15
  o Client Changes:
    * When writing files as non-root, Conary will no longer create
      files setuid or setgid unless the uid/gid creating the file
      matches the username/groupname in the package.
    * Conary now checks the rollback count argument for non-positive
      numbers and numbers greater then the number of rollbacks
      available. (bz #1072)
    * The entitlement parser has been reimplemented using expat
      instead of a hand-coded parser.  A correctly formatted
      entitlement file should now be enclosed in an
      <entitlement></entitlement> element.  Conary will continue to
      work with files that do not contain the toplevel <entitlement>
      element.

  o Build Changes:
    * Support has been added for recipe templates.  Now when running
      "cvc newpkg", cvc will automatically create a recipe from a
      template specified by the recipeTemplate configuration
      option. (bz #671, #1059)
    * Policy objects can now accept globs and brace expansions when
      specifying subtrees.
    * Cross-compile builds now provide CONFIG_SITE files to enable
      cross-compiling programs that require external site config
      files.  The default site config files are included.
    * The "cvc checkout" command can now check out multiple source
      troves in a single invocation.

  o Server Changes:
    * An "externalPasswordURL" configuration option has been added,
      which tells the server to call an external URL for password
      verification.  When this option is used, user passwords stored
      in the repository are ignored, and those passwords cannot be
      changed.
    * An authentication cache has been added, which is enabled by
      setting The authCacheTimeout configuration to the number of
      seconds the cache entry should be valid for.

  o Bug Fixes:
    * A bug that caused using groupName parameter with r.replace() to
      traceback has been fixed. (bz #1066)
    * Minimally corrupted/incorrect conary state files will no longer cause 
      conary to traceback. (bz #1107)
    * A bug that prevented upload progress from being displayed when
      using "cvc commit" has been fixed. (bz #969)

Changes in 1.0.14:
  o Client Changes:
    * Conary now creates shadows instead of branches when cooking onto
      a target label.  This means, for example, that local cooks will
      result in a shadow instead of a branch.
    * Conary now creates shadows on the local label when creating rollbacks
      instead of branches.
    * The branch command has been removed.  Any potential branch should be 
      done with a shadow instead.
    * The verify command now shows local changes on a local shadow instead
      of a local branch
    * Local changesets create diffs against a local shadow (instead of
      a branch) and --target for the commit command retargets to a shadow
    * User conaryrc entries are now searched from most specific target to
      least specific (bz #997)
    * A fresh install of a group will cause all of its contained components 
      to be installed or upgraded as well, without reference to what is 
      currently installed on your system -- no trove will be skipped because
      it is referenced by other troves on your system but not installed.
    * Changeset generation across distributed shadows now force file 
      information to be absolute instead of relative when the files are on
      different servers, eliminating server crosstalk on source checkin and
      when committing local changesets. (bz #1033)
    * Cvc merge now takes a revision, to allow you merge only up to a certain
      point instead of to head.

  o Server Changes:
    * Removed the ability for the server to log updates to its contents
      store (mirroring has made this capability obsolete)
    * logFile configuration directive now logs all XML calls
    * Split user management out from core authorization object
    * All user management calls are based on user and group names now
    * The user management web interface for the repository now allows
      the administrator to enable and disable mirroring for groups

  o Bug Fixes:
    * Conary will not traceback if you try to update to a trove with a name
      that matches a filesystem path that you don't have access to (bz #1010).
    * Conary will not raise an exception if a standard config file (~/.conaryrc,
      for example) exists but is not accessible.
    * cvc no longer allows . and .. to be added to source troves (bz #1014)
    * cvc remove handles removing directories (bz #1014)
    * conary rollback no longer tracebacks if you do not have write access to
      the conary database.
    * deeply shadowed versions would fail when performing some version 
      operations.  This caused, for example, local cooks of shadowed troves
      to fail.
    * using loadInstalled with a multiarch trove no longer tracebacks (bz #1039)
    * group recipes that include a trove explicitly byDefault False could result
      in a trove when cooked that had the components of that trove byDefault
      True.
    * Stop sending duplicate Host: headers, proxies (at least squid) mangle 
      these into one host header, causing failures when accessing rbuilder
      repositories that depend on that host header (bz #795)
    * The Symlink() build action should not enforce symlinks not
      dangling, and should instead rely solely on the DanglingSymlinks
      policy.
    * A bug that caused conary to treat a reference as an install when it
      should have been an update due to a miscalculation of what local updates
      had been made on the system has been fixed.

Changes in 1.0.13:
  o Client Changes:
    * A new "conary migrate" command for updating troves has been
      added.  "conary migrate" is useful for circumstances when you
      want to update the software state on a system to be synchronized
      with the default state of a group.  To do this, "conary migrate"
      calculates the changeset required to: 1) update the trove (if an
      update is available); 2) install any missing included troves; 3)
      synchronize included troves that have a mismatched version; 4)
      remove any referenced troves that are not installed by default.
    * The includeConfigFiles configuration directive now accepts http
      and https URLs.  This allows organizations to set up centralized
      site-wide conary configuration.
    * Conary now gives a more detailed error message when a changeset
      attempts to replace an empty directory with a file and
      --replace-files is not specified.

  o Build Changes:
    * The addSource source action will now replace existing files,
      rather than replacing their contents.  This implies that the
      mode of the existing file will not be inherited, and an
      existing read-only file will not prevent addSource from
      working.
    * The internal setModes policy now reports "suid/sgid" only for
      files that are setuid or setgid, rather than all files which
      have an explicitly set mode.  (bz #935)
    * TagSpec no longer will print out ignored TagSpec matches twice,
      once for tags specified in the recipe, and once for tags
      discovered in /etc/conary/tags/*.  (bz #902)
    * TagSpec will now summarize all its suggested additions to
      buildRequires in a single line.  (bz #868)
    * A new reportMissingBuildRequires policy has been added to summarize
      all suggested additions to buildRequires in a single line at the
      end of the entire build process, to make it easier to enhance the
      buildRequires list via cut-and-paste.  (bz #869)

  o Bug Fixes:
    * A bug that caused conary to traceback when a file on the file
      system is owned by unknown uid/gid has been fixed.  Conary will
      now print an error message instead.  (bz #977)
    * A bug that caused conary to traceback when an unknown Use flag
      was used when cooking has been fixed.  Previously, "cvc cook
      --flavor 'foobar'" would create a traceback.  Conary now says
      'Error setting build flag values: No Such Use Flag foobar'.
      (bz #982)
    * Pinned troves are now excluded from updateall operations.
      Previously conary would try to find updates for pinned troves.
    * Conary now handles applying rollbacks which include overlapping
      files correctly.  Previously --replace-files was required to
      apply these rollbacks.
    * the config file directive includeConfigFile is no longer case sensitive 
      (bz #995)

Changes in 1.0.12:
  o Client changes:
    * The rollback command now applies rollbacks up to and including
      the rollback number specified on the command line. It also
      allows the user to specify the number of rollbacks to apply
      (from the top of the stack) instead of which rollback to
      apply. (bz #884)
    * Previously, the code path for installing files as part of a new
      trove required an exception to be handled.  The code has been
      refactored to eliminate the exception in order to reduce install
      times.

  o Build Changes:
    * The cvc command now has a --show-buildreqs option that prints all
      build requirements.  The --no-deps argument for cvc has been
      aliased to --ignore-buildreqs for consistency.

  o Bug Fixes:
    * Installing into a relative root <e.g. --root foo> when running
      as root no longer generates a traceback. (bz #873)
    * Replaced files are now stored in rollbacks. (bz #915)
    * File conflicts are now also detected via the database, not just
      via real file conflicts in the filesystem.
    * A bug that resulted in multiple troves owning a file has been fixed.
    * Rollbacks of troves that were cooked locally will no longer
      raise a TroveIntegrityError.
    * The "conary remove" command no longer generates a traceback when
      the filename given cannot be unlinked. (bz #887)
    * The missing usage message displayed when "cvc" and "conary" are
      run with no command line arguments has been restored.
    * Rollbacks for initial contents files didn't work; applying
      rollbacks now ignores that flag to get the correct contents on
      disk. (bz #924)
    * The patch implementation now properly gives up on patch hunks
      which include changed lines-to-erase, which avoids erasing lines
      which did not appear in the origial version of the file. (bz
      #949)
    * Previously, when a normal error occurred while prepping sources
      for cooking (extracting sources from source archives, for
      example), conary would treat it as a major internal error.  Now
      the error message is simply printed to the screen instead.
    * A typo in a macro will now result in a more helpful error
      message.
    * A bug that caused a traceback when performing "conary rq" on an
      x86_64 box with a large installLabelPath where only an x86
      flavor of a trove was available on one label in the
      installLabelPath has been fixed (bz #961).
    * Conary no longer creates a rollback status file when one isn't
      needed.  This allows /var/lib/conarydb to be on read-only media
      and have queries continue to work/.
    * Reworked "conary remove" to improve error messages and fix
      problems with multiple files being specified, broken symlinks,
      and relative paths (bz #853, #854)
    * The mirror script's --test mode now works correctly instead of
      doing a single iteration and stopping.

Changes in 1.0.11:
  o Client Changes:
    * Conary will now allow generic options to be placed before the command
      you are giving to conary.  For example, 'conary --root=/foo query'
      will now work.
    * the remove command no longer removes file tags from files for no good 
      reason
    * rollbacks now restore files from other troves which are replaced as part
      of an update (thanks to, say, --replace-files or identical contents)
    * --replace-files now marks files as owned by the trove which used to
      claim them
    * You can now kill conary with SIGUSR1 to make conary enter a debugger
      when you Ctrl-C (or a SIGINT is raised)
    * --debug-all now enters a debugger in more situations, including option
      parsing fails, and when you hit Ctrl-C.
    * added ccs2tar, which will convert most absolute changesets (like those
      that cook produces) into tarballs
    * Troves now don't require dependencies that are provided by themselves.
      As troves are built with this new behavior, it should significantly speed
      up dependency resolution.
    * added a script to recalculate the sha1s on a server (after a label
      rename, for instance)
    * added a script to calculate an md5 password (for use in an info recipe,
      for example)

  o Build Changes:
    * Conary now supports a saltedPassword option to r.User in user info-
      packages.  Full use of this option will require that a new shadow package
      be installed.

  o Bug Fixes:
    * command-line configurations now override context settings

  o Build Changes:

Changes in 1.0.10:
  o Client Changes
    * Given a system based on rPath linux where you only installed
      !smp kernels, conary would eventually start installing smp
      kernels on your system, due to the way the update algorithm
      would determine whether you should install a newly available
      trove.  Conary now respects flavor affinity in this case and
      does not install the smp kernel.
    * Mirror configuration files can now specify uploadRateLimit and
      downloadRateLimit.
    * Updates utilizing changeset files are now split into multiple
      jobs properly, allowing changeset files which create users to
      work proprely.
    * "conary rollback" now displays progress information that matches
      the "conary update" progress information.
    * added --with-sources option for clone

  o Bug Fixes:
    * A bug that caused an assertion error when switching from an
      incomplete trove to a complete trove has been fixed.
    * A bug in perl dependencies that caused extra directories to be
      considered part of the dependency has been fixed.
    * A bug affecting updates where a pinned, partially installed
      package was supposed to be updated due to dependency resolution
      has been fixed.
    * A bug that prevented updates from working when part of a locally
      cooked package was replaced with a non-locally cooked component
      has been fixed.  The bug was introduced in Conary 1.0.8.
    * A bug that caused a segfault when providing an invalid type to
      StringStream has been fixed.
    * The troveInfo web page in the repository browser now displays
      useful error messages instead of traceback messages.  The
      troveInfo page also handles both frozen and non-frozen version
      strings.
    * A bug that caused conary to download unnecessary files when checking out
      shadow sources has been fixed.
    * A bug that caused "cvc rdiff" between versions of a trove that
      were on different hosts to fail has been fixed.
    * Fixed a bug when determining local file system changes involving a file 
      or directory with mtime 0.
    * The --signature-key option was restored

Changes in 1.0.9:
  o Client Changes:
    * A new dependency resolution method has been added which can be turned
      on by setting resolveLevel to 2 in your conarycfg:  If updating trove 'a'
      removes a dependency needed by trove 'b', attempt to update 'b' to
      solve the dependency issue.  This will allow 'conary update conary'
      to work as expected when you have conary-build installed, for example.
    * Switched to using more of optparse's capabilities, including --help
      messages.
    * One short option has been added, cvc -m for message.

  o Bug Fixes:
    * Recipes that use loadRecipe('foo') and rely on conary to look upstream
      to find their branch now work correctly when committing.
    * A bug affecting systems with multiple groups referencing the same troves,
      where the groups are out of sync, has been fixed.
    * the mirror client now correctly handles duplicate items returned in
      trove lists by older servers
    * A bug that caused the mirror client to loop indefinitely when
      doing a --full-trove-sync has been fixed
    * conary rq --trove-flags will now display redirect info even if you
      do not specify --troves (bug #877)
    * dep resolution now support --flavors --full-versions output (bug #751)
    * cvc merge no longer tracebacks if files were added on both upstream
      and on the shadow
    * admin web access for the server doesn't require write permission for
      operations which also require admin access (bug #833)
    * A bug that caused r.remove() in a group to fail if the trove being
      removed was recursively included from another group has been fixed.
    * Conary update tmpwatch -tmpwatch:debuginfo will now erase 
      tmpwatch:debuginfo.
    * An ordering bug that caused info packages to not be updated with their
      components has been fixed.
    * Updates will now happen in a more consistent order based on an
      alphabetic sort.
    * the repository server now handles database deadlocks when committing
       changesets
  o Server Changes:
    * getNewSigList and getNewTroveList could return troveLists with
      duplicate entries

  o Documentation Changes:
    * The inline documentation for recipes has been significantly
      improved and expanded, including many new usage examples.

Changes in 1.0.8
  o Client changes:
    * Conary will now replace symlinks and regular files as long as their
      contents agree (bug #626)

  o Bug Fixes:
    * An error in the method of determining what local changes have been 
      made has been fixed.

Changes in 1.0.7:
  o Client changes:
    * A better method of determining what local changes have been made to a
      local system has been implemented, improving conary's behavior when
      updating.

  o Bugfixes:
    * A bug that caused the user to be prompted for their OpenPGP
      passphrase when building on a target label that does not match
      any signatureKeyMap entry has been fixed.  Previously, if you
      had a signatureKeyMap entry for conary.example.com, and your
      buildLabel was set to conary.example.com@rpl:devel, you would be
      prompted to enter a passphrase even when cooking locally to the
      local@local:COOK label.
    * Dependency resolution will no longer cause a trove to switch
      branches.
    * If a component is kept when performing dependency resolution
      because it is still needed, it's package will be kept as well if
      possible.
    * "conary q --path" now expands symlinks found in the path to the
      file in question. (bug #855)
    * Committing a changeset that provided duplicate file streams for
      streams the server previously referenced from other servers no
      longer causes a traceback.
    * Conary's patch implementation how handles patches which are
      already applied. (bug #640)
    * A server error triggered when using long flavor strings in
      server queries has been fixed.

  o Build fixes:
    * Group cooking now produces output to make it easier to tell what
      is happening.  The --debug flag can be used to get a more
      detailed log of what troves are being included.

  o Server changes:
    * The server traceLog now logs more information about the
      repository calls


Changes in 1.0.6:
  o Repository changes:
    * The commitaction script now accepts the standard conary arguments
      --config and --config-file.

  o Bugfixes:
    * cvc merge on a non-shadow no longer returns a traceback (bz# 792),
      and cvc context foo does not return a traceback when context foo does
      not exist (bz #757)  Fixed by David Coulthart.
    * A bug that caused new OpenPGP keys to be skipped when troves
      were filtered out during mirroring has been fixed.
    * opening invalid changesets now gives a good error message instead of
      a traceback
    * removed obsolete changemail script
    * Exceptions which display fileId's display them as hex sha1s now
      instead of as python strings
    * A bug where including a redirect in a group that has autoResolve 
      caused conary to traceback has been fixed.
    * A bug that kept conary from prompting for your password when committing
      has been fixed.
    * A bug that randomized the order of the labels in the  installLabelPath 
      in some error messages has been fixed.

  o Build fixes:
    * The default ComponentSpec for :perl components now include files
      in site_perl as well as in vendor_perl.
    * Ruby uses /usr/share/ri for its documentation system, so all files
      in %(datadir)s/ri are now included in the default :doc ComponentSpec.

Changes in 1.0.5:
  o Performance improvements:
    * The use of copy.deepcopy() has been eliminated from the
      dependency code.  The new routines are up to 80% faster for
      operations like DependencySet.copy().
    * Removing files looks directly into the file stream of the file
      being removed when cleaning up config file contents rather than
      thawing the full file stream.
    * Getting a single trove from the database without files returned file
      information anyway
    * Trove.applyChangeSet() optionally skips merging file information
    * Cache troves on the update/erase path to avoid duplicate fetchs from
      the local database

  o Bugfixes
    * Installing from a changeset needlessly relied on troves from the 
      database having file information while processing redirects
    * Extraneous dependency cache checks have been removed from the
      addDep() path.
    * When removing files, conary now looks up the file flags directly
      in the file stream in order to clean up config file contents.
      Previously the entire file stream was thawed, which is much more
      resource intensive.

  o Build fixes:
    * r.addArchive() now supports rpms with bzip2-compressed payloads.

Changes in 1.0.4:
  o Performance improvements:
    * The speed of erasing troves with many dependencies has been
      significantly improved.
    * The join order of tables is forced through the use of
      STRAIGHT_JOIN in TroveStore.iterTroves() to work around some
      MySQL optimizer shortcomings.
    * An --analyze command line option has been added to the
      stand-alone server (server.py) to re-ANALYZE the SQL tables for
      MySQL and SQLite.  This can significantly improve repository
      performance in some cases.
    * The changes made to dependency string parsing were a loss in
      some cases due to inefficiency in PyArg_ParseTuple().
      Performance sensitive paths in misc.c now parse the arguments
      directly.

  o Bugfixes:
    * An Apache-based conary repository server no longer logs
      tracebacks in error_log when a client disconnects before all
      data is sent.
    * A bug that caused cross repository commits of changesets that involved
      a branched trove to fail in some cases has been fixed.
    * If an entitlement is used for repository access, it is now sent
      over HTTPS instead of HTTP by default.
    * The conary emerge command no longer attempts to write to the root
      user's conary log file.
    * conary showcs --all now shows not-by-default troves.
    * Previously, there was no way using showcs to display only the troves
      actually in a changeset - conary would by default access the repository
      to fill in any missing troves.  Now, you must specify the
      --recurse-repository option to cause conary to search the repository
      for missing troves.  The --trove-flags option will now display when a
      trove is missing in a changeset.
    * A bug that caused showcs --all to display file lists even when --ls
      was not specified has been fixed.
    * When mirroring, you are now allowed to commit a trove that does
      not have a SHA1 checksum set.  This is an accurate replication
      of the data coming from the source repository.
    * A bug affecting multiple uses of r.replace() in a group recipe has been
      fixed.
    * A bug that caused components not to be erased when their packages were 
      erased when a group referencing those packages was installed has been 
      fixed.

Changes in 1.0.3
  o Client changes:
    * Conary displays full paths when in the error message generated
      when it can't open a log file rather than leaving out the root 
      directory.

  o Performance improvements:
    * A find() class method has been added to StreamSet which enables
      member lookups without complete thawing.
    * The code path for committing filestreams to repositories now
      uses find() to minimize file stream thaws.
    * DBstore now supports precompiled SQL statements for SQLite.
    * Retrieving troves from the local system database no longer
      returns file information when file information is not requested.
    * Dependencies, dependency sets, StreamCollections, file
      dictionaries, and referenced file lists now use C parsing code
      for stream thawing.
    * Extraneous trove instantiations on the system update path have
      been eliminated.
    * Adding troves to the local database now uses temporary tables to
      batch the insertions.

  o Bugfixes:
    * A bug that caused a mismatch between file objects and fileIds
      when cloning a trove has been fixed.

Changes in 1.0.2:
  o Bugfixes:
    * A bug that caused redirects to fail to build when multiple
      flavors of a trove exist has been fixed.
    * A bug with cooking flavored redirects has been fixed.
    * The cvc command no longer enforces managed policy with --prep.
    * A bug that caused disttools based python packages to be built as
      .egg files has been fixed.  This bug was introduced in conary
      0.94.
    * A bug that prevented checking in a recipe that deleted policy
      has been fixed.
    * A bug that prevented entitlements from being recognized by an
      Apache conary repository server when no username and password
      were set for a server has been fixed.
    * A bug that prevented errors from being returned to the client
      if it attempts to add an invalid entitlement key or has
      insufficient permission to add the entitlement key has been
      fixed.  An InvalidEntitlement exception has been added.
    * A repository bug prevented the mirror client from obtaining a
      full list of new troves available for mirorring has been fixed.
    * A bug in cooking groups caused the groups resulting from an
      r.addAll() to not respect the original group's byDefault
      settings in some cases has been fixed.

Changes in 1.0.1:
  o Database schema migration
    * Over time, the Conary system database schema has undergone
      several revisions.  Conary has done incremental schema
      migrations to bring old databases in line with the new schema as
      much as possible, but some remnants of the old schema remain.
      When Conary 1.0.1 runs for the first time, the database will be
      reloaded with a fresh schema.  This corrects errors that can
      occur due to incorrect SQL data types in table definitions.  An
      old copy of the database will be saved as "conarydb-pre-schema-update".

Changes in 1.0:
  o Bugfixes
    * A bug that allowed a group to be installed before children of
      its children were installed has been fixed.  This ensures this
      if a an update is partially completed, it can be restarted from
      where it left off.
    * A bug in python dependencies that sometimes resulted in a plain 
      python: __init__ dependency has been fixed.
    * A bug that dropped additional r.UtilizeUser matches for a file after
      the first one has been fixed.
    * Accessing a repository with the wrong server name no longer
      results in an Internal Server Error.  The error is marshaled
      back to the client.

Changes in 0.97.1:
  o Bugfixes
    * A bug has been fixed that allowed the "incomplete" flag to be
      unset in the database when applying changesets of troves that
      have no "incomplete" flag.  This resulted in "StopIteration"
      exceptions when updating the trove.
    * A bug has been fixed in the code that selects the OpenPGP key
      to be used for signing changesets at cook time.

Changes in 0.97:
  o Client changes:
    * All troves that are committed to repository through commits,
      cooks, branches, shadows, and clones, now always have SHA1
      checksums calculated for them.
    * Trove objects now have a version number set in them.  The
      version number is increased when the data types in the Trove
      object are modified.  This is required to ensure that a Conary
      database or repository has the capability of storing all the
      information in a Trove.  All trove data must be present in order
      to re-calculate SHA1 checksums.  If a local system understands
      version 1 of the Trove object, and a repository server sends a
      changeset that contains a version 2 Trove, an "incomplete" flag
      will be set for trove's entry in the database.  When accessing
      that trove later for merging in an update, the client will go
      back and retrieve the pristine Trove data from the repository
      server so it will have all the data needed to preform three way
      merges and signature verification.

  o Repository changes:
    * Repositories will now reject commits whose troves do not have
      correct SHA1 checksums.

Changes in 0.96:
  o Client changes:
    * conary rq now does not use affinity by default, use --affinity to turn
      it on.  The rq --compatible-troves flag has disappeared.  Now 
      you can switch between displaying all troves that match your system 
      flavor and that match affinity flavor by switching between
      --available-troves with and without the --affinity flag.
    * conary q now displays installed, not by default troves by default,
      but skips missing troves.
    * Fixed an update bug where updating an x86 library on an x86_64 system
      would cause conary to switch other x86_64 components for that library
      to x86 versions.
    * update job output is compressed again
    * Fixed an update bug where if you had made a local change to foo, and then 
      updated a group that pointed to an earlier version of that trove,
      the trove could get downgraded

  o Other changes:
    * Mirroring now mirrors trove signature

Changes in 0.95:
  o Client changes:
    * The "conary verify" command now handles non-regular files with
      provides and requires (for example, symlinks to shared libraries
      that provide sonames).
    * The "conary showchangeset" command now takes --recurse and
      --no-recurse arguments.
    * All info-* packages are now updated in their own individual jobs;
      this is required for their dependencies to be reliable.
    * The conary syncchildren command now will install new packages
      when appropriate.

  o Repository changes:
    * Additional logging has been added to the repository server.
      Logging is controlled by the "traceLog" config file variable,
      which takes a logging level and log path as arguments.
    * Conary now detects MySQL Database Locked errors and will retry
      the operation a configurable number of times.  The "deadlockRetry"
      configuration variable controls the number of retries and
      defaults to 5.

  o Build changes:
    * Conary now uses site.py to find all possible correct elements of
      sys.path when generating python provides and requires.  Previously,
      new elements added via .pth files in the package being built would
      be ignored for that package.
    * The PythonSetup() build action now works properly with setup.py
      files that use "from setuptools import..." instead of "import
      setuptools".

  o Other changes:
    * The conarybugz.py script has been restored to functionality by
      moving to the conaryclient interface for accessing the
      repository.

Changes in 0.94:

  o Redirects no longer point to a specific trove; they now redirect
    to a branch. The client chooses the latest version on that branch
    which is compatible with the local system.

  o Bug Fixes
    * A bug in getNewTroveList() that could cause duplicate
      troves to be returned has been fixed.
    * A bug that caused a repository server running under Apache to
      fail with an Internal Server Error (500) when a client requested
      a changeset file that does not exist has been fixed.
    * Conary no longer displays an error when attempting to write to a
      broken pipe.  (bug #474)
    * Conary now respects branch affinity when moving from old-style
      groups to new-style groups.

  o Client changes:
    * The query/repquery/showcs command line options have been
      reworked.  See the conary man page for details.
    * When "cvc merge" is used to merge changes made on the parent
      branch with changes made on a shadow, conary now records the
      version from the parent branch that was used for the merge.
      This is required to allow conary to handle changing the upstream
      version on a shadow.  It is also useful for accounting
      purposes.  (bug #220)
    * "conary emerge" can now be performed on a recipe file.
      Previously you were required to emerge from a repository. (bug
      #526)
    * Progress is now displayed as conary applies a rollback. (bug #363)
    * Java, Perl, and Python dependencies are now enforced by default.

  o Build changes
    * PythonSetup() no longer passes the --single-version-externally-managed
      argument to setup.py when it uses distutils instead of setuptools.

Changes in 0.93:
  o Bug Fixes
    * A bug in the "conary verify" code sometimes resulted in an
      unhandled TroveIntegrity exception when local modifications were
      made on the system. (bug #507)
    * Usernames and passwords with RFC 2396 reserved characters (such
      as '/') are now handled properly. (bug #587)

  o Server changes
    * Standalone server reports warnings for unsupported configuration options
      instead of exiting with a traceback.
    * Compatibility for repositoryDir has been removed.
    * A bug caused queries for multiple flavors of the same trove
      to return incorrect results has been fixed.
    * Apache hooks now ignore IOErrors when writing changesets to the
      client.  These normally occur when the client closes the
      connection before all the data is sent.

  o Client changes
    * SHA1 checksums are now computed for source checkins and local
      change set commits.
    * Flavor affinity is now more relaxed when updating troves.  For
      example, if you have a trove with flavor that requires sse2 but
      your system flavor is ~!sse2, conary will only prefer troves
      with sse2 enabled instead of requiring it.

  o Build changes
    * PythonSetup() now correctly requires python-setuptools:python
      instead of python-setuptools:runtime.
    * Automatic python dependency provision now searches more directories
      to better support multilib python.
    * Conary now defaults to building in ~/conary/builds instead of
      /var/tmp/conary/builds, and caching in ~/conary/cache instead
      of /var/cache/conary.

Changes in 0.92:
  o Package Building Changes:
    * Conary policy has been split out into the conary-policy package.
      (Some policy was left in conary proper; it is needed for
      internal packaging work.)
    * Conary prints out the name of each policy as it runs, making it
      possible to see which policies take the most time.
    * BuildLog files no longer contain lines that end with \r.
    * A new 'emergeUser' config item has been added.  Conary will
      change to this user when emerging packages as root.
    * --no-deps is now accepted by 'conary emerge'.

  o Group Building Changes:
    * A bug has been fixed in dependency checking when using
      autoResolve where deleted weak troves would be included in
      autoResolve and depChecks.

  o Client changes:
    * Conary can now rate limit uploads and downloads.  The rate limit
      is controlled by the "uploadRateLimit" and "downloadRateLimit"
      configuration variables, which is expressed in bytes per second.
      Also, Conary displays the transfer rate when uploading and
      downloading.  Thanks to Pavel Volkovitskiy for these features.
    * The client didn't write config files for merged changesets in
      the right order, which could result in changesets which could
      not be committed to a repository.
    * Fixed a bug in the update code caused conary to behave
      incorrectly when updating groups.  Conary would install
      components of troves that were not installed.

  o General Bug Fixes
    * Conary did not include the trove sha1 in the troveinfo diff
      unconditionally.  This prevents clients from being able to
      update when a repository is forced to recalculate sha1
      signatures.

Changes in 0.91:
  o Bugfixes
    * A bug was fixed the code that freezes path hashes.  Previously,
      path hashes were not sorted in the frozen representation.  Code
      to fix the frozen path hashes in databases and repositories has
      beed added.
  o Build
    * added cleanAfterCook config that controls whether conary tries to
      clean up after a successful build

Changes in 0.90.0:
  o Code Structure/Architecture Changes:
    * Conary now has the concept of "weak references", where a weak reference
      allows conary to be able to recognize the relationship between a
      collection and the children of collections it contains.  This allows
      us to add several new features to conary, documented in Client and Build
      changes.
    * SQL operations have been migrated to the dbstore driver to allow
      for an easier switch of the database backends for the server side.
    * Various query and code structure optimizations have been
      implemented to allow running under MySQL and PostgreSQL.

  o Documentation Changes:
    * Added summaries about updateall in the conary man page and added
      information about the command-line options for conary rq.
    * Clarified behavior of "conary shadow --source-only" with respect to
      rPath bug #500.
    * Added synonyms for cvc and conary commands which have shortcuts
      (ex: checkout and co).
    * Added man page entry about cvc clone.

  o Package Building Changes:
    * Build logs now contain unexpanded macros, since not all macros
      may be defined when the build log is initially created.
    * The emerge command can now accept version strings.
    * The RemoveNonPackageFiles policy now removes fonts.cache*,
      fonts.dir, and fonts.scale files, since they are always
      handled by tag handlers.
    * The Make() build action can now take a makeName keyword argument
      for cases when the normal Make() handling is exactly right but
      a different make program is required (nmake, qmake, etc.).
    * The new PythonSetup() build action uses very recent versions
      of the python setuptools package to install python programs
      which have a setup.py that uses either the old disttools or
      new setuptools package.
    * fixed bug #bz470: loadInstalled('foo') will now work when you have
      installed a local cook of foo.

  o Group Building Changes:
    * add() now takes a "components" option.  r.add(<package>,
      components=['devel', 'runtime'])  will install <package>, but only the
      'runtime' and 'devel' components of <package> by default.
    * remove() can now 'remove' troves within child troves.
    * When a component is added, (either via r.add() or dep resolution)
      is automatically added as well (though not all its sibling components)
    * A new r.removeComponents(<complist>) command has been added.  It
      allows you to create a group where all devel components are
      byDefault False, for example: r.removeComponents(['devel',
      'devellib']).
    * The installPath used to build a group in is now stored in troveInfo.
    * r.addAll() now recurses through all the included groups
      and creates local versions of them as well by default.
    * A new r.replace(<name>, <newversion>, <newflavor>) command has
      been added.  It removes all versions of name from all groups in
      the recipe and replaces them with the version found by searching
      for newVersion, newFlavor.

  o Client Changes:
    * When committing source changes in interactive mode, conary will ask you
      you to confirm the commit.
    * A new configuration option, autoResolvePackages, tells conary to install
      the packages that include the components needed for dep resolution.
    * You can now install locally cooked groups.
    * If foo is a redirect to bar, and you run 'conary update foo' when
      foo is not installed on your system, conary will act as if you had
      typed 'conary update bar'.  Previously, it would act as if you had typed
      'conary update bar --no-recurse'.

  o Config Changes:
    * Conary config handling now supports comments at the end of config lines.
      # can be escaped by a \ to use a literal # in a configuration option.
    * Default macros used in cooking are now stored in /etc/conary/macros.
      The 'defaultMacros' parameter determines where cvc searches for macro
      definitions.
    * Conary configuration now searches for configuration files in 
      /etc/conary/conf.d/ after reading in /etc/conaryrc

  o Server Changes:
    * Creating changesets atomically moves complete changesets into place.
    * The contents store no longer reference counts entries.
    * Added support for trove marks to support mirroring.  A client
      can use a trove mark to ask the server for any trove that has
      been added since the last trove mark mirrored.
    * Added the hasTroves() interface to support mirroring.  This allows
      the mirror client to make sure that the target mirror does not
      already have a trove that is a candidate for mirroring from the
      source repository.
    * Added support for traceback emails from the repository server.
    * The repository contents store was reworked to avoid reading
      precompressed gzipped data twice (once to double check the uncompressed
      contents sha1 and once to copy the file in place).
    * We have changed the way schema creation and migration is handled
      in the repository code. For administrative and data safety reasons,
      schema upgrades and installs can be performed from now on only by
      running the standalone server (conary/server/server.py --migrate),
      thus avoiding race conditions previously created by having multiple
      Apache processes trying to deal with the SQL schema updates.

   o Command Changes
    * A new script that mirrors repositories has been added.  It is in
      the scripts/ directory in the source distribution of Conary.

Changes in 0.80.4:
  o Build Changes:
    * PackageRecipe has been changed to follow our change to split
      conary into three packages.
    * x86_64 packaging elimintated the conary:lib component to follow x86
      (those files now belong in conary-build:lib)

Changes in 0.80.3:
  o Client Changes:
    * The internal branch source and branch binary flags were changed
      to a bitmask.
    * The warning message printed when multiple branches match a cvc
      checkout command has been improved.
    * Only interactive mode can create binary shadows and branches, and
      a warning is displayed before they are created (since source branches
      are normally the right thing to use).

  o Build Changes:
    * Files in subdirectories named "tmp" are no longer automatically
      excluded from packaging, except for /tmp and /var/tmp.
    * DanglingSymlinks now traverses intermediate symlinks; a symlink
      to a symlink to a symlink will no longer confuse it.

Changes in 0.80.2:
  o Client Changes:
    * Bugs in "conary update foo=<old>--<new>" behavior have been
      fixed.
    * "cvc co foo=<label>" will now work even if you don't have a
      buildLabel set
    * "conary showcs" will now work more nicely with group changesets.
    * "conary showcs --all" no longer shows ids and sha1s.
    * We now never erase pinned items until they are explicitly unpinned.
    * "conary verify" and "conary q --diff" work again.
    * "conary q tmpwatch --components" will display the components
      installed for a package.
    * The pinTroves config item behavior has been fixed.  It now
      consistently pins all troves that match a pinTrove line.
    * When a trove is left on the system because of dependency resolution
      during an update, a warning message is printed.
    * Command line configuration, such as --config
      'buildLabel conary.rpath.com@rpl:devel', now overrides context
      configuration.

  o Server Changes:
    * The repository server now retries a request as an anonymous user
      if the provided user authentication information does not allow
      a client request to succeed.
    * When using "server.py --add-user" to add a user to a repository
      server, the user will only be given admin privileges if --admin
      is added to the command line.  Previously, all users added with
      server.py had admin privileges.  Additionally, if the username
      being added is "anonymous", write access is not granted.

  o Build Changes:
    * It is now possible for a recipe to request that specific
      individual requirements be removed from files using the
      exceptDeps keyword argument to r.Requires().  Previously
      you had to accept all the dependencies generated by r.Requires()
      or none of them.
    * r.Replace() now takes a lines=<regexp> argument, to match a line based
      on a regexp.
    * The EnforceJavaBuildRequirements policy has been added.  When
      you are packaging precompiled Java software where you have
      .class/.jar files but no .java files, you can use "del
      EnforceJavaBuildRequirements" to prevent this from policy from
      generating false positives.
    * The EnforceCILBuildRequirements policy has been added.
    * Enforce*BuildRequirements now warn when a package has requirements
      which they don't fulfill themselves and which are not fulfilled by
      the system database.  (for example, soname dependencies from linking
      against libraries that are not managed by Conary on the system.)
    * Automated Perl dependencies have been added, for both provides
      and requires.  They are not yet enforced, in order to give time
      to adapt while perl packages are being re-built.
    * The EnforcePerlBuildRequirements policy has been added.
      Failures found by this policy may be caused by packages on the
      system not having been rebuilt yet with Perl dependencies, but
      could also show bugs in the Perl dependency code.
    * Automated Python dependencies have been added, for both provides
      and requires.  Like Perl dependencies, they are not yet
      enforced.
    * The EnforcePythonBuildRequirements policy has been added, with
      the same caveats as EnforcePerlBuildRequirements.
    * Conary now writes more information about the build environment
      to the build log when cooking.
    * A bug that caused r.Requires('file:runtime') to create a file
      dependency on 'runtime' instead of trove dependency on
      'file:runtime' has been fixed.
    * Java dependencies now properly ignore array elements in all cases,
      removing false Java dependencies like "[[I" and "[[B".


Changes in 0.80.1:
  o Client Changes:
    * User names and passwords are no longer allowed in repository maps;
      "user" configuration entries must be used instead.
    * The clone command now allows you to clone a binary onto the same
      branch, without having to reclone the source.
    * The TroveInfo table on the client is getting corrupted with
      LoadedTrove and BuildReq entries for components.  These entries
      are only valid on packages.  Code was added to catch when this
      happens to aid debugging.  Additionally, Conary will
      automatically remove the invalid entries the first time 0.80.1
      is run.
    * Environment variables are expanded in paths in conary configuration files.
    * localcs now allows the version and flavor to be specified for a trove
    * conary scs --all now behaves the way it used to again
  o Build Changes:
    * Java dependency generation is now enabled; Java dependency enforcement
      is still disabled.
    * The skipMissingSubDir keyword argument now actually works correctly
      when the subdirectory is missing.
  o Common Changes:
    * Entitlement support has been added as an alternate method of
      authentication.

Changes in 0.80.0:
  o Client Changes:
    * The logic for defining updates across a hierarchy has been completely
      replaced. Instead of rigidly following the trove digraph, we flatten
      the update to choose how troves get updated, and walk the hierarchy
      to determine which updates to actually apply.
    * Dependency resolution could include troves which caused duplicate
      removals for the troves those included troves replace
    * Chroot handling was broken in 0.71.2 and prevented the user name
      lookup code for the chroot from exiting back out of the chroot
    * showchangeset on relative changesets now displays them as jobs.
    * query and queryrep now exclude components if they match their
      package name
    * Conary cleans up rollbacks when a changeset fails to apply.
      Previously, an invalid changeset was saved in the rollback
      stack, which made applying it impossible
    * Removed direct instantiation of NetworkRepositoryClient object; it
      should be created by calling ConaryClient
    * repositoryMap should not contain usernames and passwords now; user
      config file option should hold those instead (user *.rpath.org user pass)
    * If a user name is given without a password the password will be prompted
      for if the repository returns a permissions error
    * added --components parameter to q and rq to not hide components
    * conary update --full-versions --flavors now will work as expected
    * fixed a bug with conary erase foo=/branchname
    * When in multi-threaded mode, the download thread now checks to see
      if the update thread wants to exit.  This fixes many of the
      "timeout waiting for download thread to terminate" messages.
    * Fixed bug where conary erase foo --no-deps wouldn't erase a component
      of foo if it was required by something else
  o Build Changes:
    * Dependencies are now generated for Java .class and .jar files.
      They are not yet enforced, to give time to rebuild Java packages.
    * Java dependency generation has been turned off until 0.80.1 in
      order to wait until there is a deployed version of Conary with
      long dependency handling; some .jar files have so many
      dependencies that they overflowed dependency data structures.
    * CheckDesktopFiles now looks in /usr/share/icons for icons, and
      can find icon names without extensions specified.
    * Build actions which take a subDir keyword argument now also can
      take a skipMissingSubDir keyword argument which, if set to True,
      causes the build action to be skipped if the specified subdirectory
      does not exist.  By default, those build actions will now raise
      an error if the directory does not exist, rather than running in
      the wrong subdirectory as they did previously.
    * You can now cook a recipe that has a superclass that is defined
      locally but a has supersuperclass that is in the repository.  Similarly,
      if you have a superclass that is in the repository but a supersuperclass
      locally, conary will find that as well
    * r.Replace with parameters in the wrong order will now behave correctly
    * The automatic :config component for configuration files has been
      disabled because Conary does not handle files moving between
      troves, and config files were being re-initialized when packages
      were updated.
  o Code structure:
    * queryrep, query, showchangeset, and update --info all use the same
      code to determine how to display their data.  Display.py was changed
      to perform general display operations.
    * query.py added
    * added JobSource concept for searching and manipulating lists of jobs.
    * moved datastore.py into repository module
    * Stubs have been added for adding python and perl dependencies, and
      the stubs have been set to be initially ignored.
    * The internal structure for conary configuration objects has changed
    * A new DYNAMIC size has been added to the StreamSet object.  This will
      cause StreamSet to use either a short or long int to store the size
      of the frozen data that is included in a frozen StreamSet, depending
      on the size of the data being stored.

Changes in 0.71.2
  o Client Changes:
    * The update-conary option has been renamed updateconary per
      bugzilla #428
    * buildPath can be set in contexts
    * cvc co <foo> will work even if there are two foos on the same label with
      different branches.  In that case, it will warn about the older foo
      which it doesn't check out
    * Test mode didn't work for updates and erases which were split into
      multiple jobs
  o Build Changes:
    * Combined the EtcConfig and Config policies, and deprecated
      the EtcConfig policy.
    * All config files default to being put into a :config component.
      This is overridden by any ComponentSpec specifications in the recipe.
    * A use flag has been added for xen defaulting to 'sense prefernot'.  This
      flag should be used to specify flavors for xen domU builds where special
      provisions are made for paravirtualized domU.
    * Added new CheckDesktopFiles policy to catch some more common errors
      in .desktop files.  (For now, it looks for common cases of missing
      icons; more may be added over time.)
    * The Requires policy now interprets synthetic RPATH elements (passed in
      with the rpath= keyword argument) as shell-style globs that are
      interpreted relative first to the destdir and then to the system.

Changes in 0.71.1:
  o Server Changes
    * Added iterTroves() call which iterates over large numbers of troves
      much more efficiently than a single getTrove() call would.
    * Split out FileRetriever object to allow file information to be pulled
      from the repository inside of an iterTroves() loop
    * The web interface shows the troves contained in a group trove instead
      of trying to list all files in a group.
  o Client Changes
    * Config file options that take a path as a value now support ~ for
      home directory substitution
    * Trove.diff() returns a standard job list instead of the previous
      only-used-here format
    * /var/log/conary tracks all update, remove, rollback, and erase events
    * Progress output is simplified when stdout is not a tty (no line
      overwrites)
    * Tracebacks during logged commands get copied to the log
    * Code which checked to see if a shadow has been locally modified didn't
      work for shadows more than a single level deep
    * When you are installing from changesets using --from-files, other troves
      in the changesets can be used for dependency resolution
  o Build Changes (cvc)
    * Additional calls are emulated by the filename_wrapper for the
      r.Run calls.
  o Code Structure
    * Split build/recipe.py into several smaller files
    * Moved OpenPGP keyTable access up call stack so that it can now be
      accessed outside of kid templates.
    * Move epdb code into its own package

Changes in 0.71.0:
  o Code Structure
    * conary now imports all python modules from a toplevel "conary"
      module.  This prevents conary from polluting the module namespace.
  o Client Changes
    * Clone didn't handle shadow version numbers correctly (and could create
      inconsistent version numbers)

Changes in 0.70.5:
  o Client Changes
    * Files changing to config files across distributed repositories now works.
    * The update code uses more consistent use of trove sources, and only
      makes explicit calls to the repository if asked.  This should make it
      possible to create interesting update filters.
    * Clone updated sequences it was iterating over, which is generally
      a bad idea (and caused clone to commit inconsistent troves)
  o Build Changes (cvc)
    * Locally cooked filesets now include file contents, making the
      filesets installable.
    * Fileset cooks now retrieve all of the file objects in a single
      network request per repository.
    * The new NormalizeLibrarySymlinks policy runs the ldconfig program
      in all system library directories.  This ensures that all the
      same symlinks that ldconfig would create when the shlib tag handler
      runs are packaged.  It also warns if ldconfig finds missing files.
    * New argument to r.Run(): "wrapdir" keyword argument behaves much
      like "filewrap" but takes a string argument, which limits the scope of
      %(destdir)s relocation only to the directories under the specified
      wrapdir, which is interpreted relative to %(destdir)s.  Works best
      for applications that install under one single directory, such
      as /opt/<app>
    * Clone, branch, and shadow all take --info now instead of --test
    * ELF files that dlopen() libraries can now be provided with
      synthetic soname dependencies with
      r.Requires('soname: libfoo.so', '/path/to/file')
    * r.Requires now enforces that packages that require a file and
      include that required file must also explicitly provide it. (bz #148)
  o Server Changes
    * Packages added to the repository are checked to ensure the version and
      flavor of all referenced components are the same as for the package

Changes in 0.70.4:
  o Client Changes
    * The trove that satisfies a dependency that is broken by erase is
      now displayed in the "Troves being removed create unresolved
      dependencies" message.
    * Components are now displayed on the same line as their parent
      package in "conary update" output.
    * A new 'interactive' option has been added to conary configuration.
      When set to true, conary will display info about clone, branch,
      update, and erase operations, and then ask before proceding.
  o Build Changes (cvc)
    * The CompilePython action has been fixed to accept macros at the
      beginning of its arguments, fixing a bug new in Conary 0.70.3.
    * The Requires policy can now be given synthetic RPATH elements;
      this is useful when programs are only intended to be run under
      scripts that set LD_LIBRARY_PATH and so do not intrinsically have
      the information they need to find their libraries.
    * Added --test to clone, branch, and shadow commands
    * Clone now supports --skip-build-info for less rigid version checks
      on cloned troves
    * Fixed usage message to better reflect reality
    * Cloning to a branch which already has a version with a compatible
      flavor now works.
    * cpio archive files are now supported for r.addArchive()
  o Repository Changes
    * The repository now serves up stored OpenPGP keys as a "Limited
      Keyserver"; users can retrieve keys, but not search or browse them.
      The keys are available via /getOpenPGPKey?search=KEY_ID. This
      is meant only to allow conary to automatically retrieve OpenPGP
      keys used to sign packages.

Changes in 0.70.3:
  o Client Changes (conary)
    * Conary now works harder to avoid having separate erase/installs,
      instead preferring to link those up into one update when possible.
    * Conary configuration now supports contexts.  Contexts are defined in
      sections starting with a [<name>] line, and provide contextual
      configurations for certain variables, defined in the man page.  All
      configuration options after the [<name>] will be associated with that
      context, and will override the default configuration when that context
      is active.  The current context can be selected by using the --context
      parameter, or by setting the CONARY_CONTEXT environment variable.
    * 'conary config --show-contexts' will display the available contexts
  o Build Changes (cvc)
    * A local cook of a trove foo will ensure that the changeset created is
      installable on your local system, by making sure the version number
      created is unique.
    * The builddir is no longer allowed to appear in ELF RPATHs.
    * The build documentation strings have been significantly updated
      to document the fact that for most strings, a relative path
      is relative to the builddir, but an absolute path is relative
      to the destdir.
    * The ManualConfigure action now sets the standard Configure
      environment.
    * cvc will allow you to cook a trove locally even when you are unable
      to access the trove's source repository
  * Common Changes:
    * Version closeness was improperly measured for troves on different
      branches when then label structure was identical
  o Repository Changes
    * Repository now has a config flag called requireSigs. Setting it to
      True will force all troves to have valid package signatures.  Troves
      lacking this will be rejected.  Enabling this option prevents the
      generation of branches, shadows, or clones since these troves are not
      signed.  It is not recommended that this option be enabled until the
      infrastructure is in place to provide package signatures for all types
      of troves.

Changes in 0.70.2:
  o Client Changes (conary)
    * GnuPG compatible trust metrics for OpenPGP Keys now exists. This
      makes it possible for conary clients to refuse troves that
      aren't properly trusted. The metrics currently in place mimic
      gpg behavior.
    * Running "conary update" in a directory that does not exist no
      longer fails with an error (bugzilla #212).  Note that "cvc
      update" still requires that the current working directory exists
      of course.
    * HTTP error conditions are handled more gracefully when commiting
      a change set. (bugzilla #334)
    * conary more reliably sets a non-zero exit status when an error
      occurs. (bugzilla #312)
    * When performing an update of a group that adds a trove foo,
      search the system for a older version of foo to replace if the
      original update command found a replacement by searching the
      system.
    * New option, "conary update-conary" has been added in an attempt
      to provide a workaround for future drastic protocol revisions
      such as what happened for 0.70
    * Methods for parsing command line update request and changeset requests
      have been added to conaryclient.cmdline
    * A metric for the distance between arbitrary versions on different
      branches has been added, and the code which matches troves changes
      between collections uses this code to give well-defined matches
      for all cases.
    * Rollbacks are now listed with the most recent on top
    * Troves which a group operation tries to remove will be left behind
      if they satisfy dependencies for other troves
    * updateall command respects pins on top-level troves
    * Dependency resolution no longer blows away pinned troves
    * conary update now takes a changeSpec, allowing you to specify both
      the version to remove and the update version, like
      'conary update foo=2.0--3.0'

  o Build Changes (cvc)
    * cvc more reliably sets a non-zero exit status when an error
      occurs. (bugzilla #312)
    * Building groups w/ autoResolve displays the revision of the
      troves which are being included
    * The change to automatically split up hardlink groups into
      per-directory hardlink groups has been reverted.  Instead,
      Conary enforces that link groups do not cross directories, but
      provides an exception mechanism for the rare cases where it is
      appropriate to do so.  The old LinkCount policy was renamed
      LinkType, and the new policy enforcing link group directory
      counting is now called LinkCount.
    * The NormalizeCompression policy no longer causes an error if you
      have two files in the filesystem that differ only by the .gz or
      .bz2 extension.
    * The Provides policy will not longer automatically provide soname
      dependencies for executable files that provide sonames.  A few
      executables do provide sonames, and 0.70.1 provided them as
      harmless extraneous provisions.

   o Repository Changes
     * A new getConaryUrl() method has been implemented to support the
       "conary update-conary" feature
     * Exception handling has been re-worked.  All exception classes
       that are marshaled back to the client are now in the
       repository.errors module.  Some of the most commonly used
       exception classes have been included in their previous modules
       for compatibility until code can be modified to use the new
       repository.errors module.

Changes in 0.70.1:
  * Collection merging didn't handle (admittedly obscure) cases where
    a component on the local system was updated to a new version of a
    trove, and updating that package also tries to update to that version
    but using a different path
  * Redirects are allowed in group cooking as long as the target of the
    redirect is also specified in the group (this allows cleaner handling
    when trying to clean up after label multiplicity)
  * Shorten display for versions and flavors in internal debugging output.
    Make str() output for versions and flavors return formatted strings.
  * ELF files finding non-system libraries via an RPATH did not always
    have the path to the library encoded in their dependency requirement,
    depending on whether the package also included some other (unrelated)
    non-system library.  Futhermore, system paths encoded in an RPATH were
    incorrectly honored.  Both of these bugs have been fixed.
  * Ownership policy now uses macros in the user and group definitions.
  * Symbolic links to shared libraries can now provide path-encoded
    soname dependencies (only manually, never automatically).
  * Removed outdated code with convoluted code for preventing providing
    soname dependencies in some cases; that code has been functionally
    replaced by limiting automatic soname dependencies to system library
    directories.
  * Instead of complaining about hardlinks spanning directories, Conary
    simply creates one link group per directory per hardlinked file.
  * Fixed bug which made source commits fail on cloned source troves

Changes in 0.70.0:
  o The client and server protocol versions have been changed and
    the filecontainer version number updated.
    * Upgrading from previous versions of Conary to 0.70.0 will
      require downloading a old-format changeset file from
      ftp://download.rpath.com/pub/conary/
    * Adding path hash data to TroveInfo overflowed the amount of
      storage space available in a StreamSet when a trove contained
      several thousand files.  In order to accommodate larger data
      stored in StreamSets, we have changed the way data sizes are
      handled.
    * With the changes to StreamSet, LargeStreamSet is obsolete.
      Changeset files used to used LargeStreamSet to represent data.
      Since we now just use a StreamSet, the changeset file format
      changed.
    * Since this version of Conary is incompatible with previous
      versions, we took this opportunity to do database and repository
      migrations that will allow us to make significant code cleanups
      in the near future.

 o Other smaller changes
    * Conary now does the right thing if the same trove is listed
      twice in an update due to recursion (it checks for duplicate
      installs of the same trove).
    * A bug where None would show up in CONARY files when an
      autosource file changed contents but did not change names has
      been fixed.

Changes in 0.62.16:
  * The "conary update" and "conary erase" commands now display the actions
    they take as they run (similar to --info output).
  * The --info output for "conary erase" and "conary update" has been
    reworked to be more user-friendly.
  * Added new conaryrc option signatureKeyMap to choose which signature
    to use when signing based on the label.
  * Fixed a bug where conary would only sign the last trove listed,
    instead of signing all troves listed.
  * The ComponentRequires policy now makes :devellib components require
    :data components if they exist.
  * Don't check for bucket conflicts when resolving during group cooks - if we
    want to check for bucket conflicts in groups, it will be readded in a more
    general way.
  * Removed extra freezes and thaws of files for a 8% improvement in install
    time for absolute change sets (at the cost of some memory, but thanks
    to splitting transactions this should be a good trade off).
  * Added removeIfExist call to miscmodule for some peformance improvement.
  * ELF files that find non-system libraries via an RPATH now have the path
    to the library encoded in their dependency requirement, matching the
    path encoded in the dependency provision.  Before this, the RPATH
    was ignored and the path encoding was only guessed within one source
    package.
  * The LinkCount policy now enforces the requirement that hardlink groups
    contain only files in the same directory as each other; no hardlinks
    between files in different directories are allowed.
  * When updating a group across branches, if a subtrove within the update has
    already been manually moved to the new branch by the user, conary will
    recognize this and sync that trove with the group
  * A new "closed" configuration variable has been added to the
    apache-based networked repository server.  When set, the server
    will always raise a "RepositoryClosed" exception when a client
    attempts to access it.  The configuration variable is a string.
    The string will also be returned to the client.
  * Removed install buckets and replaced with comparisons of hashed path
    values to determine trove compatibility.
  * If a trove is included in an update twice, once directly, and once
    implicitly through recursion, ignore the recursive update.
  * More constraints added to the repository schema
  * Added hasTrove to Items table for faster trove names check

Changes in 0.62.15:
  * The MakeDevices() policy now accepts mode= as a named argument.
  * Added (undocumented) --debug (prints debugging output),
    switched old (undocumented) --debug to now be --debugger (starts debugger
    on initialization)
  * Added debug messages to conaryclient/update.py
  * Cloning to the the same branch works (providing a good way of
    reverting changes)
  * Cloning now updates buildRequirements and loadedTroves in troveInfo
    and enforces their consistency on the target branch
  * Cloning groups is now supported
  * Fix update case where a group update should cause conary to search the
    system for an older version of a trove to replace.
  * If you update a trove foo locally to a new version on the same branch, and
    then update the containing group to a new version on a different branch,
    conary will now update foo to the new branch as well.
  * fix error message when you try to pin as non-root

Changes in 0.62.14:
  * The threading changes in .13 caused some error information to be lost.
    Tracebacks have now been fixed, and the download thread checks much more
    often to see if it needs to exit.
  * Catch InstallBucketConflicts exception

Changes in 0.62.13:
  o Repository Server changes
    * The Schema creation SQL statements have been rewritten in a more
      standardized form. Some indexes have been redefined and a number
      of views have made their way into the default repository schema.
    * The new call troveNamesOnServer can be used now by the netclient
      code for a much faster retrieval of all trove names available on
      all labels on a given server. Server and client protocol numbers
      have changed.
    * The getTroveList() server side function got a rework that should
      result in about a 50% execution time speedup on most queries.
    * The Metadata SQL query has been reworked to join tables in a
      much better order, speeding up the getMetadata call on a
      repository with many versions much faster.

  o Client changes
    * Conary now compresses XML-RPC requests before sending them to
      the repository server.  In order to use compression, the remote
      server must be running Conary 0.62.13 or later.  If the server
      is running an older version, the client will fall back to
      sending uncompressed requests.
    * The database conversion in 0.62.12 did not correct all
      out-of-order file streams.  A new conversion function is in
      0.62.13 that will examine every file stream and ensure that it
      is stored correctly in the database.
    * Versions from the contrib.rpath.com repository are automatically
      rewritten to point to contrib.rpath.org.  NOTE: if you have a
      label from the contrib.rpath.com repository in your
      InstallLabelPath (such as contrib.rpath.com@rpl:devel), you will
      need to modify it to point to contrib.rpath.org.
    * Install bucket handling now works for collections which were not
      fully installed.
    * A bug where database was left locked on exception during install
      when the download thread was still executing has been fixed.
    * The conaryclient code has been split into pieces.
    * Switched rollbacks to local@local:ROLLBACK
    * The main thread no longer blocks forever when the download
      thread fails.
    * Matching referenced troves in collections is no longer dependent
      on sort order of internal dictionaries.

  o Common Repository and Client changes
    * When a changeset is applied to the local system or committed to
      a networked repository, the fileIds are recomputed from the file
      objects and verified.  This prevents corrupted or miscomputed
      changesets from being committed to the repository or applied to
      the local system.

  o Building/Branching changes
    * Many changes have been made to cloning, including sideways
      cloning (creating a clone at the same branch depth as the clone
      source), better cloning with multiple flavors, separate cloning
      of source and binaries, resilience against duplicate troves,
      proper use of existing fileIds during clones, simultaneous
      cloning of multiple troves, and better clonedFrom tracking.
    * The default optflags for x86 changed to remove -mcpu, as it is
      deprecated in gcc.

Changes in 0.62.12:
  * Conary will no longer create a "rootroot" group while installing
    users whose primary group is "root".  It will now call the
    appropriate tag handler for user/group modifications if the tag
    handler is installed.
  * EnforceConfigLogBuildRequirements no longer suggests recursive
    build requirements for packages in which the configure script
    checks to see if the package is already installed.
  * Installing new version of pinned troves leaves the pinned trove in
    place if the two troves have compatible install buckets
  * By default, when you shadow a binary trove, its source is shadowed with it.
  * Instead of a --sources option, cvc shadow and cvc branch now take
    --source-only and --binary-only options that allow you to control whether
    sources or binaries are shadowed.
  * Branch and shadow commands now take an unlimited number of troves
    to branch/shadow.
  * Files sharing versions but with different contents (thanks to flavors)
    got lost when switching from one flavor of a trove to another
  * troves can now be specified for rq, q, and update as <labelpart>/<version>,
    e.g., foo=:rpl1/1.0, or foo=contrib.rpath.com@/2.3-1-2
  * version.hasParent() handles more cases of shadows of shadows correctly.
  * cooking troves into the repository with --flavor <newflavor> now modifies
    the flavor before the recipe is even loaded, not when the recipe's setup
    function is called.
  * add a check to ensure RPATHs in cooked packages do not have %(destdir)s
    or /tmp or /var/tmp in them.
  * EnforceSonameBuildRequirements has been temporarily changed to produce
    warnings instead of errors.
  * Dependncies and flavors didn't order things properly in their frozen forms
  * StreamCollections are now properly ordered

Changes in 0.62.11:
  * InstallBucket policy now allows using macros in component names.
  * The --resume option now works correctly when conary has
    automatically discovered a non-standard path for the main build
    directory.
  * A soname dependency is again generated for libraries outside of
    library directories, but the pathname is now included in the
    dependency.  Within a package, all matching dependencies are
    modified to include the path.  This is useful for cases where
    an application packages private versions of libraries -- the
    dependencies still need to be there so that inter-component
    requirements are honored, but they must not perturb the rest
    of the system.
  * Recursive pinning now behaves itself
  * Switch group recipe syntax to use r.add() instead of r.addTrove,
    r.remove() instead of r.removeTrove(), and add a
    r.setDefaultGroup() command to set the default group.

Changes in 0.62.10:
  * EnforceSonameBuildRequirements enhanced to handle correctly cases
    where more than one trove can resolve a single soname dependency.
  * EnforceConfigLogBuildRequirements now can take exceptions, which
    can be specified either as a filename (such as /usr/bin/bison or
    %(bindir)s/bison) or as a required trove (such as bison:runtime).
  * The trove.Trove initializer no longer allows for a trove to be created
    with a name that has more than one ":" character in it.
  * EnforceSonameBuildRequirements now can take exceptions, which are
    specified as a required trove (such as libfoo:devel) to avoid adding
    to the list of requirements.
  * EnforceSonameBuildRequirements now produces errors for missing build
    requirements, and EnforceConfigLogBuildRequirements now demonstrates
    very few false positives, and so has been updated to warning instead
    of info.
  * Added a check to warn when a trove is installed multiple times from
    the same branch with incompatible install buckets (--no-conflict-check
    overrides this check)
  * Redirects can now redirect to nothing, which allows components to
    disappear gracefully on a redirection
  * A soname dependency is now provided only if the library is in a
    default library directory, or in a directory explicitly added with a
    SharedLibrary(subtrees='/path/to/dir/') call.

Changes in 0.62.9:
  * EnforceConfigLogBuildRequirements policy added.  It looks through
    all config.log files anywhere under the build directory for programs
    that configure has found, and ensures that the transitive closure
    of the build requirements contains each file listed.  (That is, if
    the file /usr/bin/perl has been found, and intltool:runtime is in
    the buildRequires list, and intltool:runtime requires perl, then the
    requirement is satisfied.)  This policy currently produces some false
    positives; the "greylist" that tries to remove false positives needs
    to be expanded.
  * The repository server now uses a repository instance specific key
    cache.  This fixes KeyNotFound errors seen when running multiple
    repositories on one server.

Changes in 0.62.8:
  * The bug, introduced in 0.62.7, that caused Conary to stop short of
    recursing to the innermost troves when handling erasures has been fixed.
  * EnforceSonameBuildRequirements enhanced to use the system database to
    find the right missing build requirements.
  * Make users and groups in a repository such that they may not differ only
    in case, i.e. if user foo exists, user Foo cannot be created.
  * files in /usr/%(lib)s/python/.* are no longer automatically given an
    architecture flavor - if there are architecture-specific files in those
    dirs, they should result in an arch-specific flavor through normal
    means.
  * By default, no OpenPGP signatures will be added to troves when
    doing commits unless a fingerprint is explicitly set in conaryrc.
    Previously, if a keyring existed, the first key found would be used.

Changes in 0.62.7:
  * Some unneeded parts of the sql query in _getTroveList have been removed,
    improving performance.
  * The performance of the default (and most used) case of the
    getAllTroveLeaves has been increased up by using a specialized
    query.
  * Exception handling in the repository when revoked or expired keys
    are used has been corrected.
  * Signature checking now correctly checks the timestamp of the signature
    against the expiration time (if any) of the key that signed it.  If
    the signature timestamp is later than the expiration timestamp,
    the signature is rejected.
  * Pass 'Database is locked' repository errors to the client as a
    RepositoryLocked exception notifying user that the server is busy.
  * The 'yuck' script is no longer installed.
  * ComponentRequires now makes :runtime, :lib, :devellib, and :devel
    components all require their matching :config component if the
    :config component exists.  The :config component is not automatically
    created, but when it exists, it's always going to be because it
    is required by multiple other components.

Changes in 0.62.6:
  * mergeCollections() didn't always handle referenced troves changing
    byDefault status
  * Various cleanups and simplifications have been made to the trove
    removal determination

Changes in 0.62.5:
  * Allow selection of individual troves from change set files via --from-file
  * Recursive queries on local database could get upset by a missing trove
  * Underlying dependency code returns version and flavor for troves with
    broken dependencies
  * Underlying dependency code returns information on what removed trove
    caused a broken dependency
  * Removed --no-deps-recurse option
  * Greatly simplify dependency resolution logic
  * The version portion of a Release (version-sourceCount-buildCount)
    is no longer required to begin with a digit.
  * The Release parsing code has been cleaned up to use consistent
    naming, API documentation, and parse error messages
  * An unhandled exception when signing a trove twice with the same key
    has been fixed.
  * Old (now invalid) changesets are now removed from the changeset
    cache when a digital signature is added to a trove.
  * A package is now counted as empty if it contains only files automatically
    found by the AutoDoc policy.
  * CPackageRecipe now requires elfutils:runtime for eu-strip; this is
    needed for the existing debugedit:runtime requirement to do useful
    work.
  * Removed DistroPackageRecipe and moved its buildRequires list to
    PackageRecipe.  Use clearBuildReqs() to remove any of the base
    requirements for a package.
  * Install buckets are respected during dependency resolution
  * Updated the troveNames() call to a faster query, which should bring
    the run time of the "conary rq" back to a more reasonable limit
  * Race conditions and robustness problems have been fixed in
    the changeset cache.

Changes in 0.62.4:
  * Many places where lots of individual db calls were done to collect
    file objects have been collapsed into batched calls (5-10% speedup
    on some operations)
  * Fixed PGP key submission to not use a hidden form element.
  * Changed PGP key submission to use an xmlrpc call instead of
    modifying the database directly.
  * Added methods to change PGP key/user associations, and thereby
    disable a key.
  * Added an index to dependency resolution for a massive improvement
    on local system dependency performance on large updates.
  * Added the ability to get troves without file lists from the local
    database and use that when getting troves through the changeset
    trove source.
  * Previously, dependency resolution could cause duplicate
    trovesource entries.  This no longer occurs.
  * :lib and :devellib automatically have lib=%(lib)s install buckets.
  * A user management bug in the repository has been fixed.
    Previously, if you deleted a group followed by the user with the
    same name of the group, an unhandled exception occurred.
  * Looking up changeset cache entries in the cache database no longer
    uses exception handling to determine when database entries are
    invalid or stale.
  * The EnforceSonameBuildRequirements policy now recognizes :devellib
    as well as :devel components in buildRequires.

Changes in 0.62.3:
  * Don't link troves to groups when the branch has changed
  * Link new troves to collections (and new collections to old troves) when
    a trove isn't installed but a suitable replacement (meaning on the same
    branch) is available
  * Installing changesets w/ not by default from files broke
  * Fix a bug in the kid template that prevented permissions (ACLs) from being
    deleted from a repository.

Changes in 0.62.2:
  * Further reworkings of update code to be fully based on job sets. The
    absolute flag now defines whether a trove is newly installed or if
    it should be an update from an existing trove (when possible). Network
    changesets and changesets from files are treated almost identically now.
  * Swapped lock terminology for pin
  * Changed table names in database schema to better match the repository
    schema

Changes in 0.62.1:
  * UtilizeGroup fixed
  * conary updateall fixed
  * Disable SHA-1 integrity checks when trove changesets don't include
    files in various places
  * conary now prevents you from cooking empty groups

Changes in 0.62.0:
  * Initial OpenPGP (RFC 2440) based signature support has been
    added. Conary reads public keys from ~/.gnupg/pubring.gpg and
    /etc/conary/pubring.pgp.  Conary reads private keys from
    ~/.gnupg/secring.pgp.  Setting the "signatureKey" configuration
    variable to a key ID will select which key to use from the
    keyring. If signatureKey is not set, and there is a valid private
    keyring, the first key on the keyring will automatically be used
    to sign changesets when committing them to the repository.
    "cvc sign" adds a signature to a trove that already exists in the
    repository.
  * Change set generation on the command line is more flexible. It can generate
    erasure changesets as well as relative to nothing changesets
  * When creating multiple groups from the same recipe using newGroup(),
    Conary now searches all subgroups when resolving dependencies within
    a parent group
  * Conary no longer resolves dependencies for troves with byDefault=False
    (such as :test and :debuginfo).  Conary will now resolve dependencies in
    those troves only if you set checkOnlyByDefaultDeps=False.  When creating
    subgroups using newGroup(), pass the checkOnlyByDefaultDeps flag as an
    argument to the newGroup() function.
  * excludeTroves now applies to troves which have been added to
    already installed collections

Changes in 0.61.12:
  * You can now search for troves by <trove>=<host>@
  * A bug when cooking groups with depCheck = True (introduced in 0.61.10)
    has been fixed.
  * A new r.ByDefault policy controls how components are included in their
    enclosing packages; the default is True except for :test and :debuginfo
    components that default to False.
  * Cloning across repositories works
  * A bug in 'conary update --info' output was fixed

Changes in 0.61.11:
  * A bug that caused a database deadlock when removing entries from the
    changeset cache in the repository server has been fixed.
  * Added RegularExpressionList in conarycfg
  * Added lockTroves configuration option for autolock
  * Recurisvely included troves could be removed incorrectly when those
    troves were already present

Changes in 0.61.10:
  * The conary update command now takes a --sync parameter, documented in
    'man conary'
  * Groups now allow you to create a reference to another cooked trove,
    and use that reference to add troves that are contained in that trove.
    For example, if you want to create a group-python based on the troves in
    an already cooked group-dist, you add a reference to the group-dist in
    group-python, and pass the group-dist reference in when you call
    addTroves.
  * Work has begun towards generalizing the concept of a trove source.
    A class SimpleTroveSource has been added that, when subclassed and given
    access to the troves, will allow you to call findTroves to search that
    source.  The same code is used in update code to unify updating from
    the repository and from changesets, and it is used to provide the search
    capabilities for the local database.
  * Conary now allows all files, not just regular files, to have
    dependencies.  This is necessary for user/group dependencies for
    non-regular files to work.  Packages built with 0.61.10 or later
    that have non-regular files with non-root user or group will not
    be readable by Conary versions 0.61.9 or earlier.
  * Shadowing now preserves the byDefault flag, and handles reshadowing
    collections gracefully now
  * Update preprocessing now works on absolute changesets instead of
    relative ones, providing massive cleanups. Code uses sets of jobs
    instead of changesets for job representation, allowing still more
    cleanups. Many bugs seem to have gone away.

Changes in 0.61.9:
  * Fix a bug added in 0.61.8 that breaks tag handlers

Changes in 0.61.8:
  * Fix a bug introduced in 0.61.7 that occurred when, in the repository,
    either the Users table or Groups table was empty when creating a new group.
  * Add --buildreqs, --flavors options to q and rq.
  * Primary troves should not have their trove change sets overridden by
    items recursively included (and fixed a pile of things this broke).
  * Locally stored change sets can't always get access to pristine files
    from the local filesystem; when it can't, make sure file sha1 checking
    doesn't get upset.
  * Unchanged troves in updated groups could be erased by items in the
    same group on a different branch.
  * The "conary q[uery]" command accepts a --diff option.  When --diff
    is used, the difference between installed and pristine troves is
    displayed.
  * An additional progress callback has been added to show when database
    transactions are committed

Changes in 0.61.7:
  * Several bugs related to updating two troves with the same name have been
    fixed - including branch affinity, flavor affinity, correct handling of
    already updated troves, and correct handling of empty flavors.
  * "conary emerge" as root (or as a user than can apply the changeset
    produced by the build) did not install anything but the toplevel
    package.  This bug has been fixed.
  * No longer hide descriptive TroveNotFound errors behind a generic
    NoNewTroves wrapper.
  * Group recipes can now request that dependencies be resolved and
    added to the group at cook time.  To automatically add required
    troves to a group add "autoResolve = True" to the recipe class.
    Optionally "autoResolveLabelPath" can be set to a list of labels
    to use during dependency resolution.
  * Locally stored rollbacks couldn't handle files changing types. As
    part of the fix, the generic file diff code is now used when creating
    changesets instead of having a special-case wrapper around it
    (fileChangeSet()).
  * The commitaction script and the changemail module did not necessarily
    show the full trailing version for branches and shadows.  (For example,
    /conary.rpath.com@rpl:devel/4.1.25-18/db41/19 showed up as "19"
    instead of "4.1.25-19".)
  * Add a --deps option for conary q.  Make that and conary rq --deps
    recurse over collections.
  * Warn about missing buildRequires entries both for soname dependencies
    and for TagSpecs applied via tag description files.
  * A bug in updating groups that switch the byDefault setting of troves
    has been fixed.
  * Add an updateThreshold config option to control the number of troves to
    include in a download.
  * Ordering didn't work for old packages depending on anything, or for
    dependencies whose provider moved between components.
  * The r.Ownership(), r.UtilizeUser(), and r.UtilizeGroup() now generate
    appropriate dependencies on info-* packages.
  * Updating packages and components installed multiple times could cause
    a component to be removed multiple times (which resulted in a traceback).
  * Fixed a bug that occurred when groups tied to a user were deleted
    without deleting the associated user, then subsequently adding a user
    with the same name.

Changes in 0.61.6:
  * InitialContents turns off EtcConfig, since a file cannot be both
    a config file and an InitialContents file.
  * Reworked repository change sets to directly reference files from the
    contents store.
  * The User() command now takes an optional supplemental= option,
    which provides a list of supplemental groups to which to add
    the user.  (SupplementalGroup() is for groups not associated
    with a user.)
  * The showcs command can now handle components that are referenced
    but not included in a changeset.
  * InfoUserRecipe and InfoGroupRecipe can now be built with buildlogging
    turned on.
  * Conary's internal handling for dyanamically finding new IDs for
    users and groups has been fixed.
  * "conary updateall" now accepts the --test flag.
  * Various fixes were made to the CIL dependency detection code.

Changes in 0.61.5:
  * Added basic clone capability (which only works cloning to parents
    branches and shadows, and on a single host).
  * Now handles degenerate case of packaging unreadable files.
  * A bug that caused conary to ask for the wrong fileId when constructing
    a changeset from multiple repositores has been fixed.
  * Conary now can add users and groups automatically at install time.  If
    there is no taghandler to add a user or a group, conary will add it
    internally as a bootstrapping measure; if there is a taghandler,
    conary will call that instead.  In order to ease transition, Conary
    does not yet create the dependencies on the info- packages; a future
    version of Conary will add those dependencies after the system user
    info- packages have been created.
  * rpm2cpio now handles rpm archives that use bzip2 to compress the
    cpio payload
  * Conary now creates dependencies (provides and requires) for CIL
    files, if mono's monodis is installed on the system or being built
    in the current package.
  * Troves moving between troves could cause conary to attempt double
    erasures
  * The networked repository handles cases where contents are not
    found in the contents store.  The exception is passed back to
    the client.
  * The networked repository handles cases where a file stream is not
    found when the client asks for file contents.  The exception is
    passwd back to the client.
  * An error that caused getPackageBranchPathIds() to return the
    oldest fileIds instead of the youngest fileIds has been corrected.
  * Reworked finding old versions of troves to avoid a single trove
    being removed multiple times

Changes in 0.61.4:
  * %(datadir)s/.../lib/ files will no longer show up in :lib - presumption
    being that anything under %(datadir)s really is arch independenct
  * Creating branches and shadows had a command line parsing bug
  * "cvc newpkg" takes --dir and now complains for unexpected arguments
    (which is used to just ignore)
  * when using flavor affinity for installed troves, merge subarchitecture
    flags
  * group handling didn't always preserve troves which were needed by a
    newly installed trove properly

Changes in 0.61.3:
  * Corrected a bug that snuck in 0.61.2 that caused a temporary SQL table
    to not be temporary, which makes multiple httpd processes fail with
    'database schema changed' errors.

Changes in 0.61.2:
  * Fix a bunch of typos in the authentication checking server side
  * Add permission editing capabilities to the server component and hooks
    in the netclient
  * Overhaul of ACL system so that uniqueness constraints on Troves and
    Labels can be enforced: we now use a special Trove and Label "0 | ALL"
    instead of Null
  * Dependency resolution enforces label ACLs.
  * Module arguments to commitaction are parsed according to shell
    quoting rules.
  * The changemail commitaction module now takes an optional '--from'
    argument.
  * added clearBuildReqs() - will clear all or some of superclass buildreqs
    when cooking.
  * The pickled version of Dependency objects changed, therefore the
    schema version of the changeset cache has been incremented.
  * When Configure() detects a failure and input or output is not a
    tty, all config.log files will be included in the output in order
    to ease debugging from captured log files.
  * Part of the infrastructure for adding users and groups has been added:
    it is possible to create info-<name>:{user,group} packages via
    UserInfoRecipe and GroupInfoRecipe classes.  The User(), Group(),
    and SupplementalGroup() policies are deprecated; those lines should
    move to their own recipes intact (the syntax remains the same).
    The install-time code does not yet install info-* packages first in
    their own transaction; when it does, the Ownership(), UtilizeUser(),
    and UtilizeGroup() policies will create dependencies on the
    appropriate info-* packages.
  * The networked repository server and client code has been changed
    to use the 'deflate' Content-encoding type instead of 'zlib',
    which makes the code RFC 2616 (HTTP 1.1) compliant.
  * A new function called hasUnresolvedSymbols() has been added to the
    elf module.  This could be useful for a contributor to implement a
    policy that checks to make sure that shared libraries do not have
    unresolved symbols.  Additional code could be written to check
    binaries too.
  * cvc checkout, update, and commit now show progress when communicating
    with the repository server
  * Progress is now displayed while downloading file contents from a
    repository (such as when assembling a changeset that is distributed
    across multiple repositories)

Changes in 0.61.1:
  * Cleaned up error message which results from Conary not being able to
    determine which trove to remove when a new one is installed
  * Dependency object use slots
  * Hash values for DependencySet, Version, and Branch objects are cached
  * UIDs and GIDs that cannot be mapped to symbolic names no
    longer cause the buildpackage code to traceback.  The ownerships
    from the filesystem were never used anyway, so it's safe to assume
    that all files are owned by root:root
  * Implemented proper updateall
  * Files in troves are downloadable from the repository browser.
  * Troves in the repository browser are separated by first letter
    instead of showing all troves in one page.

Changes in 0.61.0:
  * New functionality for maintaining user groups: renaming and updating
    members
  * Added repository interfaces for deleting users and groups
  * Added a repository iterator function to list the members of a group
  * The web interface to the Conary repository now has a repository
    contents browser, accessible either from the main page (if you are
    logged into the web interface), or from the /browse url. Example:
        http://conary.example.com/conary/browse
  * A bug preventing all access to the web interface if an anonymous
    user existed has been fixed.
  * "Large" updates are split into multiple pieces which are downloaded
     and installed independently of one another
  * Trove updates are tracked through collections
  * Group handling completely rewritten to function as a three way merge
    instead of a set of heuristics
  * Trove removal handles references troves which are referenced by multiple
    collections
  * Rollback format unified for local and nonlocal rollbacks
  * Dependency ordering forces collections to be installed after all of their
    referenced troves (allowing simple restarts)
  * Database migration removes stale versions
  * --replace-files marks the replaced versions of the files as no longer
    present
  * Troves store information about Install Buckets - not used yet.
    By specifying a component's install bin, which is a set of key-value
    pairs, you can describe whether two versions of a component are
    installable side-by-side.  If two versions of the component share the
    same keys for their install bins, but at least one different value, then
    the components are installable side-by-side.
  * Troves store information about troves loaded when building a recipe
  * Build Requirements are stored with the trove
  * Add isCollection() to TroveInfo
  * Changesets download while instals are going on
  * StreamSet.twm() respects ignoreUnknown now
  * Rollbacks of locally cooked and emerged troves works

Changes in 0.60.12:
  * Previously, if you ran "conary update foo", and foo requires a new
    version of bar, but updating to the new version of bar would break
    existing dependencies of other troves on the system, a very
    unuseful "Troves being removed create unresolved dependencies"
    message would be printed.  Conary now says that "Additional troves
    are needed" instead.  If --resolve is used, it will report the
    troves that have been added before displaying the dependency
    failures caused by erase.
  * Symlinks no longer confuse AutoDoc policy.
  * Autosource files which have changed confused cvc update
  * allow a \ at the end of a line in config files to do line continuations
  * several bugs in the multitag handler have been fixed

Changes in 0.60.11:
  * The '-f' flag was added to the arguments to gzip when
    recompressing compressed files
  * Added progress callbacks for uploading the changeset when cooking
  * Improved automatic mainDir detection for some corner cases.
  * Put development docs back in :devel component (they were
    inadvertantly removed from it by a previous fix).

Changes in 0.60.10:
  * BadFilenames policy absolutely prohibits filenames with newlines
    in them, no exceptions allowed.  Other similarly bad filenames may
    later be forbidden by this policy.
  * UTF8Filenames moved to packagepolicy, where it belongs, and it now
    raises an error instead of printing a warning.
  * Conary now enforces the rule that tag names must have no whitespace
    and must be all alphanumeric characters, -, or _.
  * Conary can now run a single instance of a single tag handler to
    process multiple tags.  The tag description files for each tag
    must point to the same tag handler, and must each specify the
    multitag datasource.  The data is passed to the tag handler on
    standard input using the protocol "tag list for file1\nfile1\n..."
  * Fixed ftp server busy detection when fetching files via URL.

Changes in 0.60.9:
  * The changemail script is replaced by a generic commitaction script
    that loads modules, and a changemail.py module is supplied.  There is
    a backward-compatible changemail script which calls commitaction
    with the changemail.py module.  --email and --*user options now are
    changemail module options, so the commitAction should be specified
    something like this:
    commitAction /.../conary/commitaction --repmap ... --module "/.../conary/changemail --user %(user)s --email foo@example.com --email bar@example.com"
    You can add your own modules and run them all from the same commitaction
    using multiple --module arguments to the commitaction script.
  * Conary can now almost always guess the correct name for the mainDir
    when it is not %(name)s-%(version)s, if the first addArchive()
    instance creates exactly one top-level subdirectory and no other
    top-level files of any sort, in which case it will use that name as
    the mainDir.

Changes in 0.60.8:
  * The changemail script is now actually packaged, in
    /usr/lib{,64}/python2.4/site-packages/conary/changemail
  * Build requirements for superclasses are automatically added to
    subclasses.
  * Build requirements now look at all labels in a version to see if they
    satisfy a build requirement.
  * The NormalizeManPages policy now automatically converts man pages
    encoded in iso-8859-1 to man pages encoded in utf-8.  Additionally,
    it runs faster and no longer calls sed.

Changes in 0.60.7:
  * The changemail script is now distributed with conary, and is called
    with a different calling convention; instead of being called once
    per trove with trove-specific command line options, it is called
    once per commit (of however many troves) and creates more readable
    summary email messages.  Remove --trove, --version, and --flavor
    arguments from your changemail invocations.  Added --user argument
    to changemail; specify in .cnr files as "--user %(user)s".  Or, to
    only print users for source or binary commits, use "--sourceuser
    %(user)s" or "--binaryuser %(user)s", respectively.
  * The cvc rdiff command now recognizes creating a shadow as such.
  * Build requirement tracking is now half-enabled; conary is now able
    to read "buildReqs" tags, but will not yet generate them.
  * Files in /tmp and /var/tmp, and all cvs temporary files, will no
    longer be packaged by default,
  * The addArchive(), addSource(), and addPatch() actions can now fetch
    via HTTPS as well as HTTP and FTP.
  * The repository now handles creating a changeset between two troves
    that both contain a version of a file that is stored on a different
    repository

Changes in 0.60.6:
  * Erasing emerged troves works properly
  * Calling Doc() no longer disables the AutoDoc() policy.
  * A more reliable method is used for finding the port of an
    Apache connection

Changes in 0.60.5:
  * 'conary emerge' works again
  * Distributed group changesets failed when remote troves disappeared
    from the group
  * build logs are now tagged with 'buildlog' tag
  * Conary now handles cases when a directory becomes a symlink when
    applying a changeset.  An error message is displayed which tells the
    user how to apply the update.

Changes in 0.60.4:
  * An error in the automatic database conversion of 0.60.2 systems
    has been corrected.

Changes in 0.60.3:
  * Reimplemented LargeStreamSet in C
  * Added StreamCollection
  * Policies now announce their names in their information, warning,
    debug, and error messages, making it easier to determine how to
    resolve problems.
  * The database conversion for to 0.60.2 didn't work well; a proper
    conversion is now in place

Changes in 0.60.2:
  * Added InitialContent flag
  * Fixed bug which caused servers to leak file descriptors when the sqldb
    was replaced
  * "repquery --deps" output fixed (broken in 0.60.1)
  * Added AutoDoc policy which finds common documentation files and puts
    them in %(thisdocdir)s automatically.
    AutoDoc is disabled by calling
    Doc without calling AutoDoc, which means that existing recipes that
    call Doc will not show changes.
  * getPackageBranchPathIds() now returns version and fileId as well,
    so that the IdGen class can determine if an older version number
    should be assigned to files.  getPackageBranchPathIds() is now the
    primary mechanism for populating the pathId dictionary.
  * The local label methods of the version object have been
    refactored. isLocal() is now onLocalLabel(), isEmerge() is now
    onEmergeLabel(), etc. isOnLocalHost() has been added as a method
    to easily determine if a version only exists in the database
  * Moved logic for explicitly creating a changeset from cscmd.py to the
    ConaryClient object
  * Added the (unused) ability to lock and unlock troves. Ignore this for now.
  * "query --info" behaves much more like "repquery --info" now
  * isSourceVersion() method has been to the Version object
  * most of the remaining erroneous references to "Package" have been
    changed to "Trove" throughout the code.  This includes method
    names such as getPrimaryPackageList() -> getPrimaryTroveList().  Some
    more commonly used methods were left as deprecated thunking methods
  * dependency resolution couldn't resolve a requirement w/o flags against
    a provides w/ flags

Changes in 0.60.1:
  * Support for legacy clients (protocol version 29) has been removed from
    the server
  * The server raises an server-side exception if any client with
    protocol less than 32
  * Updated the URL provided in a server-side client version mismatch
    exception
  * Server-side dependency suggestions return more choices, leaving it
    to the client to sort it all out
  * Client uses timestamps to determine which troves to install when their
    flavors score equally
  * Fixed build-side bug handling meta characters ([,*,etc) in file names
  * "cvc newpkg" now accepts pkgname=label syntax
  * files.contentsChanged() function updated to work with StreamSets
  * Basic local changeset creation, retargeting, and commits work
  * Permissions weren't merged for operations run as non-root users
  * The structure of the repository web interface has been redesigned
    and some authentication UI bugs have been fixed.
  * The repository web interface now requires the conary-web-common package
    to be installed.
  * Committing troves to the repository no longer recompresses non-config
    files
  * Timestamps are set on the server at commit time; the timestamps the
    client assigned is not used (this is to protect against clients with
    a bad idea of time; servers should be consistent, even if they're
    wrong, and as long as time doesn't go backwards on that server all is
    good)
  * Reworked troves to be representable as streams and implement *basic*
    signature capability
  * Local cook versions are now more sensible.

Changes in 0.60.0:
  * Changed changesets to compress individual files instead of the combined
    stream.
  * Cleaned up file content objects to no longer track file sizes.
  * Switched away from TupleStream to StreamSet both for better performance
    and for improved flexibility in the format (at the price of larger
    frozen streams).
  * Troves explicitly provide their own names.
  * Troves can now provide "capability flags", and trove requirements
    can now include references to the capability flags.
    r.ComponentProvides(('ASDF', 'FDSA')) will cause all components built
    from the current recipe to provide the 'ASDF' and 'FDSA' capability
    flags, and r.Requires('/path/to/file', 'foo:runtime(ASDF FDSA)')
    will make /path/to/file require the foo:runtime component built
    with the ASDF and FDSA capability flags.
  * Dependency components can contain : characters now.

Changes in 0.50.14:
  * Dependency checking now returns reordering information (which isn't
    used yet)
  * Allow groups to include other groups defined in the same recipe (but
    explicitly disallow cycles in groups)
  * Fixed bug in building multiple groups with a single recipe when some
    of the groups already exist, but others don't

Changes in 0.50.13:
  * Added automatic :data component for /usr/share, to which you should
    add any platform-independent files that are needed by :lib components
    but not in a libdir-derived path.  These might include configuration
    files and supporting data files needed by both library and runtime
    programs.
  * Added automatic intra-package inter-component dependencies; now within
    a single package, the :devel component will automatically require the
    :lib component if both components exist.  These dependency sets can be
    modified with the ComponentRequires policy.
  * The build/buildpackage.py file has variable and function names changed
    to better match our terminology for packages and components.
  * Change flavor specified in the conaryrc to a flavor path -- accept the
    flavor config parameter multiple times to create a flavor path
  * Added a "filewrap" argument to r.Run() that inserts an LD_PRELOAD
    wrapper that overrides some library funtions to look in %(destdir)s
    first before looking in the filesystem.  This is subject to change
    as we experiment with it!

Changes in 0.50.12:
  * Implemented --quiet for conary update changeset commands, and cvc cook.
    Also implemented the 'quiet' configuration value. This option suppresses
    progress indicators.
  * Split loadRecipe into loadInstalled and loadSuperClass, depending on the
    purpose of the recipe loading.  loadInstalled will examine the local
    system to look for a matching installed trove, and load that version,
    while loadSuperClass will not.
  * Logs of builds are now stored in cooked changesets in the :debuginfo
    component -- generally in
    /usr/src/debug/buildlogs/<name>-<version>-log.bz2, controlled by
    macros.buildlogpath
  * Added lib/logger.py
  * Fixed conarybugz.py to work with Conary's new site-packages location
  * Cleaned up yuck, rpm2cpio, and rpm2ccs scripts to use new "import conary"
    mechanism for finding conary.
  * Check sha1s for all files written into the repository or file system
  * conary scs --deps works again

Changes in 0.50.11:
  * Reworked file addition to local database a bit for better performance
  * Fixed sorting for --info
  * Don't make --info installs require a writeable database
  * Added an exception to group updating, restricting removal of existing
    troves to match the group's contents to troves on the same branch
  * Groups which had the same trove added (via a referenced trove) and
    removed (from the primary trove) got confused
  * conary showcs now takes trove version
  * conary showcs will display erased troves in changesets, and erased troves
    that are referenced but not within the changeset
  * conary changeset now support trove=<version>-- to create a changeset that
    erases the trove
  * Cache user id to name mapping
  * Improved the progress indicators for preparingUpdate and
    creatingDatabaseTransaction
  * Implemented progress indicator on source downloads
  * Fixed bug in update process which caused files to be incorrectly skipped

Changes in 0.50.10:
  * Added callback for creating database transaction, so that it does
    not look like we spend an inordinate amount of time executing tag
    pre scripts.
  * Added findtrove.py to the Makefile so that it is included in
    the distributed version of conary.
  * Added distcheck rule to Makefile to try and avoid missing files in the
    future

Changes in 0.50.9:
  * reimplemented StreamSet in C
  * moved findTroves out to findtrove.py, reworked it to be more modular
  * getSourceVersion now correctly handles branched binaries by looking
    up the branch to find the source component.
  * reimplemented StringStream in C
  * fixed bugs in --info

Changes in 0.50.8:
  * sort update --info alphabetically, display old versions, and display
    a letter summarizing the type of change
  * NormalizeInterpreterPaths() policy now looks in the package currently
    being built, as well as on the installed system, to determine how to
    resolve #!/usr/bin/env scripts.
  * groupName argument to addTrove() can now be a list of group names as
    well as a single group name.
  * --no-recurse works on the erase path
  * fix to walkTroveSet (which was horribly broken)
  * enable (optional) dependency checking when building groups
  * 'cvc cook' error output when there are unresolved build
    requirements is more user friendly
  * filesystem conflicts are handled properly when applying a rollback
  * updating a package to a version that comes from a different
    repository when that package had an uninstalled component works
    now.
  * conary now resides in /usr/$LIB/python$PYVERSION/site-packages/conary/
  * calling r.Replace on a non-regular file results in a warning instead
    of an unhandled exception
  * implemented basic callbacks for update, erase, and changesets

Changes in 0.50.7:
  * Added the XInetdService action to avoid having to include
    /etc/xinetd.d/ files separately, and to make xinetd.d files
    be consistent, making recipe-provided changes less likely to
    conflict with local configuration changes.
  * groups are no longer allowed to contain redirects
  * added setLabelPath to group recipe
  * Allow r.Provides("soname: libfoo.so(FLAGS)", "/some/file") (added
    the "(FLAGS)" part).
  * don't allow spaces and commas in revisions

Changes in 0.50.6:
  * conaryclient.updateChangeSet should have recursed by default
  * Metadata retrieval now works along distributed branches and shadows.
  * reworked troves being added to database to handle missing parts
    of packages and groups properly (and make things faster and more
    elegant)
  * merged update and erase code paths in conaryclient
  * update and erase now take +,- modifiers on trove names
  * added --info to see what an update or erase command will do
  * a single group recipe can now build multiple groups

Changes in 0.50.5:
  * Streams return their value through __call__ instead of value()
  * Reimplemented ShortStream and IntStream in C
  * conary config now takes --show-passwords option, and does not pretty
    print config file values when not printing to screen.  This means that
    conary config > <file> will result in a valid configuration file.
  * Updating groups didn't work when the group referenced troves as new
    which were already installed on the system
  * r.ComponentSpec('somecomponent', '.*') will no longer override the
    file specifications for packaging :debuginfo and :test components.
  * loadRecipe now takes a troveSpec as its first parameter, and uses that
    troveSpec to find the trove on the local system that matches the source
    component that is being loaded.  loadRecipe also automatically searches
    the labels that are parents of the current recipe, so if you shadow a
    recipe, any loadRecipe lines contained in that recipe should still do
    what you want.
  * merge didn't handle files converging
  * merge doesn't need to deal with autosource files
  * diffs between groups failed when members disappeared

Changes in 0.50.4:
  * Most rollback information is stored as a reference to a repository
    instead of storing full rollback data on the local system. The
    localRollbacks flag in conaryrc allows the old behavior to remain.
  * The CONARY state after a merge operation on a shadow now has the
    correct fileId for files that are not different than the parent
    version.
  * Added /usr/lib/conary/conarybugz.py to make it easy to automatically
    populate bugzilla databases from repositories.
  * Sped up Strip, NormalizeInitscriptLocation, NormalizePamConfig,
    TagDescription, and TagHandler policies by limiting them to
    only appropriate directories.
  * Fixed :debuginfo to work with binaries built from more than one
    source file, and made it less aggressive by only stripping debug
    information out to the :debuginfo files, which both makes stack
    traces better without :debuginfo installed and makes libraries
    stripped for :debuginfo more likely to work.
  * When existing fileId's had no streams but the streams are provided
    by a later commit, those streams weren't always merged properly if
    there were multiple files for that fileId
  * conary config output masks user/password info in repository maps
  * the config option useDir has been changed to useDirs, and archDir has been
    changed to archDirs, to allow for tiered use/arch flag definitions, and
    the tweaking of use and arch flag settings.  By default, useDirs and
    archDirs look in /etc/conary/<dir>, followed by /etc/conary/distro/<dir>,
    follwed by ~/.conary/<dir>, where dir is use or arch, depending on the
    context.
  * Arch files can now contain arbitrary macro definitions, and in the future
    will contain values for macros like %(lib)s, which is lib64
    on some platforms.
  * when using --keep-existing, the install label path and install flavor
    are used to determine which version to install instead of using affinity
    to install something close to what you already have.
  * a bug that prevented a changeset from applying to the system when
    the changeset removed a component from a package and the component
    is not installed on the system has been fixed.

Changes in 0.50.3:
  * database findTrove now has an interface that is much closer to the
    repository findTrove function -- this enables conary q to work like
    conary rq.
  * Group handling didn't work for multiple levels of group inclusion.
  * Database.hasTrove() no longer needs to instantiate troves.
  * Fixed overly-aggressive cleaning of the cache.
  * Added repository findTroves call to parallelize findTrove calls.
  * Added the NonMultilibDirectories policy to prevent 32-bit troves from
    utilizing lib64 directories.
  * the NormalizeInterpreterPath policy can now handle unwriteable files
  * fixed the network client code to return file contents properly when
    multiple file contents are requested from the server (bz#50)
  * rewrote Database.getTroveLatestVersion()
  * Added :debuginfo handling in Strip policy, which requires debugging
    to be turned on in optflags and elfutils's eu-strip and debugedit to
    be installed.  Like :test components, :debuginfo components are not
    installed by default.
  * File versions are now properly set to a branched version after a
    merge operation
  * cvc commit aborts again when the current versions of files are not
    the latest versions

Changes in 0.50.2:
  * Any %(lib)s-derived path (/%(lib)s, %(libdir)s, %(krbprefix)s/%(lib)s,
    or %(x11prefix)s/%(lib)s) will now cause the entire package and all
    components to be flavored with the base instruction set flavor, so
    that architecture-sensitive but non-code files in (say) /usr/lib64
    do not show up on 32-bit platforms.
  * Sped up dependency resolution on the client
  * The reworked getFileContents call now asks for contents from the
    correct server when contents from more than one server are requested

Changes in 0.50.1:
  * Add support for trove=<troveVersion> in rq, cvc co, and other places that
    use findTrove
  * Add conary q --info option to display flavors
  * changeset command uses system flavor if no flavor is specified, skips
    troves which are not included in packages and groups by default,
    takes a --no-recurse option, and filters based on the excludeTroves
    configuration setting
  * Added automatic :perl component that works like the :python component,
    and extended the multilib-friendly-or-architecture-neutral policy to
    work with perl as well as python.
  * client/server protocol negotiation is a whole lot smarter now
  * getChangeSet() results in a single URL rather than one per primary trove
  * group, fileset, and redirect recipes have macros that contain the
    buildlabel and buildbranch.
  * fixed a bug with merging absolute change sets which contain config files
  * redirections to troves w/ older versions already installed didn't work
  * the pathId generation code has changed.  For cooked troves, the
    pathId will be the same for any particular version of a path.
    Code must not depend on this behavior, however; it may change in the
    future.

Changes in 0.50.0:
  * Redirections work
  * Sped up group generation
  * Troves which reference other troves (groups and packages) can now specify
    whether a trove is installed by default or not. Packages now reference
    :test, but don't install it by default
  * Added optional 'recurse' parameter to netclient.createChangeSetFile
  * The first argument to the Requires and TagSpec commands can now have
    macros interpolated, as in r.Requires('%(bindir)s/foo', ...)
  * Groups can have requirements now
  * protocol-level getFileContents works on multiple files simultaneously
  * repository log had too many files added to it
  * set instruction set flavor for a cooked trove whenever any Arch flags are
    checked

Changes in 0.14.12:
  * The shadow command looks at buildLabel instead of following
    installLabelPath
  * In some cases, troves with an incompatible flavor were chosen when
    --resolve was used. The proper flavor is now used, or the
    dependency is reported as unsatisfiable.
  * Several more instances of %(lib)s were moved out of the default
    specification for generic components like :runtime and :devel for
    better multilib support.
  * Policy now helps ensure that :python components are either
    architecture-neutral or multilib-friendly.
  * Better error messages for "%(foo)/" (which should be "%(foo)s/")
  * Looking up files in the local database gave erroneous results in
    some cases (this was noticeably primarily when distributed change
    sets were being generated)

Changes in 0.14.11:
  * Local systems store config files in sql tables now.  Use
    /usr/share/conary/convertcontents to convert to the new data store.
    Note that this means that any *config file* managed by conary can be
    read through the main SQL database file in /var/lib/conarydb/conarydb.
  * Actually check build requirements before building, use --no-deps to
    ignore the check.
  * make conary q and conary update convert all flavors to  strong flavors
    for comparison; ~readline becomes readline, and ~!readline becomes
    !readline, so that conary q foo[readline] works as expected.
  * no default flavor is presumed for local operations (erase, q)
  * changed getPackageBranchPathIds to base64 encode the filename in
    order to ensure that the resulting XML-RPC will be UTF-8 clean.
  * localoutofdate renamed to "yuck", a man page added, and the script
    and man page are now installed on the system.
  * rename --use-macro and --use-flavor options for cook to --macro
    and --flavor
  * support new cook syntax: cvc cook <trove>[flavor] to set the troves flavor
    while cooking
  * fixed rq output when iterating over subtroves within a trove or group
  * TroveNotFound exceptions are handled gracefully in cvc.  'conary cook
    foo' will no longer traceback when foo:souce could not be found in
    the repository.
  * Unsynchronized updates work for packages and groups
  * The database is now opened with a 30 second timeout.  This should allow
    better concurrency.
  * added --exclude-troves and excludeTroves conaryrc entry
  * repository .cnr file's commitAction configuration item now has a
    flavor provided to it as %(flavor)s and the default changemail
    script uses it.
  * don't allow the same label to appear twice in sequence in a version

Changes in 0.14.10:
  * FlavorMap sense wasn't set right for base instruction set

Changes in 0.14.9:
  * Shadow Branch objects didn't return parent branches properly. This
    caused incorrect pathId's to show up on cook on shallow shadows.
  * Reworked the code which looks up pathIds to take advantage of a new
    server call (getPackageBranchPathIds) which is faster and looks on
    both the full branch and full parent branches.
  * The Apache repository server now allows mixed ssl and normal requests.
  * Added forceSSL option to apache repository server configuration.
  * The network client code now supports accessing servers over https.
  * Proper salts are used for user passwords.
  * The default value for macros.optflags is "-O2" again, instead of
    an empty string.
  * The http handler in the conary server now sends back proper error
    codes in the case of an authentication error.

Changes in 0.14.8:
  * Fixed bug where streams for commits on distributed branches didn't always
    get set properly
  * reworked findTrove() in repository to return (name, version, flavor)
    tuples instead of full troves
  * Split conary.1 into conary.1 and cvc.1
  * Allow cvc cook trove=<version>
  * remove --target-branch cook option
  * added default :devellib component for architecture-specific devel bits,
    made all files with an architecture-specific multilib path that are
    not in :devellib go into :lib instead of having many of them fall into
    :runtime

Changes in 0.14.7:
  * ELF libraries with sonames that have paths in them are now handled
    sanely, by removing the path (and complaining...)
  * split march into targetArch and unameArch -- requires a new distro-release
  * rework command line arguments to shadow and branch to match how versions
    are normally specified, and allow a flavor specificatoin
  * added --sources to branch and shadow commands

Changes in 0.14.6:
  * fix for generating changesets between repositories
  * policies that look at shared libraries are now multilib-aware,
    fixing shared library permissions and dependency provision
  * autosources didn't work when committing across a shadow

Changes in 0.14.5:
  * allow groups to contain troves with conflicting flavors
  * make repository-side change set caching less buggy
  * fix config files changing to symlinks
  * allow duplicate items to be specified for erase and update
  * changeset command allows flavors to be specified
  * repquery --info shows trove flavor
  * fixed bug with not matching base instruction set flavor

Changes in 0.14.4:
  * several bugs in the 'cvc update' code paths have been fixed
    - it no longer retrieves autosource sources
    - the CONARY file now gets populated entries for autosource files
    - the fileids in CONARY files are now correct after an update
  * several bugs in error handling have been fixed
  * several docstrings have been fixed
  * packagepolicy now automatically adds usermode:runtime requirement to files
    that are dangling symlinks to consolehelper
  * the templating engine for the web interface to the server has been
    changed to kid; kid and elementtree are now required to run a server.
  * the web interface now supports limited editing of ACLs
  * the server now only supports protocol version 26 (it was a mistake
    to leave in support for 24 and 25)
  * old code that supported ancient protocol versions has been
    removed from the server
  * recipes loaded from within recipes follow the label= argument if
    it is given

Changes in 0.14.3:
  * Fixed usage message to no longer print 1 at bottom; improved option
    handling error messages
  * Fixed versions when branching from a shadow
  * The lookaside cache now fetches from the repository into the right
    location and with the right permissions, and fetches manually-added
    as well as automatically-added sources.
  * In recipes, addSource can now take dest='/path/to/file'
  * Change %(servicedir)s location from /var to /srv

Changes in 0.14.2:
  * contents are now stored as diffs when either the new file or the
    old file is empty
  * diffs of numeric streams can now express a change to the value of
    None

Changes in 0.14.1:
  * fixed a typo in lookaside.py that prevented commits from working
  * added a descriptive exception message when fileids in your database
    do not match the fileids in the repository

Changes in 0.14.0
  * added ability for changesets to ignore unknown fields in some places
    (making changesets somewhat less brittle)
  * fixed bug in source handling with non-recipe files in the local directory
  * added framework for generic trove information
  * checkout no longer pulls all sources from the repository
  * used new trove info framework to store the source trove, build time,
    total file size, and version of conary used when building binary
    troves.
  * lib/elf.c no longer uses mmap to read elf files.  Some architectures
    may have elf structures on disk that are not naturally aligned, and
    using mmap to read them won't work.
  * the repository code now uses a 30 second timeout when attempting to
    access the database
  * Have architectures control their march values in the architecture
    config files.
  * add Arch.getCurrentArch() to get the major architecture that is in use
    during a build

Changes in 0.13.3
  * added ability for a contents log file (makes syncing much easier)
  * file tags weren't used on updates
  * "description update" tag action replaced with "handler update"
    (which gets called when either the tag description or the tag handler gets
    updated)
  * "description preremove" tag action replaced with "handler preremove"
  * sources get committed automatically

Changes in 0.13.2
  * reworked use.py code almost entirely.
  * added /etc/conary/arch directory to contain architecture definition files;
    changed /etc/conary/use files to contain more information about how
    flags are used when building.  Flag definitions are no longer in use.py.
  * fixed buildFlavor so that it affects cooking packages as well as
    determining troves to include when cooking a group
  * changed --noclean to --no-clean to be in line with the rest of the
    options; documented it
  * removed Use.foo and Flags.foo options from conary config files.  Macros.foo
    is still there.  Added --use-flavor option to cvc cook which takes a flavor
    and overrides the build flavor while cooking.
  * groups now take flavor strings to determine the flavor of a trove to
    include, not flag sets.
  * dependencies resolution is flavor sensitive now (and uses flavor
    affinity)
  * added trove version/release number to dependency messages
  * renamed classes and methods in versions.py to match current terminology

Changes in 0.13.1
  * repquery wasn't filtering by flavor properly (exposed by a bug fix
    in 0.13.0)

Changes in 0.13.0
  * removed importrpm.py
  * diffs between a file object that has a non-empty provides or requires
    to a file object that has an empty provides or requires are now properly
    generated and applied.
  * added checks to validate merged file objects against the fileIds
    in the changeset
  * implemented shadows
  * framework for redirects in place
  * removed (unused) parentId field from Branches repository table

Changes in 0.12.5
  * reworked dependency resolution a bit for a big speedup in the server
  * moved destdir to %(builddir)s/_ROOT_
  * made macros.destdir available during the unpacking of sources
  * source commands (r.addAction, etc.), if given absolute paths for
    their dir keywords, will perform their actions in the destdir instead
    of the builddir
  * most build commands (r.Make, r.Create, etc.), will work in either builddir
    or destdir, depending on whether they are given relative or absolute
    paths
  * add dir keyword for r.Run
  * include /usr/bin/rpm2cpio

Changes in 0.12.4
  * set more arch flags for x86 and x86_64
  * troves can have multiple instruction set flavors now
  * flipped around use: and is: sections of flavor strings
  * Version and Branch object completely separated

Changes in 0.12.3
  * conary verify updated to new API so that it works again
  * conary q (with no arguments) works again

Changes in 0.12.2
  * added getTroveVersionsByBranch
  * make better use of _mergeQueryResults
  * moved version affinity into findTrove from ConaryClient
  * fixed branch affinity so that it's actually branch affinity instead of
    label affinity
  * rdiff changes for 0.12.0 broke negative numbers for oldVersion
  * rdiff diff'd based on label instead of branch
  * update has flavor affinity now
  * flavors can now be specified on the command line for update, erase
    repquery, and query
  * unspecified flavor flags got scores of zero, which was wrong
  * added python code for flavor scoring (useful for the client)
  * repository queries didn't work properly when looking for multiple flavors
    of a single version
  * fix for updating multiple flavors of a single version of a trove
    simultaneously
  * reworked getTroveVersionList and getAllTroveVersions for per-trove
    flavor filtering

Changes in 0.12.1
  * repquery and query always showed dependency information
  * getTroveLeavesByBranch did extra demarshalling of the flavor
  * repquery didn't deal with nonexistant troves well
  * dependency failures on erase didn't reassemble dependency flags properly
  * fixed bug in dependency sets creation which caused dependency flags
    to get mangled
  * added a check to prevent mangled flags from getting committed

Changes in 0.12.0
  * document config command, and display supplied macro/use/arch information
    in output
  * repository acl's work for almost everything
  * anonymous access must be explicitly enabled by creating an acl for
    user 'anonymous' with password 'anonymous'
  * server side flavor scoring used
  * queries reworked for flavor matching

Changes in 0.11.10.1
  * move to python2.4
  * repository caching (which isn't used yet) didn't track the recurse flag

Changes in 0.11.10
  * changed flavor tracking when loadRecipe() is used to only track
    flavors in loaded recipes that are superclasses of the recipe
    class in the loading recipe.  (e.g. loading python.recipe to get
    the distribution python version will not add all of the python
    recipe's flavor information to the loading recipe class, as long
    as the loading recipe does not subclass the Python class.)
  * add conary verify command for comparing the local system's state to
    the state it was in at install time
  * when a trove is installed for the first time, it comes from a single
    repository
  * didn't handle file types changing on update
  * fixed problem assigning depNums
  * components disappearing from troves caused problems in relative changesets
  * files moving from removed troves in changesets caused update to fail

Changes in 0.11.9
  * change the order of permissions setting (chmod after chown)
    because some versions of the Linux kernel remove setuid/gid bits
    when setting ownership to root

Changes in 0.11.8
  * work around a python bug w/ fdopen() resetting file permissions
  * r.Replace() as an alternative to r.Run("sed -i '...' file")
  * Policy enforcing UTF-8 filenames
  * r.macros.tagdatadir as a standard place to put data just for taghandlers

Changes in 0.11.7
  * changed server.py to take extra config files via --config-file instead
    of as an extra argument
  * extra config files (specified with --config-file) were ignored if they
    didn't exist; issue an error message now
  * Added r.ConsoleHelper() for recipes
  * PAM configuration files shouldn't have paths to modules by default,
    so we remove what used to be the standard path
  * changed repository user authentication to use user groups (currently
    one per user)
  * added password salt
  * restructured repository a bit
  * removed lots of unused code from FilesystemRepository

Changes in 0.11.6
  * branches are created as changesets now instead of as a protocol call
  * merged authdb into primary repository
  * fix for rdiff (broken by flavor rework in 0.11.5)

Changes in 0.11.5
  * Internals reworked to eliminate flavor of None in favor of empty flavor
  * Added (currently unused) code to parse command line flavor specifications
  * static libraries (.a files) get proper flavors now
  * Handle attempts to update already installed troves from absolute
    change sets

Changes in 0.11.4
  * all components built from a single recipe share a common flavor
  * loadRecipe's label= keyword argument can actually take a label
    as well as a hostname

Changes in 0.11.3:
  * optimized a sqlite update statement to use indexed columns
  * added --test to update and erase
  * dependency check didn't handle new components providing the same
    items as old components (broken by 0.11.1 performance enhancements)

Changes in 0.11.2:
  * standalone server was broken by --add-user changes in 0.11.1
  * dependency check no longer allows packages being removed to cause
    dependency failures
  * changed how dependencies are frozen to make the order deterministic
    (so fileId's don't change around)
  * added a database version to the database schema

Changes in 0.11.1:
  * erasing troves enforces dependencies -- this requires a database
    conversion (run the conary-add-filedeps script which fixed the
    conversion to 0.11.0 after updating conary)
  * reworked dependency queries to take advantage of indices for much
    better performance
  * add --add-user to server.py for creating the authdb

Changes in 0.11.0:
  * massive rework of fileId mechanism to allow better flavor support
  * added columns to dependency tables to allow erase dependency checks
    (which are not yet implemented)
  * enabled trove requirements
  * added cvcdesc and the 'describe' command to cvc to generate
    and use metadata XML files.
  * getMetadata follows the branch structure up until it finds metadata
    for the trove.
  * changed getFileContents() to not need trove name or trove version
  * byte-compiled emacs lisp files are transient, like python
    byte-compiled files
  * addSource recipe action now can take a mode= keyword argument
  * cook now enforces having no dash characters in version numbers
  * files are explicitly disallowed from depending on groups, packages,
    or filesets; the only trove dependency that a file or component
    can have is on a component.  Only filesets can depend on filesets.

Changes in 0.10.11:
  * reworked how absolute change sets get converted to relative change
    sets for better efficiency
  * chained dependency resolution caused duplicate troves in the final
    changeset (and a lot of extra work)
  * added --config to stand alone repository
  * source flag wasn't set properly for newly added non-text files
  * flavor information is now printed by "conary query" when multiple
    flavors of the same version of a trove are installed
  * "conary repquery --all" flavor output formatting has been improved

Changes in 0.10.10:
  * changesets get downloaded into a single (meta) file instead of lots
    of separate files
  * fix several bugs in the freshmeat record parsing
  * add a freshmeat project page URL to the metadata by default
  * add a "source" item to metadata
  * the server implementation of troveNames() was horrible
  * enabled file dependencies

Changes in 0.10.9:
  * fixed some authorization issues with the xml-rpc repository interface
  * the web management interface for the repository works now; see
    http://wiki.specifix.com/ConaryConversion for information on how
    to convert existing authdb's to support this
  * fixed a bug with distributed branches
  * users can change their passwords through the repository's web api
  * improved logic apachehooks use to find top level URL
  * fixed bug in server side repository resolution

Changes in 0.10.8:
  * changed iterAllTroves() to troveNames(), which searches a single
    label instead of the whole repository
  * reworked http authentication and CGI request handling and added the
    beginning of a web interface to the repository for user administration
    and metadata management.

Changes in 0.10.7:
  * dependency sql code reworked to use temporary tables
  * new macro called "servicedir" that defines the location for
    service data (%(servicedir)s{ftp,http,etc})
  * added busy wait to sqlite3 python binding when executing SQL
    statements on a busy database

Changes in 0.10.6:
  * Lots of bug fixes for distributed branching
  * Some code rearrangement
  * The start of metadata support code is now included

Changes in 0.10.5:
  * The local database is used for fetching file information (but not
    contents), reducing network traffic when creating change sets
    across repositories.
  * Update works on troves which were locally cooked or emerged
  * Internal changes to move toward getFileContents() working in batches
    rather then on individual files. For now this prevents the repository
    from copying files between the content store and /tmp to serve them.
  * Arch flags are now included in flavors
  * Emerge follows the installLabelPath instead of the buildLabel
  * The extended debugger has been extensively modified
  * Conary can handle filenames with '%' in them
  * The showcs command has been significantly updated, and the updates
    are documented in the conary.1 manpage
  * New syntax for flags distinguishes requirements from "optimized for";
    see http://wiki.specifix.com/FlavorRankSpec

Changes in 0.10.4:
  * Bug fixes for updating from absolute change sets (which basically
    just didn't work for troves which contained config files)
  * Bug fixes for distributed branching
  * The database is used for fetching trove information (but not yet
    file information) when the client constructs change sets across
    distributed branches
  * various other bug fixes

Changes in 0.10.3:
  * this version introduces changes to the network protocol for
    obtaining file contents and changeset generation. The client
    protocol version number has increased, so version 0.10.3 can only
    communicate with servers running the server from 0.10.3. The
    server remains backward compatible with older clients.
  * a warning message is now displayed when the user attempts to
    create a branch that already exists on a trove.
  * the correct trove names are displayed when automatically resolving
    dependencies
  * packages no longer get the union of all the dependency information
    of the components they contain.  This information would have to be
    recalculated if a user installed a package then removed a
    component afterward.
  * a package policy check was added to reject any world-writable
    executable file.
  * r.TagSpec('tagname', exceptions='filter') now overrides a match by
    another r.TagSpec('tagname', 'filter')
  * more changes to metadata interface
  * various other bug fixes and improvements

Changes in 0.10.2:
  * the repository code is now included in the main conary source
    archive
  * "conary showchangeset" produces a more user-friendly output
  * large responses from the repository server are now compressed
  * the protocol for getFileContents() changed to take a fileId
    instead of the file's path.  The repository code can still handle
    old requests, but the client code now requires the latest
    repository code.
  * bug fixes

Changes in 0.10.1:
  * when applying a changeset, dependency failures are resolved by
    querying servers in the installLabelPath
  * troves that satisfy a dependency can automatically be added to a
    transaction.  This behavior is controlled by the "autoResolve"
    variable in conaryrc or the "--resolve" command line option to
    "conary update"
  * dependency resolution is calculated recursively.  To limit the
    recursion depth to check only first order dependencies, a
    "--no-deps-recurse" option has been added to "conary update"
  * "conary repquery" now takes a "--deps" argument, which prints the
    Requires and Provides information for the trove that is being
    queried.
  * changes have been made to the build side of Conary to facilitate
    building recipes that use cross compilers
  * symlinks now get the appropriate ownership set when they are
    restored
  * groups can now specify which flavor of a trove to include
  * repository queries that don't need file information no longer ask
    the repository for files.
  * various bug fixes and cleanups

Changes in 0.10.0:
  * dependency checking is now performed before changesets are
    applied.  This uses new tables in the local system's database.
    If you are using a database created by a version of Conary older
    than 0.10.0, it must be converted before it can be used.  See:
      http://wiki.specifix.com/ConaryConversion
    for details
  * Shared library dependency information in changesets is now stored
    in a different format.  This means that repositories that use old
    versions of Conary will be unable to give valid changesets to
    Conary 0.10.0 or later.  Therefore, the protocol version number has
    been increased.
  * --no-deps argument added
  * "cvc co" is now a synonym for "cvc checkout"

Changes in 0.9.6:
  * dependency enforcement infrastructure has been added (the code is
    currently disabled)
  * bug fixes
    * applying a changeset that un-hardlinks files now works
    * conary rq [trove] --info now works
    * running "conary update [trove]" when more than one flavor of
      [trove] exists no longer tracebacks.  It installs both flavors
      of the trove (which is not always the desired behavior - this
      will be addressed later)
    * only files with execute permissions are checked for
      #!interpreter.
    * "conary rq [trove] --ls" no longer tracebacks when [trove]
      exists in more than one repository
    * various code cleanups

Changes in 0.9.5:
  * new methods for specifying dependency information in recipes have
    been added
  * #! interpreters get added as dependencies
  * local flag overrides now work
  * cvc cook --resume can be used multiple times
  * conary invokes gpg with --no-options to avoid creating or using
    ~/.gnupg

Changes in 0.9.4:
  * fixes to cvc annotate
  * flavors and dependency generation code has been refactored to be
    policy based
  * better error handling when invalid changeset files are given to
    conary
  * minor code cleanups

Changes in 0.9.3:
  * New "cvc annotate" feature
  * Man page updates
  * Changesets which remove a file and replace it now apply correctly.
  * "cvc update" no longer complains and fails to update the CONARY
    state file properly  when ownerships differ
  * FileId generation now looks for previous versions of all the
    packages that have just been created, not just the name of the
    recipe.
  * Cooking as root is no longer allowed
  * Miscellaneous bug fixes.

Changes in 0.9.2:
 * Bug fixes:
   * Applying changesets that have more than one hard link groups
     sharing the same contents sha1 works now.
 * Build changes:
   * Recipes can now create new top level packages.

Changes in 0.9.1:
 * Bug fixes:
   * Applying a changeset that has a flavor which is a superset of the
     previous version's flavor now works.
   * Parsing optional arguments to command line parameters that appear as
     the last thing on the command line works
 * Build changes:
   * Package policy now checks to ensure that files in /etc/cron.*/*
     are executable
 * Update changes:
   * Conary no longer complains if a transient file has been modified
     on disk but no longer exists in a new version of a component.
 * Miscellaneous changes:
   * Version 1 on-disk changeset file support has been removed.

Changes in 0.9.0:
 * protocol versioning is much more granular now allowing for backwards
   compatible versions of functions
 * changeset command now generates changesets for multiple troves spread
   across multiple repositories
 * change sets are transferred as a set of independent change sets now
   (laying the groundwork for repository change set caching, with which
   this version will work just fine)

Changes in 0.8.3:
 * Man page updates.
 * The "conary query" command now accepts multiple arguments for
   troves and paths
 * Fixed "conary erase" command which was broken in 0.8.2

Changes in 0.8.2:
 * You can now install multiple troves at once (even a combination of
   changeset files and troves from repositories), and the entire
   action is recorded in a single rollback (this required a change in
   command-line arguments for updating troves).
 * The beginnings of support for searching multiple repositories
 * Miscellaneous code cleanup and bug fixes.

Changes in 0.8.1:
 * The source code has been re-arranged for easier maintenance, and
   conary has been split into two programs: conary and cvc.
 * Better error messages and debugging tracebacks

Changes in 0.8.0:
 * A new changeset format supports hard links but requires staged update.
 * The new changeset format also collapses duplicate contents even
   when hardlinks are not used.
 * By default, rc?.d/{K,S}* symlinks are no longer packaged. The
   chkconfig program is relied on to create them at package
   install/update time. Init scripts are explicitly required to
   support the chkconfig protocol by default
 * Improved error messages
 * Several bug fixes.

Changes in 0.7.7:
 * Extended debugger saves and emails
 * Tracebacks now include arguments and locals
 * More size optimizations were made when applying changesets
 * Applying absolute changesets when a trove is already installed is
   now much more efficient than it was
 * Self-referential symlinks raise a packaging exception.
 * Several bugs fixes.

Changes in 0.7.6:
 * Installation
   * Hardlink handling
   * enhanced debugging capabilities (including saving a debugging
     state file to enable remote debugging)

   * using binary file ids and iterators for significant memory savings
   * and runtime support for the x86.x86_64 sub-architecture
 * Cooking
   * more robust handling of the --resume option
   * policy normalization of where app-defaults files go.

Changes in 0.7.5:
 * Hard links are implemented (but not yet enabled, in order to
   preserve changeset compatibility for now).
 * Several bugs have been fixed for installing and cooking.

Changes in 0.7.4:
 * Fileids are now stored and transmitted in binary rather than
   encoded.
 * Better handling of multiple versions of packages/troves installed
   at the same time
 * Missing file handling improvements
 * Recipe inheritance is now possible between repositories
 * Enhanced Interrupted builds
 * The dynamic tag protocol was slightly modified
 * Added Arch.x86.amd64 and Arch.x86.em64t
 * several bugs fixes

Changes in 0.7.0:
 * sqlite3 is used for the database
 * better handling of multiple packages with the same name installed at once.

Changes in 0.6.6:
 * repository protocol update
 * changeset format update
 * added the ability to resume halted local builds
 * added the ability to easily package build-time tests to run at
   install time to qualify new/changed environments
 * better handling of packaged .pyc/.pyo files
 * better shared library handling
 * improved inline documentation
 * optimizations for both space and time
 * numerous bugfixes
