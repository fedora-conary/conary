.\" Copyright (c) 2004-2006 rPath, Inc.
.TH CONARY 1 "4 January 2006" "rPath, Inc."
.SH NAME
conary \- repository-based software configuration manager
.SH SYNOPSIS
.B conary \fIcommand \fR[\fI<args>\fR]
.SH DESCRIPTION
\fBConary\fR is a software configuration manager that uses distributed,
network-based, versioned repositories rather than disparate package
files as its canonical source of data.  Conary uses the repository
versioning to intelligently merge configuration files, file ownership
and permissions, and so forth.
.SH REFERENCE
Conary has several common command-line arguments, all of which modify 
configuration entries and are documented with other configuration
entries.  The rest of its command-line arguments are specific to
which conary \fBcommand\fP you are running, and are documented with
the commands. The \fIC\fPonary \fIv\fPersion \fIc\fPontrol program,
\fBcvc\fP, handles build and source management, and is documented in
cvc(1).
.SS "System Management"
There are essentially three modes of system management with Conary.
In the \fBmigrate\fP mode, the entire contents of a system are defined
by a single group, and the \fBconary migrate\fP command is used to
move from one system definition to a new system definition.
In the \fBupdateall\fP mode, the choice of what to update is based on
the current contents of the conary database.
In the \fBsystem model\fP mode, the choice of what to update, and
what is installed on the system, is based on a text file called
/etc/conary/system-model, which is modified by conary commands, but
can also be modified by an administrator.

The \fBsystem model\fP mode is intended to become the normal update
mode for Conary-based systems in the future.  It works by creating a
set of troves that define the system, and then moving the system to
that definition.  It is conceptually similar to building a group into
a repository and then migrating to that group.  Significant differences
include:
.IP -
In a group, all trove references are absolute, but in a model, you
can choose whether references are absolute.  Migrating to a specific
version of a group will always move the system to the exact set of
packages referenced, but re-applying a system model will update
troves that are not pinned down to a specific version.
.IP -
There is no group name for the set of troves.
.IP -
There is no version for the set of troves.  (The \fBversion\fP
operation in a system model does not provide conary versioning.)
.IP -
Path and version conflicts are not checked when assembling the set
of troves.  (No group policy is run at all.)  This means that path
and version conflicts will be found only while installing the packages.
.TP 0

A \fBsystem model\fP that installs only a single group will function
similar to \fBmigrate\fP mode.  The most obvious difference is that
\fBmigrate\fP mode honors variations in \fBbyDefault\fP settings in
the system database (that is, an optional component of the trove(s)
migrated to that has been installed on the system will still be
installed after the migrate operation finishes), wherease a
\fBsystem model\fP update honors those changes only if they are
represented in the model itself.

The following \fBcommands\fP are used to install, update, erase, and
otherwise manage software installed on a local system.
.TP 4
.B changeset <\fItrovename\fP[[=\fIoldver\fP\fI[<flavor>]\fP>]--[\fInewver\fP\fI[<flavor>]]\fP>]+ \fIoutfile\fP
Creates an absolute changeset for \fItrovename newver\fP, or a relative
changeset between \fItrovename oldver\fP and \fItrovename newver\fP, and stores
it in outfile.
Synonyms: \fBcs\fP
.RS 4
.TP
.B \-\-no-recurse
Don't recursively include troves referenced by the groups and packages
listed.  Normally referenced troves which do not match troves in the
\fBexcludeList\fR are included in the changeset.
.RE
.TP
.B commit \fIchangeset\fP [\-\-target-branch \fI<branch>\fP]
Commits a changeset to the repository.  This is not a reversible
operation, so take care.  The \fB\-\-target-branch\fP option
is only appropriate when you commit a \fBlocal changeset\fP
to a repository.  Note that changesets created by \fBcvc cook\fP cannot be
committed to a repository.
.TP
.B config  
Shows the configuration that conary will use for any 
subsequent commands executed, based on the configuration files it has 
loaded and the configuration-altering command-line options that were 
supplied.  See the \fIFILES\fP section of this manual for more information.
Arguments include
.RS 4
.TP 4
.B \-\-show-passwords
Normally, conary config will mask paswords in repository maps, to avoid their
accidental display.  You can override this masking with --show-passwords.
.TP 4
.B \-\-show-lines
Displays as comments the line number that each configuration item came
from.  If no line is given, then that item is the default.  If an
item is read in from multiple places, all places are mentioned, in the order
in which they are read in.
.RE
.TP
.B emerge \fI<file>\fP.recipe\fI|<component>[=<version>]...
Builds the recipe for the given recipe file or component (which it
finds by searching the \fIinstallLabelPath\fP if no version is
provided) onto the \fBlocalhost@local:EMERGE\fP branch and updates the
local system to the new build.
.TP
.B erase [+/-]\fItrovename\fP[=\fRversion][\fI<flavor>\fP]\fP+
Erase all instances of \fItrovename\fP (or only a specified \fIversion\fP)
from the local system. It has the same syntax as \fBupdate\fR, but trove
names which are not preceded by a plus or minus are removed instead of
updated.
.TP
.B localcommit
Applies a local changeset to the local system.  This is exactly
equivalent to making every change represented in the changeset
by hand on the local system, the locally-installed versions still
reference the repository as their source, future updates will still
come from the repository, and the changes represented in the local
changeset will be preserved as if they had been made by hand
locally.
.TP
.B localcs \fItrovename outfile\fP
Creates a local changeset, which represents the changes made on the
local system to \fItrovename\fP, relative to the package as it is
represented in the repository.
.TP
.B rblist
Lists available rollbacks.
.TP
.B remove \fIpath\fP
Remove the file named \fIpath\fP from the system, and record in the
Conary database that the file has been removed.  After this, doing
\fBconary update\fP will not replace the file.  (If future versions
of the component rename the file, the removal will track the rename;
that is; if you run \fBconary remove /foo/bar\fP and \fI/foo/bar\fP
is later renamed \fI/foo/blah\fP, when you update to a version of
the component that now contains \fI/foo/blah\fP instead of
\fI/foo/bar\fP, \fI/foo/blah\fP will not be created on your system
as a new file.) The \fBremove\fP command can also be invoked as \fBrm\fP.

.TP
.B repair \fI<trove>[=version]*\fP
Conary examines all of the files currently owned by the specifid troves and
ensures that there contents and attributes match those expected by the troves.
Any inconsistencies are resolved by updating the filesystem.  No rollback is
created for this operation, so it is not possible to undo its affects. Files
which have had their ownership revoked from the trove are unaffected; see the
\fBrestore\fR command for how to peform a similiar operation in such a case.

Please note that this command is currently considered \fBexperimental\fR
and likely has bugs. 

.TP
.B restore \fI<trove>[=version]*\fP
Conary can take ownership of a file away from a trove for a number of
reasons, such as the \fBremove\fR command or during installation when
flags such as \fI-\-replace\-files\fR. This command restores ownership of
all files to the specified troves. It also restores the contents and
attributes of those files to those specified by the troves. The changes
made are placed on the rollback stack. See the \fBrepair\fR command, as
it may be what you really want.

.TP
.B revert
Conary uses a journal file when writing files to the filesystem to allow
it to recover from failures. In the case of a catastrophic failure, this
journal file will remain on the system and Conary will not allow access
to the system until the journal has been reverted using this command.

.TP
.B rmrollback \fI<identifier>\fP
Removes specified rollbacks. Rollbacks must be removed from oldest to newest.
The \fI<identifier>\fP can be either an r.<sequence> rollback name as displayed
by \fBrblist\fR, or a number.  If an r.<sequence> rollback name is specified,
old rollbacks up to and including the one specified are removed.  If the number
N is specified, the N oldest rollbacks are removed.

.TP
.B rollback \fI<identifier>\fP
Applies rollback \fI<identifier>\fP.  The \fI<identifier>\fP can be either
an r.<sequence> rollback name as displayed by \fBrblist\fR, or a number.
If an r.<sequence> rollback name is specified, the most recent rollbacks up
to and including the one specified are applied.  If the number N is
specified, the N most recent rollbacks are applied.  If a \fBsystem
model\fP is included in the rollback, the \fI/etc/conary/system-model\fP
file will be \fBreplaced\fP (no merge operation is attempted) by the
copy from the rollback stack.

Arguments include
.RS 4
.TP 4
.B \-\-replace-files
See \-\-replace-files description from \fBconary update\fP
.TP
.B \-\-tag-script \fIpath\fR
See \-\-tag-script description from \fBconary update\fP
.TP
.B \-\-just-db
See \-\-just-db description from \fBconary update\fP.
Note that this operation \fBwill\fP roll back the rollback
stack, as the rollback stack is part of the database.
.RE

.TP
.B update [\fIargs\fP] [+/-]<\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP][--[\fIversion\fP][\fIflavor\fP]]>* <\fIchangeset-file\fP>*
Updates or installs each \fItrovename\fR from the appropriate repository to 
match the optional \fIversion\fP and \fIflavor\fP given (otherwise the most 
recent version which matches the \fBinstall-label\fP is used).  Also 
applies any given changesets. 
If the \fItrovename\fR is preceded by a minus, the trove is erased as part
of the operation.  If a -- is used in a troveSpec, the version and flavor
before the -- (if any) specify the trove to erase from the local system,
and the version and flavor after the -- (if any) specify the update version.

In \fBsystem model\fP mode, the \fBconary install\fP command is the best
way to add new troves to a system; \fBconary update\fP is normally
used only to change the version or flavor of the trove previously installed.
.RS 4
.TP
.B \-\-exclude-troves \fIregexp-list\fR
Any recursively-included troves whose name matches one or more of the
regular expression in (the space separated) \fIregexp-list\fR will not be
newly installed. If they are already installed, they will be updated
normally.
.TP 4
.B \-\-from-file \fIchangeset-file\fR
Pick troves from \fIchangeset-file\fR, not from a networked repository.
.TP 4
.B \-\-keep-existing
When applying a changeset, do not remove any existing versions of
the troves included in the changeset.
This will work correctly only if the versions have entirely
disjoint file sets.
The \-\-keep-existing option is normally used to add another
branch with the same trove name to the system; after that,
each branch can be updated normally.
If two versions from the same branch are
installed at the same time, this may confuse future update
operations.
.TP
.B \-\-keep-required
This setting controls the configuration option keepRequired.  If keepRequired 
is True, the conary update command will automatically keep packages that are 
needed for dependencies.
.TP
.B \-\-info, \-i
Display a summary of what troves will be affected by the update.
.TP
.B \-\-just-db
The update is performed on the database, but the filesystem is not
changed.
.TP
.B \-\-resolve
Attempt to automatically resolve all dependencies.
Can be made the default option by setting the autoResolve flag in conaryrc.
.TP
.B \-\-no-conflict-check
Skip check for troves being installed multiple times from a single branch.
.TP
.B \-\-no-deps
Skip dependency resolution and errors.
.TP
.B \-\-no-recurse
Install only the troves specified, skipping any troves they reference.
.TP
.B \-\-no-resolve
Do not resolve dependencies, only print out any dependency failures.
Unless \-\-resolve has been made the default by setting the
autoResolve flag in conaryrc, \-\-no-resolve
is the default behavior.
.TP
.B \-\-no-restart
Do not restart Conary after applying a critical update.
This option is only useful in the context of installing troves in
a chroot, therefore it requires the \fB\-\-root \fI<root>\fR option
to be used.
.TP
.B \-\-replace-files
Equivalent to specifying \fB\-\-replace\-managed\-files\fR,
\fB\-\-replace\-unmanaged\-files\fR, \fB\-\-replace\-modified\-files\fR,
and \fB\-\-replace\-config\-files\fR simultaneously.
.TP
.B \-\-replace-config-files
Config files owned by the old verson of the trove being updated which
have been modified and have changed in the new version of the trove are
replaced with the new versions and the local changes are lost (though
they are preserved in the rollback).
.TP
.B \-\-replace-managed-files
Files which are owned by other troves are replaced by files from the trove
being updated. If multiple troves are being installed which conflict with
one another, files from the later troves override files from the earlier
ones.
.TP
.B \-\-replace-modified-files
Non-config files owned by the old verson of the trove being updated which
have been modified and have changed in the new version of the trove are
replaced with the new versions and the local changes are lost (though
they are preserved in the rollback).
.TP
.B \-\-replace-unmanaged-files
Files which conflict with new files being installed, but which are not
owned by any trove on the system, are replaced with the contents from
that trove. The original files are lost and will not be recovered by
a rollback.
.TP
.B \-\-sync-to-parents
Only allow updates to versions that are referenced by other troves on the 
system.  This allows you to easily update a trove to a version specified 
within a group, or ensure you match the :lib component with an out-of-date
version of a trove you have installed.
.TP
.B \-\-tag-script \fIpath\fR
Instead of executing tag scripts, write out the set of commands which
would have been executed to \fIpath\fR.
.TP
.B \-\-test
Perform all actions up to the point of writing to the filesystem.
.TP
.B \-\-apply-critical
If the given update involves critical updates, apply only those critical 
updates and then stop.
.TP
.B \-\-exact-flavors
Match only the exact flavors specified at the command line. This turns off
conary's automatic merging of your system flavor with any flavor specified at
the command line and only uses the flavors you explicitly specify.
.RE
.TP
.B install
The \fBconary install\fP command is an alias for \fBconary
update \-\-keep\-existing\fR.  In \fBsystem model\fP mode, it is
the recommended way to add new troves to a system.
.TP
.B updateall
Iterates through all the top-level troves installed on the system
and updates to the most recent version in the repository.
Thus, if foo:lib has been updated upstream but is only installed on
your system because its a member of group-dist, it will be updated to the
version referenced in the latest group-dist.  If, however, foo:lib is
not referenced by any other trove installed on the system,
\fBupdateall\fP will scan the repository for an update for foo:lib directly.
\fBupdateall\fP will also not update packages installed from local cooks or
emerges.
.RS 4
.TP 4
.B \-\-apply-critical
See \fBupdate \-\-apply-critical\fP
.TP
.B \-\-exclude-troves <patterns>
See \fBupdate \-\-exclude-troves\fP
.TP
.B \-\-info, \-i
Displays the list of update tasks that would be performed without
doing the actual system update
.TP
.B \-\-no-deps
See \fBupdate \-\-no-deps\fP
.TP
.B \-\-no-resolve
See \fBupdate \-\-no-replace\fP
.TP
.B \-\-replace-files
See \fBupdate \-\-replace-files\fP
.B \-\-replace-config-files
See \fBupdate \-\-replace-config-files\fP
.B \-\-replace-managed-files
See \fBupdate \-\-replace-managed-files\fP
.B \-\-replace-modified-files
See \fBupdate \-\-replace-modified-files\fP
.B \-\-replace-unmanaged-files
See \fBupdate \-\-replace-unmanaged-files\fP
.TP
.B \-\-resolve
See \fBupdate \-\-resolve\fP
.RE
.TP
.B updateconary
Downloads a stable version of the \fBconary client\fP and forcibly
installs it. This could help if the locally installed client is too
old (or otherwise misbehaves) and cannot perform a regular upgrade
through a \fBconary update conary\fP invocation.
.RE
.TP
.B verify [--all] \fI<trove>[=version]*\fP
Compares the files in the given \fItrove\fP (or all troves if the --all 
option if given) against the trove files as they were  at the time of install,
and displays any differences.
.RS 4
.TP 4
.B \-\-all
Verify all troves on the system.
.TP 4
.B \-\-diff
Display changes as a git-compatible diff (see \fBhttp://git-scm.com\fP
for more information).
.TP
.B \-\-hash
Normally files are assumed to be unchanged if their size and mtime have
not changed. This option forces a hash to be computed for each file being
verified in to validate their contents.
.RE
.\"
.\"
.\"
.SS "Querying"
There are several options for querying local, repository, and changeset information using conary. \" (Fix this text)
.TP
.B Trove selection
.RS 4
.TP
All query modes take, optionally, any number of name[=version][[flavor]] trove specifiers that determine the troves(s) to display.  The version specifier may be either a full verison string, a label, a hostname followed by an @, just the version, the version plus source and build counts.
.RE
.TP
.B Common Trove Recursion/Child Trove Display options
.RS 4
.TP
.B \-\-components
Sets whether to display components.  Also can be set by the showComponents config option.  If not set, then --recurse will not display components, and --troves will not display components.
.TP
.B \-\-troves
Displays not only the trove in question, but any troves directly included in that trove that are installed by default.
.TP
.B \-\-all-troves
Like \-\-troves, but also displays troves not installed by default.
.TP
.B \-\-recurse
Recurses and displays all child troves of the selected troves, and the child troves of those troves, and so on.  --recurse is implied by many other options, for example, any option that displays files.
.TP
.B \-\-no-recurse
Turns off implied or explicit recursion.
.TP
.B \-\-trove-flags
Modifies output to display flags associated with a trove. These flags are:
.RS 4
.TP
.B NotByDefault
A NotByDefault flag next to a trove means that, if you install the selected top-level trove, this trove will not be installed.
.TP
.B Missing
A Missing flag means that the trove was not available in the trove source (for example, on your installed system it means that the given trove is not 
installed).
.RE
.TP
.B \-\-trove-headers
Ensures that the short description of a trove is displayed, and that displayed information is indented to the correct level for the given trove's location in the hierarchy if recursing.  This flag is necessary when listing files, for example, to see what files are associated with an individual trove.
.RE
.TP
.B Common Trove Display Options
.RS 4
.TP
The following options modify the way a particular trove is displayed, or what information about the trove is displayed.  Some of the options turn off the default trove headers (which can be turned on again by --trove-headers).  Others turn imply --recurse.  Such side effects are mentioned when necessary.
.TP
.B \-\-flavors
Displays full flavors of the troves.  By default conary tries to make a guess at what parts of a trove's flavor will be relevant to you by looking at what troves you have installed, your install flavors, and the other troves with the same name being displayed.  Using --flavors disables this behavior and displays the full flavor.
.TP
.B \-\-full-versions
Full version strings are displayed instead of abbreviated version numbers.
.TP
.B \-\-labels
Displays <label>/<revision> instead of abbreviated version numbers.
.TP
.B \-\-buildreqs
Displays the troves that fulfilled the build requirements of the trove.  (Turns off trove headers)
.TP
.B \-\-deps
Displays full dependency information for the given trove.  (--recurse implied)
.TP
.B \-\-info, \-i
Displays information on the specified troves, including flavors, requirements, and metadata.
.TP
.B \-\-signatures
Displays digital signatures for the specified troves.
.RE
.TP
.B Common File Display options
.RS 4
.TP
All file display options imply --recurse.  All extended file display options imply --ls (meaning that they list the file in question along with the extra info).  They also all turn off trove headers, which can be overridden by specifying --trove-headers.
.TP
.B \-\-file-deps
Displays the individual provides and requires for each file.  If a file has no dependencies, no information will be displayed.
.TP
.B \-\-file-flavors
Displays the flavor for each file listed.
.TP
.B \-\-file-versions
Displays the version of each file listed.
.TP
.B \-\-ids
Displays the file ids for each file.  This is generally used for debugging.
.TP
.B \-\-ls
Lists the files in the changeset.
.TP
.B \-\-lsl
Lists the files in the changeset, with mode, size, and other information as would be seen with ls -l.
.TP
.B \-\-sha1s
Displays the file ids for each file.  This is generally used for debugging.
.TP
.B \-\-tags
Displays the tags associated with each file.  When a file with a tag is installed, removed, or change, the listed tag handler is executed.  See documentation on tag handlers for more information.
.RE
.TP
.B Querying The Repository
.RS 4
.TP
.B repquery [\fIargs\fP] [\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Lists troves in the repository. Synonyms: \fBrq\fP
.TP
Repquery takes several options to modify which troves it returns to you.  The options affect both the verisons of trove returned and the flavors returned.  We call these version and flavor filters.  All flavor filtering occurs after version filtering.  Both types of filtering occur after any version or flavor specified in a trove spec is applied.  The default version filter is --latest, the default flavor filter is --best-flavors.
.TP 4
.B Trove Selection

By default conary selects troves out of the entire repository, filtering by 
the troves you list.  You can also select troves by the following methods:
.RS
.TP
.B \-\-what-provides <dep>
Displays information about the troves that provide dep <dep>, if any.
.RE
.TP 4
.B Version Selection
.RS
.TP
.B \-\-all-versions
Returns all versions of all troves that match the given trove specifiers.
.TP
.B \-\-leaves
Given all the troves that match a trove specifier trove foo, for each flavor that matches, return the trove with the latest version for that flavor.  This option is useful for looking at the all the flavors that exist for a trove without looking at all the available versions.
.TP
.B \-\-latest [default]
For each trove specifier, return all the troves with the latest version.
.RE
.TP 4
.B Flavor Selection
.RS
.TP
.B \-\-all-flavors
Do not filter by flavor -- return all troves that match the version filter.
.B \-\-available-flavors
Return all troves that match the system flavor + any specified flavors 
(+ affinity if it is specified)
.TP
.B \-\-best-flavors [default]
Return the best trove flavor based on your system flavor,
.TP
.B \-\-exact-flavors
Return only troves that have exactly the flavor you specify.
.TP
.B \-\-affinity
Turn on flavor and branch affinity.  For example, when  using --best-flavors 
(the default), the best flavor that matches your install flavor is used.
Note that affinity is not used when no trove specifiers are given.
.RE
.TP
.B Type Selection
You can also filter by type.  By default, rq shows all troves that actually 
exist in the repository.  You can specify:
.RS
.TP
.B \-\-show-removed
Shows troves that have been removed from the repository.
.RE
.TP 4
.B Flavor and Branch affinity
.RS
.TP
Both the conary update and repository query commands use flavor and branch affinity to determine what troves to either install or display.  By default, 'conary rq <trove>' acts like 'conary update <trove>' would.  
.TP
The affect of branch affinity on an update or query command can be described as follows:  if a trove specifier 'foo' is given with no version information, conary will look at any installed versions of 'foo' and see what branches they are on, returns the latest version of 'foo' on those branches that match the flavor specified.
.TP 
The affect of flavor affinity on an update or query command can be described as follows: if a trove specifier 'foo' is given with no flavor information, and the flavors of the installed versions of foo match, then conary will merge the flavor of the installed troves into the install flavor given.
.TP
In summary, when you install a trove on a particular branch, conary assumes, unless you explicitly specify otherwise, that you would like to continue getting updates from that branch.  Similarly, if you install a trove with a different flavor than your install flavor, conary assumes that you wish to keep that flavor.  
Repository querying matches this behavior to help you see what trove will be installed if you perform an update.
.RE
.RE
.TP
.B Displaying Trove Differences From The Repository
.RS 4
.TP
.B rdiff \fItrovename\fP=\fIoldver\fP[\fI<flavor>\fP]--\fInewver\fP[\fI<flavor>\fP] [\fI--buildreqs\fP] [\fI--deps\fP] [\fI--show-empty\fP] [\fI--ls\fP] [\fI--lsl\fP] [\fI--file-deps\fP] [\fI--file-versions\fP] [\fI--tags\fP] [\fI--file-contents\fP]  [\fI--labels\fP]  [\fI--flavors\fP]  [\fI--full-versions\fP] [\fI--tags\fP]
.TP
Report differences between the two specified troves.
.TP
The command line options explicitly turn on extra output for different sections.
.RS 4
.TP
.B \-\-buildreqs
Display changes in build requirements.
.TP
.B \-\-deps
Display changes in trove dependencies. For file dependencies, see \fI--file-deps\fP below.
.TP
.B \-\-show-empty
By default, troves that have not changed do not get displayed. This option includes these in the output as well.
.TP
.B \-\-tags
Display changes in file tags.
.TP
.B \-\-ls
Show added, removed and changed files.
.TP
.B \-\-lsl
Detailed output of how the file has changed. The output for the new file omits the elements that have not changed.
.TP
.B \-\-file-deps
Display changes in file dependencies.
.TP
.B \-\-file-versions
Turn on the display for file versions.
.TP
.B \-\-labels
Displays <label>/<revision> instead of abbreviated version numbers.
.TP
.B \-\-full-versions
Full version strings are displayed instead of abbreviated version numbers

.RE
For example, to see the difference between python 2.4.1-20.7-1 (x86 flavor) and
2.4.1-20.7-2 (x86_64 flavor), one can run:
.TP
.B conary rdiff 'python=2.4.1-20.7-1[is:x86]--2.4.1-20.8-1[is:x86_64]'

.RE
\fBNOTE:\fR the format for the output is subject to change.
.RE

.RE
.RE
.TP
.B Querying The Local System
.RS 4
.TP
.B query \fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]*\fP [\fI\-\-path <path>\fP]*
Lists troves installed on the local system. Any number of trove names or
absolute paths may be given. Extra arguments may be given to change what
information is displayed (but they cannot be combined, unfortunately). Synonyms: \fBq\fP
.RS 4
.TP
.B \-\-path <path>
Displays information about the trove that owns the path <path>, if any.
.TP
.B \-\-what-provides <dep>
Displays information about the troves that provide dep <dep>, if any.
.RE
.RE
.TP
.B Querying ChangeSets
.RS 4
.TP
.B showcs [\fIargs\fP \fI<changeset> [<trove/component>=[<version>]*]\fP
The \fBshowcs\fP command lists the contents of the provided 
\fBchangeset\fP.  If a trove is specified, and that trove is within the 
changeset, only that trove is displayed.  If no trove is specified, the \fBprimary troves\fP in changeset are displayed.  Primary troves are defined in the jargon section below.
The \fBshowcs\fP command can also be invoked as \fBscs\fP.
.RS 4
.TP 4
.B \-\-show-changes
For files that have been modified, lists the old version of the file above the
new version of the file for easy comparison.  Implies --ls
if specified.  
.TP 4
.B \-\-recurse-repository
When recursing, use the repository to download information about troves not in 
the changeset but referenced by the changeset.  This allows you to perform a 
--ls of all the files in a group changeset, for example.
.RE
.SS "Advanced update commands"
Conary also includes some more advanced update commands that should not be used by beginners.
.TP
.B migrate [+/-]\fItrovename\fP[=\fRversion][\fI<flavor>\fP]\fP+
\fBWARNING\fP: This command is only useful in situations where a group defines 
exactly what you wish to update your system to.  It will erase everything
installed on your system that is not specified to be migrated to.  If you
are not sure you want to use this command, you probably don't.

Migrate system to \fItrovename\fP so that when the migration is done, only
the troves specified on this command line and their children are installed, and 
pinned troves are left behind.

In general, migrate only installs or updates troves that are defined as 
byDefault True in their group.  However, there is one exception: if a trove
is defined as byDefault False, but is installed on the current system, then
it will be updated.  For example, if the kernel package is by default False (as it currently is with rPath Linux 1), and it is installed, then it will be 
updated to the new version of the kernel.

Migrate takes its information about the by default settings from the currently 
installed version of the group being migrated (often group-os or group-dist).
.RE
.TP
.B sync [+/-]\fItrovename\fP[=\fRversion][\fI<flavor>\fP]\fP+
Update the children of \fItrovename\fP so that the versions of the child
troves match the version specified by the parent trove.
By default, the specified trove itself is updated first, and
then children are synced to the new trove.

Arguments include
.RS 4
.TP 4
.B \-\-current
Cause only the children of the specified troves to be updated to match the 
installed troves specified on the command line.  The specified troves 
themselves are not touched.
.TP
.B \-\-full
Erase packages and components that are children of the specified troves and 
would not be installed if the specified troves were being installed for the first time.  For example, :debuginfo components are not installed by default.
If you used this option when syncing a package and you had its :debuginfo 
component installed, that component would get erased.
.TP 4
.B \-\-update-only
Only change the versions of installed children to match the ones referenced 
by the specified troves, do not install any missing troves.
.RE
.\"
.\"
.\"
.SH JARGON
Conary introduces new concepts and makes new distinctions.
.TP 4
.B Repository
A network-accessible database that contains files for multiple packages,
and multiple versions of these packages, on multiple development branches.
Nothing is ever removed from the repository once it has been added.
.TP
.B Files
Conary tracks files by unique file identifier rather than path name.
(This allows Conary to track changes to file names.)  A reference to
a \(lqfile\(rq is not a reference to a path name, but rather to the
file referenced by the unique file identifier.
.TP
.B Troves
Every collection kept in a repository is generically called a
\fBtrove\fP.  A trove can contain either files or other troves.
.TP
.B Packages and Components
\fBPackages\fP contain logically-connected collections of files.
The files are grouped into \fBcomponents\fP, and the components
are grouped into packages.  Components have a package name, a
\fB:\fP character, and a component suffix; for example:
\fBconary:runtime\fP.
.IP
Not all components are part of a package.  Some components, such
as those with a \fBsource\fP or \fBtest\fP suffix, are independent
components that are related to but not included in a package.
.TP
.B Groups and Filesets
A \fBGroup\fP is an arbitrary collection of other troves, and its
name starts with \fBgroup-\fP.  A \fBFileset\fP is an arbitrary
collection of files, and its name starts with \fBfileset-\fP.
.TP
.B Labels, Versions, and Branchnames
Conary version strings are a \fB/\fP-separated sequence, normally 
\fB/\fP-prefixed, of specifiers of the form
\(lq\fI<label>[\fB/\fI<version>\fB-\fI<release>]\fR\(rq, and
a \fI<label>\fR follows the form
\(lq\fI[<repository>]\fB@\fI[<namespace>\fB:\fI]<tag>\fR\(rq.
A version string is \fBfully-qualified\fP if it is \fB/\fP-prefixed.
The \fI<namespace>\fB:\fI<tag>\fR pair is generally seen together,
and is called a \fBBranchname\fP.
.RS 4
.TP 4
\f(BI<version>\fP
The upstream version of the package
.TP
\f(BI<release>\fP
A \fI<release>\fP is a \fI<sourcecount>\fP-\fI<binarycount>\fP pair
of numbers, where \fI<sourcecount>\fP specifies the source package
the binary came from, and \fI<binarycount>\fP tells which build of the
sources is being installed. Source packages have release numbers which
exclude the -\fI<binarycount>\fP portion. When new versions of a package
are cooked, conary will increment the \fI<binarycount>\fP portion of
the release number.
.TP
\f(BI<tag>\fP and \fBbranch string\fP
\fI<tag>\fP is a simple string that is unique within a namespace.
A \fBbranch string\fP is a fully-qualified version string without a
trailing \fI<version>\fP-\fI<release>\fP pair.
.TP
\f(BI<label>\fP
A \fI<label>\fP does not include any leading \fB/\fP character, and
has the special property of being able to apply to more than one
branch at once.  Therefore, \fBconary.example.com@local:foo\fP might
refer to \fIboth\fP of the following at once:
.br
.B /conary.example.com@local:bar/conary.example.com@local:foo
.br
.B /conary.example.com@local:foo
.br
A label applies to any branch whose name ends with the label.
.RE
.TP
.B Flavors
A single version of a source component can be built many times
with different configurations and for different architectures.
Each of these different builds is called a flavor.  The flavor
is determined by the base instruction set (e.g. \fBx86\fP,
\fBx86_64\fP, \fBppc\fP, \fBppc64\fP, etc.), any extra instruction
set features (e.g. \fBmmx\fP, \fBcmov\fP, \fBsse\fP, \fB3dnow\fP),
and the flags that the recipe was cooked with, both sytem-wide
flags (e.g. \fBnptl\fR, \fBbuilddocs\fP, \fBpam\fP) and package-specific
flags (e.g. \fBkernel.smp\fP, \fBglibc.tls\fP).
.IP
Flavors are
specified within literal \fB[\fP and \fB]\fP characters, first
the flags (if any), optionally prefixed by a literal \fB!\fP character
to invert their sense, then the instruction set specified as a
literal \fBis:\fP followed by the base instruction set, and then
any extra instruction set features within literal \fB(\fP and \fB)\fP
characters.  Examples include
.br
.B [nptl,!builddocs is:x86(sse)]
.br
.B [!kernel.smp]
.br
.B [is: x86_64]
.RE
.TP
.B Changesets
A \fBchangeset\fP is a representation of the changes between two versions
(a \fBrelative changeset\fP) or the change between nil and a version
(an \fBabsolute changeset\fP).  Changesets are used internally as the
main form of communication between the Conary client and the repository,
and can also live independently as files.
.RE
.TP
.B Primary Troves in a Changeset
The \fBprimary troves\fP in a changeset are generally the top-level
troves in that changeset.  If a changeset was created by cooking
a package, then the packages in the changeset are primary, but
the components are not.  Similary, if looking a group changeset,
then groups in that changeset that are not included in any other
groups will be primary.  If the changeset was created by running
\fIconary changeset foo:runtime\fP, then \fIfoo:runtime\fP will be
a primary trove.
.\"
.\"
.\"
.SH FILES
.\" do not put excess space in the file list
.PD 0
.TP 4
.I /etc/conary/system-model
If the \fI/etc/conary/system-model\fP file exists, it contains the
system model.  In this file, Conary will preserve blank lines and
full-line comments.  Trailing comments are not preserved when Conary
modifies lines.  See the previous description of system models.
The \fI/etc/conary/system-model.next\fP file is temporarily used
during update operations that modify the system model, so that a
failed update operation can be either reverted or resumed after
a transient failure.
.PD
.RS 4
.TP 4
.B search \fItroveSpec\fP|\fIlabel\fP
A \fBsearch\fP line, like an element of a \fBsearchPath\fP in a Conary
group, lists either a label or a trove to add to the search path used for
finding other troves in the model.  Unlike \fB$PATH\fP on the command
line, it is searched starting from the most recently-added item; so the
last item listed is searched first.  The \fBconary updateall\fP
command line causes all \fItroveSpec\fPs on \fBsearch\fP lines to be
updated to reference the most recent versions of those troves found in
the repositories at the time the command is run.
.TP 4
.B install \fItroveSpec+\fP
One or more troves to install.  The trove is first looked up in the
troves already added to the model (by \fBinstall\fP, \fBupdate\fP,
or \fBpatch\fPlines), and after that by looking on the search path
as specified by \fBsearch\fP lines.  This line corresponds to a
\fBconary install\fP or \fBconary update --keep-existing\fP command.

\fBinstall\fP honors the isInstall (byDefault) settings of the troves found.
.TP 4
.B update \fItroveSpec+\fP
One or more troves to update, relative to the previous trove operations
(\fBnot\fP relative to the state of the installed system).  This will
honor the existing isInstall (byDefault) settings of the troves being
replaced; it is commonly used to choose a different version of a
package (for example, an older version, newer version, or version on a
different label).  This line corresponds to a \fBconary update\fP
command.
.TP 4
.B erase \fItroveSpec+\fP
Make previously-referenced troves optional.  Note that a trove erased
from the model may still be re-introduced to the system to resolve
dependencies.
.TP 4
.B patch \fItroveSpec+\fP
One or more troves that are the source of patch information, relative
to the previous trove operations.  These are usually groups.  This
operation replaces conflicting versions of previously-mentioned troves,
without adding new trove names to the set of troves to install.
(Dependency resolution may still cause other troves from the patch
set to be included on the system.)  This operation is intended for
operations like applying a group that contains exactly the set of
packages that comprise a patch/errata set, to allow the base OS version
to remain stable while applying a specific set of required patches.
.TP 4
.B version \fIversionString\fP
Currently ignored on system; may be used when importing a system
model into a group.
.RE

.PD 0
.TP 4
.I /etc/conaryrc
.TP
.I $HOME/.conaryrc
.TP
.I ./conaryrc
The configuration files for Conary; entries in \fI./conaryrc\fP
override entries in \fI$HOME/.conaryrc\fR, which override entries
in \fI/etc/conaryrc\fR.  Command-line options
(including the \fB\-\-config\fR option, which allows you to override
one line in the config file, and the \-\-config-file option, which 
reads in an additional, supplied config file) override all 
configuration files.  Conary configuration items can be strings,
booleans (\fBTrue\fP or \fBFalse\fP), or mappings (\f(BIto from\fP) and
can include:
.PD
.RS 4
.TP 4
.B autoResolve
If autoResolve is True, the conary update command will automatically
resolve dependencies (unless the \-\-no-resolve option is provided).
If it is false, the conary update command will not
resolve dependencies, unless the \-\-resolve option is provided.
The autoResolve option is False by default.
.TP
.B buildLabel
The default label for troves during source code operations
(checkout, diff, etc) and for cooking.  Can be overridden by
the \fB\-\-build-label \fI<label>\fR command-line option.
.TP
.B buildFlavor
The flavor that Conary will use when building troves.  This flavor
will be used when no flavor is specified in group and fileset
recipes.  It is also used to set the values of Use and Arch flags
when building.
.TP
.B buildPath
The path packages are built under; default \fI/usr/src/conary/builds
.TP
.B conaryProxy
The Conary proxy to use. The value can be \fIprotocol
URL\fR (supported protocols are \fIhttp\fR and \fIhttps\fR), or just a URL, in
which case it will be used for both protocols.
.TP
.B contact
The contact name (normally an email address or URL) to put in changelog
entries when committing changes to source components.
.TP
.B dbPath
The path to the Conary database on the local system.  It is relative
to \fBroot\fP (see below) and should normally not be changed.
.TP
.B environment
Provides an environment variable and its associated value to which to
set it (or, if no value is provided, the environment variable to unset)
while building packages.  The values may include macros.
.TP
.B excludeTroves
The regular expression of a trove name to exclude when doing updates.
Multiple regular expressions can be specified with mutiple excludeTrove
lines.
.TP
.B flavor
The flavor that Conary will use to find troves to install when the
trove is not yet installed on the system.  It is specified using the
same syntax as flavors are specified on the command line.
.\" FIXME: document how flavors are specified on the command line.
.TP
.B installLabelPath
The ordered path of labels to use when an incomplete version is
specified to install package, query the repository, and abbreviate
versions when displaying them.
Can be overridden by the \fB\-\-install-label \fI<label>\fR command-line option.
Can also be overridden by the \fBsearchPath\fR configuration option.
.TP
.B interactive
If set to True, conary will ask for confirmation before performing actions that modifying system or repository state.
Can be overridden by the \fB\-\-interactive\fR or \fB\-\-no-interactive\fR command-line option.
.TP
.B keepRequired
When troves are being erased from the system, conary checks the dependencies
of the remaining troves to ensure those dependencies remain satisfied. If
those dependencies are broken, a dependency error is generated. This option
tells conary to try and leave troves in place to resolve those dependencies.

If keepRequired is True, the conary update command will automatically
keep packages that are needed for dependencies.
The keepRequired option is False by default.
.TP

.B lookaside
The transient lookaside cache used only during building, normally
\fI/var/cache/conary\fR
.TP
.B name
The name used in changelog entries when committing changes to source
components.
.TP
.B pinTroves
The regular expression of a trove name to pin when installing.
Multiple regular expressions can be specified with mutiple pinTroves
lines.
.TP
.B proxy
The HTTP proxy to use to connect to the Internet. The value can be \fIprotocol
URL\fR (supported protocols are \fIhttp\fR and \fIhttps\fR), or just a URL, in
which case it will be used for both protocols.
.TP
.B pubRing
The filename of the OpenPGP Keyring to refer to for signature keys.
.TP
.B recipeTemplate
The filename of the recipe template to use.
.TP
.B repositoryMap
Maps a hostname from a label to a full URL for a networked repository.
Multiple maps can be given for a single label. (If no mapping is found,
\fBhttp://\f(BIhostname\fB/conary/\fR is used as the default map.)
.TP
.B root
The path to install files into, normally \fI/\fR.
Can be overridden by the \fB\-\-root \fI<root>\fR command-line option.
.TP
.B resolveLevel
Determines the level of effort conary will put into resolving dependencies.

If the level is 1:
    Attempt to resolve dependencies by adding new troves that fulfill those missing dependencies.

If the level is 2:
    If updating trove 'a' removes a dependency needed by trove 'b', attempt to update 'b' to solve the dependency issue.

(The default level is 2)
.TP
.B searchPath
Replacement for installLabelPath that allows you to specify groups or
packages (as well as labels) to search for packages to install.  The groups
used are found using the same algorithm used by "conary update <group>",
meaning that if you have a group installed, that group's branch will be
used for finding the group to search and resolve against.

Example: Your conaryrc contains:
    searchPath group-os contrib.rpath.org@rpl:1

When running "conary update frob", Conary will first search group-os for a
version of frob first, and then fall back to find a version on
contrib.rpath.org@rpl:1 if one could not be found in group-os.  If frob has
any dependencies that need to be resolved, they will be resolved first
against group-os; then contrib.rpath.org@rpl:1 will be searched.
.TP
.B shortenGroupFlavors
Decreases the number of items in group flavors to the bare minimum needed
to differentiate between cooks.  This is done by starting with any platform
flavors (determined by the presence of a "platform True" line in the definition
of the flavor in one the useDirs), and if necessary, adding in additional distinguishing
flavors to make all of flavors of the group being cooked unique.
.TP
.B signatureKey
Specifies the OpenPGP Key from a local keyring to be used when generating trove
signatures. \fBNOTE:\fR When this option is processed, it clears all entries in
signatureKeyMap. This has to happen for multiple reasons. This is the only way
that specifying \fB\-\-signature\-key\fR on the command line can work correctly.
It's also a convenient workaround for the fact that successive signatureKeyMap
entries are cumulative, which means that if signatureKey didn't clear the
signatureKeyMap, there would be no mechanism to override signatureKeyMap
entries specified in previously processed config files. This also means that if
both signatureKey and signatureKeyMap are used in the same config file
signatureKey should be specified \fBbefore\fR any signatureKeyMap lines. You
can think of signatureKey as a default signatureKeyMap to be used if no
signatureKeyMap regexes match. (see below) This setting defaults to None.
.TP
.B signatureKeyMap
Provides a mechanism to map an OpenPGP Key from a local keyring to a
repository. the arguments that follow are a pair of regex and fingerprint.
Multiple signatureKeyMap lines can be present and will be processed in order.
When a trove signature is to be generated, the signatureKeyMap is checked, the
\fBFIRST\fR regex that matches will determine which OpenPGP Key will be used.
If no regexes match, signatureKey will be used (though it might have it's
default setting of None). It is a GOOD idea to specify a signatureKey line
before specifying any signatureKeyMap lines if you use them--unless you really
meant to NOT override signatureKeyMap lines specified in a previously processed
config file!
.TP
.B siteConfigPath
The list of paths that cvc searches for files to add to the \fCCONFIG_SITE\fP
environment variable when cross-compiling.  The defaults are packaged with
cvc.
.TP
.B updateThreshold
Defines the upper limit on the number of unrelated troves that will be
downloaded at one time from the repository.  Setting updateThreshold to a 
low value tends to result in many small downloads, while setting it to a high 
value tends to result in fewer, larger downloads.  Defaults to 10.
.TP
.B user <repositoryHostGlob> <username> [<password>]
Specifies the user name, and optionally the password, to use for
repositories with a hostname matching <repositoryHostGlob>.
.TP
.B Macros <macro> <definition>
Assigns the given string to <macro>, for use in cooking.  Useful especially for setting march, os, target, and parallelmflags.
Can be overridden by the \fB\-\-macro \fI"<macro> <value>"\fR command-line option.  Note that all values are assumed to be strings -- no quotes are necessary around <value> on the command line or in the config file.
.TP
.B includeConfigFile
Immediately reads the listed configuration file.  The file name may include
shell globs, in which case all files matching the glob will be read in.
.SH
.PD 0
.TP
.B Configuration Contexts
A Configuration context is a section of a config file delimited by a section
name in square brackets, like \fI[foo]\fR.  All conary configuration options
may be overridden in contexts.  When a context is selected, the configuration 
values specified in the context override the default values.
   If any values are not specified, the values defined in the main 
configuration section are used.  
.RS 4
.TP 4
.B Specifying the context
The context to be used by conary can be specified in four ways:  It can be specified directly in any conaryrc file.  It can also be specified in a CONARY file,
which is created and modified by using cvc context.  You may also set 
the environment variable CONARY_CONTEXT, and finally it can be set through 
the command line option \fB--context\fR \fI<context>\fR, which is accepted for 
all conary commands.  If the context is specified in multiple ways, the command line parameter overrides, followed by the environment variable, followed by a CONARY file created by cvc context, followed by a conary configuration setting.

.TP
.B Viewing available contexts
Contexts are visible using \fBconary config --show-contexts\fR

.SH
.PD 0
.TP 4
.I /etc/conary
Contains all local configuration for Conary except for the conaryrc file.
.TP
.I /etc/conary/tags/
Tagdescription files describing dynamic tags.
.\" FIXME: need a man page describing the tagdescription file format.
.TP
.I /usr/libexec/conary/tags/
Taghandler files implementing dynamic tags.
.\" FIXME: need a man page describing the taghandler calling convention.
.TP
.I /var/lib/conarydb/conarydb
The database file containing all the local system metadata.
.TP
.I /var/lib/conarydb/contents
Original file contents of configuration files Conary tracks.
.TP
.I /var/lib/conarydb/rollbacks
Changeset files representing rollbacks (listed via \fBconary
rblist\fP).
.I /var/lib/conarydb/manifest
Text list of all installed troves.
.I /var/lib/conarydb/modelcache
Cached trove data used for system-model based updates.
.TP
.I /etc/conary/arch
Directory containing architecture definition files.
.\" FIXME: need a man page describing architecture definition files
.TP
.I /etc/conary/recipeTemplates
Directory containing recipe templates.
.TP
.I /etc/conary/use
Directory containing use flag definition files.
.TP
.I /etc/conary/components
Directory containing files that define the default behavior of ComponentSpec, the Conary policy which determines how files are assigned to components when building a Conary package.
.\" FIXME: need a man page describing use flag definition files
.\"
.\"

.SH BUGS
There are no bugs, only undocumented features.  You can report
undocumented features at https://issues.rpath.com/
.\"
.\"

.SH "SEE ALSO"
cvc(1)
.br
http://www.rpath.com/
.br
http://wiki.rpath.com/
.br
http://www.rpath.com/technology/conary.html
.I An Introduction to the Conary Software Provisioning System
.br
http://www.rpath.com/technology/techoverview/
.I Repository-based System Management Using Conary
