.\" Copyright (c) 2004-2005 rPath, Inc.
.TH CVC 1 "12 October 2005" "rPath, Inc."
.SH NAME
cvc \- Conary source management
.SH SYNOPSIS
.B cvc \fIcommand \fR[\fI<args>\fR]
.SH DESCRIPTION
\fBConary\fR is a software configuration manager that uses distributed,
network-based, versioned repositories rather than disparate package
files as its canonical source of data.  Conary uses the repository
versioning to intelligently merge configuration files, file ownership
and permissions, and so forth.  The \fIC\fPonary \fIv\fPersion
\fIc\fPontrol program, called \fBcvc\fP, handles build and source
management, and is responsible for all changes to the repository.
.SH REFERENCE
cvc has several common command-line arguments, all of which modify 
configuration entries and are documented with other configuration
entries.  The rest of its command-line arguments are specific to
which cvc \fBcommand\fP you are running, and are documented with
the commands.
.SS "Building Components and Packages"
A source component is checked out into a \fBsource directory\fP
with the \fBcheckout\fP command, or a source component and
source directory are created with the \fBcvc newpkg\fP subcommand.
Then the contents of the source directory are modified with other
subcommands, and the changes to the source component are then
committed to the repository with the \fBcvc commit\fP subcommand.
Only the \fBcvc commit\fP and \fBcvc sign\fP commands modify the repository; 
the rest of the commands either query the repository for information about a 
source package or schedule a change to be applied to the repository by the next 
\fBcvc commit\fP command.
.PP
The default branch on which each of these commands operates
is specified by the \fBbuildLabel\fP configuration entry
(see below).
.PP
The following \fBcommands\fP to \fBcvc\fP are used to create,
modify, and cook source components:
.TP 4
.B cook \fI[\fR\-\-prep\fI] [\fR--macros file\fI] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-resume [<linenums>|policy]] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-flavor <flavor>] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-macro '<macro> <string>'] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-no-clean] [\fR\-\-unknown-flags] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-no-deps] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-signature-key <fingerprint>|None] \e
.PD 0
.TP
.B \ \ \ \ \ \fI<file>\fP.recipe\fI|<component>[=<version>]...
.PD

Build a package.  If \fB\-\-prep\fP is specified, the souce code is
unpacked, but is not built. if \fB\-\-macros\fP is specified, it
names a file containing macro definitions to apply to the recipe
macro set.  
.IP
If \fB\-\-resume <linenums>\fP is specified, 
conary will cook the specified line numbers of the recipe.  The format of
<linenums> is any number of pairs of n or n:m 
separated by commas, where n and m are line numbers in the recipe.  
If the initial line number in a pair is left off, leaving :m, 
conary will begin cooking from the beginning of the file.  
If the final line number is left off, leaving n:, conary will cook
until the end 
of the file, run all the policy, and create a changeset.  A \-\-resume n without
a colon is equivalent to n:n, if there are other ranges given to \-\-resume,
or n: if it is the only argument given to \-\-resume.  All resume line 
numbers must be provided in increasing order.

If \fB\-\-resume\fP is specified with no parameter,
the recipe will be recooked from the line of last failure.  
If \fB\-\-resume policy\fP is specified, the policy will be rechecked 
from the last build; this only works if the destdir still exists,
either because of a policy error or because the \fB\-\-no-clean\fP option
was provided.

Example: cvc cook \-\-resume 5:10,15,35:

Note that the \fB\-\-resume\fP option may
be used only with local recipe files, not source components being
built directly from a repository.
.IP 
The \-\-flavor option can be used to override the default Use flags, 
package-specific flags, and arch Flags  for this instantiaton.   
The format is exactly as it is shown in conary config flavors.  The 
flavor specified here overrides flavors specified in the buildFlavor
config option.
.IP
The \-\-macro option assigns the given string value to <macro>.  
The value given overrides any attempt to reset the value later in the 
recipe.  The macro and its boolean value must be enclosed in quotes.
.IP 
The \-\-no-clean option does not clean up the build directories
after the build is complete, even if the build is successful.
This can be useful for rerunning policy for a complete build using 
\-\-resume, or for examining the completed build directories.
.IP 
The \-\-no-deps option prevents conary from raising an error 
if a component or package listed as a build requirement for the package
is not installed on the build system.
.IP
If \-\-signature\-key is specified, the OpenPGP key in the local keyring with 
that fingerprint will be used to create trove signatures for all troves created 
during the cook. The repository must recognize the OpenPGP key that made the 
trove signature or the respective troves will be rejected. If 
\-\-signature\-key None is specified, generation of trove signatures will be 
disabled.
.IP

If the thing to be cooked ends in \fB.recipe\fP, then
it must be a recipe file and the package will be cooked from the
filesystem.  Otherwise, it must name a repository component and
the package will be cooked from the repository.  If a version is 
specified, it must be a source version for that component.
.TP 4
.B add \fIfile...\fP
Adds all the files listed on the command line to the source
component.
.TP
.B annotate \fI<file>\fP
Show the version, date, and author of each of the lines in \fI<file>.
\fI<file> must be a file in a conary source dir.
.TP
.B branch \fInewbranch [\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Creates a new branch (identified by the label \fInewbranch\fP) in the
repository, relative to the branch specified in \fIversion\fP.
By default, if a binary trove is given, the binary and its source are
branched.  If \fB-\-source-only\fR is specified, the source
trove for each binary trove is branched, instead of the binary trove.
If \fB-\-binary-only\fR is specified, no source troves are branched.
.TP
.B checkout [\-\-dir \fI<dir>\fP] \fI<trove\fP[=\fIversion\fP]>\fP
Check the \fI<trove>\fB:source\fR component out of the repository
and put it in directory \fI<dir>\fP if specified, and directory
\fI<trove>\fP otherwise.  Fetches the most recent version
specified by \fBbuildLabel\fP unless \fI<version>\fP is specified.
Synonyms: \fBco\fP
.TP
.B clone newclone [\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Clones a trove from one repository to another. This is similar to shadowing in
that it creates a new trove with information from another. However, unlike
shadowing, cloning will not create a new label on the target branch and it is
not possible to merge changes (see "merge" later in this document) with clone.
The commit will appear to origionate from the individual who last committed the
trove being cloned. Unlike shadowing, \fBnewclone\fP must be a full branch
name. See the \fBExamples\fP section for more information.
.TP
.B commit [\-\-message \fI<message>\fP]\fP
Different from \fBconary commit\fP, \fBcvc commit\fP
commits all the changes in the source directory to the repository. 
It will ask for a changelog message unless one is passed on the
command line with \fB\-\-message\fP.  
Synonyms: \fBci\fP
.TP
.B context [name]\fP
When not passed a name, displays information about the current context.  
See \fIman conary\fP for more information on contexts.
.IP
When passed a name, sets the context to <name> for the current directory.
That context will then be used for all conary
operations in the directory.  The commands \fBcvc checkout\fP and 
\fBcvc newpkg\fP will transfer the current context into their newly 
created directories.
.B describe \fI<xml file>\fP
Update the metadata of the source trove in the current source directory
based on the contents of \fI<xml file>\fP.
.TP
.B diff
Show (in a slightly extended unified diff format) the changes that
have been made in the current source directory since the last
\fBcvc commit\fP
(or, if no commit, since the source component was checked out).
.TP
.B log [\fI<branch>\fP]
Prints the log messages for the branch specified by \fBbuildLabel\fP,
or for \fI<branch>\fP if specified.
.TP
.B newpkg \fI<name\fP[=\fIlabel\fP]>\fP
Creates a new package.
.TP
.B merge
Run from a source directory containing a shadow, this merges changes made
on the parent branch since the last \fBshadow\fP or \fBmerge\fP command
into the shadow.
.TP
.B rdiff \fI<name> <oldver> <newver>\fP
This source command operates only on the repository, not on a
source directory.  It creates a diff between two versions of
a source trove from the repository.
.TP
.B remove \fI<filename>...\fP
Unlike \(lq\fBcvs remove\fP\(rq, \fBcvc remove\fP both removes
the file from the filesystem and marks it to be removed from the next
version checked into the repository at the next \fBcvc commit\fP.
Synonyms: \fBrm\fP
.TP
.B rename \fI<oldname> <newname>\fP
Renames the file \fI<oldname>\fP to \fI<newname>\fP on the filesystem,
and marks it to be removed from the repository at the next
\fBcvc commit\fP.
.TP
.B shadow \fInewshadow [\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Creates a new shadow (identified by the label \fInewshadow\fP) in the
repository, relative to the shadow specified in \fIversion\fP.
By default, if a binary trove is given, the binary and its source are
shadowed.  If \fB-\-source-only\fR is specified, the source
trove for each binary trove is shadowed, instead of the binary trove. Note that
if called without a specific version, this will pull the source component from
the most recently cooked binary. To get the most recent source version, use
yourpackage:source as the trove. If \fB-\-binary-only\fR is specified, no
source troves are shadowed. The shadow command works just like the branch
command, except that it creates a shadow instead of a branch.
.TP
.B sign [\fR\-\-signature\-key <fingerprint>\fB] 
[\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Signs the specified troves in their respective repositories. If 
\fB-\-signature\-key\fR is specified, it will override all signatureKey and 
signatureKeyMap settings specified in config files. The repositories affected 
must recognize the OpenPGP key(s) that made the trove signature(s) or the 
respective signatures will be rejected.
.TP
.B update [\fI<version>\fP]
Updates the current source directory to the latest version, or to
\fI<version>\fP if specified.  Merges changes when possible.
Synonyms: \fBup\fP
.RE
.\"
.\"
.\"
.SH TROVE SIGNATURES
.TP 4
.B Discussion
.br
cvc is able to generate trove signatures. in all cases <fingerprint> refers to 
the fingerprint of an OpenPGP key from the local keyring. (generally ~/.gnupg). 
When a signature is generated and submitted to a repository, the repository 
verifies the signature. If the signature is bad, or the repository doesn't know 
about the OpenPGP Key that made that signature, the repository will remain 
unachaged. Aka, a signature failure on cook will result in the trove not being 
uploaded to the repository, whereas a failure on sign will not affect the trove 
on the repository, whether or not that trove already had signatures associated 
with it. The OpenPGP key that will be used can be specified on the command line 
or in a config file. see conary(1) for a discussion on the appropriate settings.
.TP 4
.B Fingerprints
.br
Fingerprints can have spaces in them. Valid OpenPGP key ids can also be used in
place of the full fingerprint. For example:
.br
\ \ \ \ AAFF BBCC DDEE 1122
.br
\ \ \ \ 1234 5678 9ABC DEF0 1212 3344 AAFF BBCC DDEE 1122
.br
\ \ \ \ 123456789ABCDEF012123344AAFFBBCCDDEE1122
.br
All refer to the exact same OpenPGP Key
.RE
.\"
.\"
.\"
.SH EXAMPLES
.TP 4
.B Branching
cvc branch conary.example.com@rpl:example-foo foo:source=conary.rpath.com@rpl:devel
.br
This creates a branch in the conary.example.com repository of the
foo:source trove, based on the version of foo in the main rpath repository.
You can now check out this branch and work on it:
.br
cvc checkout --build-label conary.example.com@rpl:example-foo foo
.br
Committing changes to that copy of foo:source will go into the
conary.example.com repository on the rpl:example-foo branch.
.P
.TP 4
.B Cloning
cvc clone /ignoreme.rpath.org@rpl:devel/ pork:source=contrib.rpath.org@rpl:devel
.br
This creates a clone of pork:source on ignoreme.rpath.org@rpl:devel
.P
More examples coming soon to a man page near you!
.\"
.\"
.\"
.SH BUGS
There are no bugs, only undocumented features.  You can report
undocumented features at http://bugs.rpath.com/
.\"
.\"
.\"
.SH "SEE ALSO"
conary(1)
.br
cvcdesc(1)
