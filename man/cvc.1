.\" Copyright (c) 2004-2008 rPath, Inc.
.TH CVC 1 "13 November 2007" "rPath, Inc."
.SH NAME
cvc \- Conary source management
.SH SYNOPSIS
.B cvc command [\fI<args>\fP]
.SH DESCRIPTION
\fBConary\fR is a software configuration manager that uses distributed,
network-based, versioned repositories rather than disparate package
files as its canonical source of data.  Conary uses the repository
versioning to intelligently merge configuration files, file ownership, 
file permissions, and so forth.  The \fIC\fPonary \fIv\fPersion
\fIc\fPontrol program, called \fBcvc\fP, handles build and source
management, and is responsible for all changes to the repository.
.SH REFERENCE
cvc has several common command-line arguments which modify
configuration entries.  The rest of its command-line arguments 
are specific to which cvc \fBcommand\fP you are running, and are 
documented within the commands.
.SS "Build Management"
A source component is checked out into a \fBsource directory\fP
with the \fBcheckout\fP command, or a source component and
source directory are created with the \fBcvc newpkg\fP subcommand.
Then the contents of the source directory are modified with other
subcommands, and the changes to the source component are then
committed to the repository with the \fBcvc commit\fP subcommand.
Only the \fBcvc commit\fP and \fBcvc sign\fP commands modify the repository; 
the rest of the commands either query the repository for information about a 
source package or schedule a change to be applied to the repository by the next 
\fBcvc commit\fP command.
.PP
The default branch on which each of these commands operates
is specified by the \fBbuildLabel\fP configuration entry
.PP
.SH FILE OPERATIONS
cvc commands that are used to manage files in the source directory.
Repository interactive commands are located in REPOSITORY ACCESS.

.TP 4
.B add \fIfile...\fP
Adds all the files listed on the command line to the source
component. In extremely rare cases, adding files may prompt to specify the
file type with a \fB\-\-text\fP or \fB\-\-binary\fP argument to add.
.TP 4
.B merge [\fI<revision>\fP]
Run from a source directory containing a shadow, this merges changes made
on the parent branch since the last \fBshadow\fP or \fBmerge\fP command
into the shadow.

If <revision> is specified, changes made to the upstream branch up to that 
revision will be made.  Revision may be specified as either as the upstream version or the <upstream version>-<source count>.  For convenience when cutting and pasting, a full version is accepted, but the full version must be on correct parent branch.
.TP 4
.B refresh [\fI<fileglob>...\fP]
This source command reloads URL-referenced autosource files specified by 
\fI<fileglob>\fP arguments from the upstream source at the next \fBcook\fP 
command usage. The \fI<fileglob>\fP arguments are globs matched only against 
the basename of the file, and not the entire URL. If refresh is invoked 
without \fI<fileglob>\fP arguments, all autosource files will be reloaded.
.TP 4
.B remove \fI<filename>...\fP
Unlike \(lq\fBcvs remove\fP\(rq, \fBcvc remove\fP both removes
the file from the filesystem and marks it to be removed from the next
version checked into the repository at the next \fBcvc commit\fP.
Synonyms: \fBrm\fP
.TP 4
.B rename \fI<oldname> <newname>\fP
Renames the file \fI<oldname>\fP to \fI<newname>\fP on the filesystem,
and marks it to be removed from the repository at the next
\fBcvc commit\fP.
.TP 4
.B revert [\fI<filename>...\fP]
Any changes made to local files are reverted. If one or more filenames
are passed as arguments, only the changes made to those files are reverted.
.TP 4
.B set \fI<filename>...>/fP \fI[--text]\fP \fI[--binary]\fP
Binary and text files in source components are handled slightly differently
with diff/patch style merging being used for text files. This command lets
the user switch a file between binary and text modes.
.TP 4
.B update [\fI<dir>=<version>\fP]*
Updates one or more directories, merging changes when possible.  When no
directory is specified, the current directory is updated to the latest
version.  Specifying one or more directories updates each directory to its
latest version.  To update to a version other than the latest, specify the
version alone (to update the current directory) or with each directory
listed.
Synonyms: \fBup\fP
.SH INFORMATION DISPLAY
Commands that display cvc configuration and configuration files.  These commands
may be used interactively to set configuration in some instances as well.

.TP 4
.B annotate \fI<file>\fP
Show the version, date, and author of each of the lines in \fI<file>.
\fI<file> must be a file in a conary source dir.
.TP 4
.B config \fI<option>\fP
Display the current configuration.
.RS 4
.TP 4
.B \-\-build-label=LABEL
Use build label LABEL as default search location
.TP 4
.B \-\-config="KEY VALUE"
Set config KEY to VALUE
Synonyms: \fB \-c "KEY VALUE"\fP
.TP 4
.B \-\-config-file=PATH
Read PATH configuration file
.TP 4
.B \-\-context=CONTEXT
Set the current context
.TP 4
.B \-\-debug=DEBUG
Print helpful debugging output (use --debug=all for internal debug info)
.TP 4
.B \-\-flavors
Display configuration with complete flavors where applicable
.TP 4
.B \-\-full-versions
Always display complete version strings
.TP 4
.B \-\-install-label=LABEL
Set the installLabel
.TP 4
.B \-\-interactive
ask questions before performing actions that change system or repository state
.TP 4
.B \-\-pubring=PUBRING
Sets the public key to PUBRING
.TP 4
.B \-\-quiet
Do not display extra information when displaying configuration
.TP 4
.B \-\-root=ROOT
Use the conary database at ROOT.
Synonyms: \fB \-r ROOT\fP
.TP 4
.B \-\-skip-default-config
Do not read default configuration
.TP 4
.B \-\-verbose=VERBOSE
Displays more verbose output of configuration
.TP 4
.B \-\-show-contexts
Display contexts as well as current configuration
.TP 4 
.B \-\-show-files
Shows files as well as the current configuration
.TP 4
.B \-\-show-passwords
Do not mask passwords when displaying configuration
.RE
.TP 4
.B diff
Show (in a slightly extended unified diff format) the changes that
have been made in the current source directory since the last
\fBcvc commit\fP
(or, if no commit, since the source component was checked out). If an
error occurs, diff returns a value of 2. If there are differences
in the local directory, 1 is returned. If no differences are found, 0
is returned (this convention is consistent with \fBdiff\fR(1).
.TP 4
.B explain
Displays the Conary API Documentation associated with a recipe or action
within a recipe.  For example, \fBcvc explain addSource\fP will display
information about using \fBaddSource\fP in a recipe.
\fBcvc explain PackageRecipe\fP will display information about
\fBPackageRecipe\fP and list available actions.
.TP 4
.B factory [\fI<factory>\fP]
When used without any arguments, displays the factory used by the current
source directory, or \fB(none)\fR if no factory is used. If a factory is
passed as an argument, the current source component is changed to use that
factory.
.TP 4
.B help
Displays cvc help file.  Can be added to individual commands as an 
option.  For example, \fBcvc cook help\fP will display help information
for the \fBcook\fP command.
.TP 4
.B log [\fI<branch>\fP]
Prints the log messages for the branch specified by \fBbuildLabel\fP,
or for \fI<branch>\fP if specified.
.TP 4
.B rdiff \fI<name> <oldver> <newver>\fP
This source command operates only on the repository, not on a
source directory.  It creates a diff between two versions of
a source trove from the repository.
.TP 4
.B status
This command displays the status of changed files in the working directory.
Synonyms:  \fBstat\fP, \fBst\fP

.nf
The following are possible file status codes returned by \fBstatus\fP:
A = added
M = modified
R = removed
? = not tracked
.fi
.SH KEY MANAGEMENT
Commands used for client-server public key interaction

.TP 4
.B addkey [\fI<user>\fP]
Reads the ASCII armored public key from stdin and adds it as a key for
the specified user.  If no user is specified, the default user for that
server is used.
.TP 4
.B getkey [\fI<keyid>\fP]
Displays the ASCII armored public key for the given keyId (a full fingerprint
may also be used).
.TP 4
.B listkeys [\fI<user>\fP]
Displays the keyIds for the public keys stored on a server for a user
user. If no user is specified, the default user for that server is used.
.SH RECIPE BUILDING
.TP 4
.B cook [\fI<args>\fP]
.RS 4
.TP 4
.B \-\-prep
The source code is unpacked, but is not built.
.TP 4
.B \-\-download
The source  code  is downloaded into your lookaside, but is not 
unpacked or built.
.TP 4
.B \-\-resume=<linenums>\fP 
Conary will cook the specified line numbers of the recipe.  The format 
of <linenums> is any number of pairs of n or n:m separated by commas, 
where n and m are line numbers in the recipe.  If the initial line 
number in a pair is left off, leaving :m, conary will begin cooking 
from the beginning of the file.  If the final line number is left off, 
leaving n:, conary will cook until the end of the file, run all the 
policy, and create a changeset.  A \fB\-\-resume=n\fP without a colon is 
equivalent to n:n, if there are other ranges given to \-\-resume,
or n: if it is the only argument given to \-\-resume.  All resume line 
numbers must be provided in increasing order.

If \fB\-\-resume\fP is specified with no parameter,
the recipe will be recooked from the line of last failure.  
If \fB\-\-resume=policy\fP is specified, the policy will be rechecked 
from the last build; this only works if the destdir still exists,
either because a policy error occurred during the previous build
or because the \fB\-\-no-clean\fP option was provided to the previous
\fBcook\fP command.

Example: cvc cook \-\-resume=5:10,15,35:

Note that the \fB\-\-resume\fP option may
be used only with local recipe files, not source components being
built directly from a repository. 
.TP 4
.B \-\-flavor 
Can be used to override the default Use flags, 
package-specific flags, and arch Flags  for this instantiation.   
The format is exactly as it is shown in conary config flavors.  The 
flavor specified here overrides flavors specified in the buildFlavor
config option.
.TP 4
.B \-\-macro
Assigns the given string value to <macro>.  
The value given overrides any attempt to reset the value later in the 
recipe.  The macro and its boolean value must be enclosed in quotes. Macros
defined using \-\-macro override macros defined in a file specified by
\-\-macros.  If \fB\-\-macros\fP is specified, it names 
a file (containing one macro definition per line) to apply to the 
recipe macro set. Macro files can also contain comments starting 
with "#" and blank lines. 
.TP 4
.B \-\-no-clean 
Does not clean up the build directories after the build is complete, 
even if the build is successful.  This can be useful for rerunning 
policy for a complete build using \-\-resume, or for examining the 
completed build directories.
.TP 4
.B \-\-ignore-buildreqs 
Prevents conary from raising an error if a component or package listed 
as a build requirement for the package is not installed on the build 
system. (also available as the \-\-no-deps option)
.TP 4
.B \-\-show-buildreqs 
Prints the complete list of build dependencies, one dependency per 
line.  This includes dependencies not explicitly specified in the 
recipe but instead inherited from superclasses.  No other build 
actions are performed.
.TP 4
.B \-\-signature\-key 
The OpenPGP key in the local keyring with that fingerprint will be used 
to create trove signatures for all troves created during the cook. 
The repository must recognize the OpenPGP key that made the trove signature 
or the respective troves will be rejected. If \-\-signature\-key None 
is specified, generation of trove signatures will be disabled.
.IP
If the item to be cooked ends in \fB.recipe\fP, then
it is a recipe file and the package will be cooked from the
filesystem.  Otherwise, it must name a repository component and
the package will be cooked from the repository.  If a version is 
specified, it must be a source version for that component.
.IP
Conary caches already-downloaded sources aggresively, both on the
local system and in the repository.  To refresh either cache, see
the \fBrefresh\fP command.
.RE
.SH REPOSITORY ACCESS
Explain Repository Access Here...
.TP 4
.B checkout [\-\-dir \fI<dir>\fP] \fI<trove\fP[=\fIversion\fP]>\fP
Check the \fI<trove>\fB:source\fR component out of the repository
and put it in directory \fI<dir>\fP if specified, and directory
\fI<trove>\fP otherwise.  Fetches the most recent version
specified by \fBbuildLabel\fP unless \fI<version>\fP is specified.
Multiple source troves may be specified if the \-\-dir option is
not used.
Synonyms: \fBco\fP
.TP 4
.B clone newclone [\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Clones a trove from one repository to another. This is similar to shadowing in
that it creates a new trove with information from another.
Unlike shadowing, \fBnewclone\fP must be a full branch name. See the
\fBExamples\fP section for more information.
.RS 4
.TP
.B \-\-with-sources
Automatically clone the source for every package you are cloning.  So, for example, if you are cloning package foo from /localhost@rpl:1 to /localhost@rpl:conary, foo:source would be cloned as well if necessary.
.TP
.B \-\-full-recurse
For any group included in the clone operation, clone every package and subgroup included in that group.  (Note: cvc automatically clones any subgroups that were created from the same source component - there is no way to disable this.  Similarly, cvc automatically clones all components in a package when the package is selected for cloning.  This is why this option is called full-recurse instead of just recurse.
.TP
.B \-\-info, \-i
Determine the packages and groups that would be created by the clone and display that information, without actually cloning.
.TP 4
.B \-\-message MESSAGE
Allows you to specify the message to be given on for source components.  If several source components are being cloned at the same time, the same message will be used for all of them if specified here.
.TP
.B \-\-skip-build-info
Normally, cvc tried to rewrite any build information stored with the trove, such as what build requirements were used to build it, from the source branch to the target branch if necessary.  If this is not possible, cvc will exit with an error.  If this flag is given, cvc does not try to rewrite build information.
.TP
.B \-\-test
Go through the entire process of creating the clone changeset, but do not commit it to the repository.
.RE
.TP 4
.B commit [\-\-message|\-m \fI<message>\fP] [\-\-log\-file \fI<file>\fP]\fP
Different from \fBconary commit\fP, \fBcvc commit\fP
commits all the changes in the source directory to the repository. 
It will ask for a changelog message unless one is passed on the
command line with \fB\-\-message\fP. Specify a changelog message file with
\fB\-\-log\-file\fP \fI<file>\fP or use \fB\-\-log\-file -\fP to read the
changelog message from standard input.  The \fB\-\-log\-file\fP and
\fB\-\-message\fP arguments are mutually exclusive.

When \fBcvc\fP requests changelog message input, it invokes the editor specified
by the EDITOR environment variable or \fB/bin/vi\fP if EDITOR is unset. If the
editor cannot be executed, you will be prompted to enter the changelog message 
into the command line directly.  Enter the message lines into the command line, 
and terminate the message with a single period character on a line to finish.
Pressing CTRL-D (EOF) will cancel both the message input and commit.

Synonyms: \fBci\fP
.TP 4
.B promote [\fIpackage/groupname\fP[=\fIversion\fP][\fI<flavor>\fP]]+ [\fIfromLoc\fP--\fItoLoc\fP]+
Clones (copies) a set of packages from one set of labels to another.

Clones a trove from one repository to another. This is similar to shadowing in
that it creates a new trove with information from another. However, unlike
shadowing, cloning will not create a new label on the target branch and it is
not possible to merge changes (see "merge" later in this document) with clone.

fromLoc and toLoc can be one of the following forms:
<branch> - /conary.rpath.com@rpl:devel//1, e.g.
<label> - conary.rpath.com@rpl:devel, e.g.
<partial label> - @rpl:devel, :devel, e.g.

If the partial label is used, the missing parts of the label are filled in 
as follows: fromLoc uses the current buildLabel to fill in its missing components.  ToLoc uses the fromLoc to fill in the missing parts.  So, for example, if the buildLabel were conary.rpath.com@rpl:1, then :1--:2 would promot troves from conary.rpath.com@rpl:1 to conary.rpath.com@rpl:2, where raa.rpath.org@rpl:branch--@fl:1 would promote troves from raa.rpath.org@rpl:branch to raa.rpath.org@fl:1.

If a group is specified, then the group will be searched through for packages that start on a fromLoc, and all such packages will be cloned to the matching
toLoc.  If a package is specified and it matches a from label, then it will be cloned to the matching toLoc.

Sources are always cloned with binaries.

There are limits to the promotes one can make - one can clone between siblings - from /A//B to /A//C, for example, or uphill to parents - from /A//B to /A, or to siblings of parents - from /A//B/C to /A//D, or from /A//B//C to /D. One cannot clone from branch /A//B to /C//D, because there is no relationship between the parents of these two branches, /A != /C.  All promotes other than sibling promotes must be specified via branches.
.RS 4
.TP 4
.B \-\-all-flavors (deprecated)
Clone all flavors for the latest versions of the specified troves.  Now on by default.
.TP 4
.B \-\-without-sources
Do not automatically clone the source for every package you are cloning.  This 
can be useful, for example, if the package you are cloning is a shadowed binary and the source is only available on the parent branch.
.TP
.B \-\-info, \-i
Determine the packages and groups that would be created by the clone and display that information, without actually cloning.
.TP 4
.B \-\-message MESSAGE
Allows you to specify the message to be given for source components.  If several source components are being cloned at the same time, the same message will be used for all of them if specified here.
.TP
.B \-\-skip-build-info
Normally, cvc tried to rewrite any build information stored with the trove, such as what build requirements were used to build it, from the source branch to the target branch if necessary.  If this is not possible, cvc will exit with an error.  If this flag is given, cvc does not try to rewrite build information.
.TP
.B \-\-test
Go through the entire process of creating the clone changeset, but do not commit it to the repository.
.TP
.B \-\-exact\-flavors
Only promote exactly the packages with the flavors you specify, without merging in your system flavor.
.RE
.TP
.B shadow \fInewshadow [\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Creates a new shadow (identified by the label \fInewshadow\fP) in the
repository, relative to the shadow specified in \fIversion\fP.
By default, if a binary trove is given, the binary and its source are
shadowed.  If \fB-\-source-only\fR is specified, the source
trove for each binary trove is shadowed, instead of the binary trove. Note that
if called without a specific version, this will pull the source component from
the most recently cooked binary. To get the most recent source version, use
yourpackage:source as the trove. If \fB-\-binary-only\fR is specified, no
source troves are shadowed.
.TP
.B sign [\fR\-\-signature\-key <fingerprint>\fB] 
[\fItrovename\fP[=\fIversion\fP][\fI<flavor>\fP]]*
Signs the specified troves in their respective repositories. If 
\fB-\-signature\-key\fR is specified, it will override all signatureKey and 
signatureKeyMap settings specified in config files. The repositories affected 
must recognize the OpenPGP key(s) that made the trove signature(s) or the 
respective signatures will be rejected.
.TP
.B derive [\fIpackagename\fP[=\fIversion\fP][\fI<flavor>\fP]]
Creates a derived package in one step. This is an aggregation function to
shadow, check out and patch a package in one step. derive performs a
source\-only shadow of \fI<package>:source\fR to your \fIbuildLabel\fR.
.RS 4
.TP
.B \-\-dir
Check the \fI<newshadow>:source\fR component out of the repository
and put it in directory \fI<dir>\fP instead of directory.
Only one \fI<trove>\fP may be specified if this flag is used.
\fI<trove>\fP.
.TP
.B \-\-extract\
Check the \fI<trove>\fP package out of the repository and put it in _ROOT_.
Also copy the _ROOT_ to _OLD_ROOT_ to ease patch creation.  \fI<Trove>\fP
must be a binary trove if this flag is used.
.TP
.B \-\-info, \-i
Determine the packages and groups that would be created by the shadow and display that information, without actually shadowing.
.TP
.B \-\-target <label>
Set the label to create the shadow and derived package on.  Defaults to 
buildLabel.
.RE
.RE
.\"
.\"
.\"
.SS Trove Signatures
.TP 4
.B Discussion
.br
cvc is able to generate trove signatures. in all cases <fingerprint> refers to 
the fingerprint of an OpenPGP key from the local keyring. (generally ~/.gnupg). 
When a signature is generated and submitted to a repository, the repository 
verifies the signature. If the signature is bad, or the repository doesn't know 
about the OpenPGP Key that made that signature, the repository will remain 
unchanged. Aka, a signature failure on cook will result in the trove not being 
uploaded to the repository, whereas a failure on sign will not affect the trove 
on the repository, whether or not that trove already had signatures associated 
with it. The OpenPGP key that will be used can be specified on the command line 
or in a config file. see conary(1) for a discussion on the appropriate settings.
.TP 4
.B Fingerprints
.br
Fingerprints can have spaces in them. Valid OpenPGP key ids can also be used in
place of the full fingerprint. For example:
.br
\ \ \ \ AAFF BBCC DDEE 1122
.br
\ \ \ \ 1234 5678 9ABC DEF0 1212 3344 AAFF BBCC DDEE 1122
.br
\ \ \ \ 123456789ABCDEF012123344AAFFBBCCDDEE1122
.br
All refer to the exact same OpenPGP Key
.RE
.SH SETUP COMMANDS
Commands used in the creation of new contexts and packages for software creation.
.TP 4
.B newpkg [\fI--template <recipeTemplate>\fP] [\fI--factory <factoryName>\fP] \fI<name\fP[=\fIlabel\fP]>\fP
Sets up a directory on the local filesystem that can be used to create
the initial recipe for a package.
.TP 4
.B context [name] [\-\-show-passwords]\fP
When not passed a name, displays information about the current context.
See \fIman conary\fP for more information on contexts, and the show-passwords
option.
.IP
When passed a name, sets the context to <name> for the current directory.
That context will then be used for all conary
operations in the directory.  The commands \fBcvc checkout\fP and 
\fBcvc newpkg\fP will transfer the current context into their newly 
created directories.
.\"
.\"
.\"
.SH EXAMPLES
.TP 4
.B Shadowing
cvc shadow conary.example.com@rpl:example-foo foo:source=conary.rpath.com@rpl:devel
.br
This creates a shadow in the conary.example.com repository of the
foo:source trove, based on the version of foo in the main rPath repository.
You can now check out this shadow and work on it:
.br
cvc checkout --build-label conary.example.com@rpl:example-foo foo
.br
Committing changes to that copy of foo:source will go into the
conary.example.com repository on the rpl:example-foo shadow.
.P
.TP 4
.B Cloning
cvc clone /ignoreme.rpath.org@rpl:devel/ pork:source=contrib.rpath.org@rpl:devel
.br
This creates a clone of pork:source on ignoreme.rpath.org@rpl:devel
.P
More examples coming soon to a man page near you!
.\"
.\"
.\"
.SH BUGS
The return codes from cvc are inconsistent at best. It tries hard to return
success even if there is failure, though it occasionally returns error codes.
Do not depend on the return codes from cvc unless the cvc command you are
using has its return values documented in this man page.

This behavior is not a bug. There are no bugs, only undocumented features.  You
can report undocumented features at http://issues.rpath.com/
.\"
.\"
.\"
.SH "SEE ALSO"
conary(1)
