#
# Copyright (c) 2010 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadInstalled('python')
class Conary(CPackageRecipe, Python.VersionMixIn):
    name = 'conary'
    version = '2.1.20'

    buildRequires = [ ]

    if not Use.bootstrap:
        buildRequires.extend(['kid:runtime', 'kid:python', ])
    else:
        keepBuildReqs = ['glibc:devel', 'userspace-kernel-headers:devel']
        buildRequires = ['binutils[!cross]', 'gcc[!cross]']
        crossRequires = 'glibc:devel', 'userspace-kernel-headers:devel'

    buildRequires.extend([ 'python:devel', 'python:lib', 'elementtree:python',
        'libelf-lgpl:devel', 'pycrypto:python',
        'openssl:devel', 'zlib:devel', ])

    def setup(r):
        r.setDefaultPython()
        r.macros.sitepkgs = '%s/%%(name)s' % Python.sitepkgs
        r.macros.sqlitever = '3.6.18'
        r.macros.sqlite = 'sqlite-%(sqlitever)s'
        r.addMercurialSnapshot('http://hg.rpath.com/conary/')
        # r.addArchive('ftp://download.rpath.com/conary/')
        r.addPatch('rpl2-build-flags.patch')

        # Use embedded sqlite
        r.addArchive('http://sqlite.org/sqlite-amalgamation-%(sqlitever)s.tar.gz',
            dir='%(maindir)s/conary/pysqlite3/')


        # %(x11prefix)s deprecated in rPL2 (CNY-1205)
        r.Replace('^x11prefix.*$', 'x11prefix = \'%(exec_prefix)s\'',
                  'config/macros')

        conf = ''
        if r.isCrossCompiling():
            r.macros.pyver = Python.majversion
            # distutils needs LDSHARED to get its linking correct.
            # PYVERSION and PYINCLUDE tell conary to find python in the
            # sysroot instead of trusting the installed python for info.
            conf = ' PYVERSION=%(pyver)s PYINCLUDE=%(sysroot)s/%(includedir)s/python%(pyver)s LDSHARED="%(cc)s -pthread -shared"'

            r.Replace('setup.py build', 'setup.py build_py build_ext -I%(sysroot)s/%(includedir)s/python%(pyver)s', 'conary/pysqlite3/Makefile')
            r.macros.cflags += ' -I%(sysroot)s/%(includedir)s/libelf-lgpl '

            # Makefiles need to know where to find include files
            r.Environment('SYSROOT', '%(sysroot)s')
        if Use.bootstrap:
            preMake='NO_KID=1'
        else:
            preMake = ''

        # Build internal sqlite library for Conary to use
        r.Configure('--disable-shared --enable-threadsafe',
                    dir='conary/pysqlite3/%(sqlite)s')
        r.Make('CFLAGS="%(cflags)s -fPIC"', dir='conary/pysqlite3/%(sqlite)s')

        r.Make('libdir=%(libdir)s' + conf, preMake=preMake)
        r.MakeInstall('libdir=%(libdir)s', preMake=preMake)
        r.Create('%(sysconfdir)s/conaryrc',
                 contents='includeConfigFile %(sysconfdir)s/conary/config.d/*\n')
        r.MakeDirs('%(sysconfdir)s/conary/config.d/')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/conary/config.d')

        r.MakeDirs('%(localstatedir)s/conary/emerge')
        r.Ownership('emerge', 'emerge', '%(localstatedir)s/conary/emerge')
        r.ExcludeDirectories(exceptions='%(localstatedir)s/conary/emerge')

        r.Create('%(sysconfdir)s/logrotate.d/conary',
                 contents='\n'.join(('/var/log/conary {',
                                     '    missingok',
                                     '    notifempty',
                                     '    size 10M',
                                     '}',
                                     )))

        # FIXME: refactor commonly used build code into new generic modules
        r.PackageSpec('conary',
                      '%(libdir)s/.*/conary/build/__init__.py.*',
                      '%(libdir)s/.*/conary/build/errors.py.*',
                      '%(libdir)s/.*/conary/build/filter.py.*',
                      '%(libdir)s/.*/conary/build/nextversion.py.*',
                      '%(libdir)s/.*/conary/build/tags.py.*',
                      '%(libdir)s/.*/conary/build/use.py.*')
        r.PackageSpec('conary-repository',
                      '%(libdir)s/.*/conary/repository/netrepos/',
                      r'%(libdir)s/.*/conary/repository/shimclient\.py.*',
                      '%(libdir)s/.*/conary/web/',
                      '%(libdir)s/.*/conary/server/',
                      '%(datadir)s/conary/migration/',
                      '%(datadir)s/conary/logcat')
        r.PackageSpec('conary-build',
                      '%(bindir)s/cvc(|desc)',
                      r'%(libdir)s/.*/conary/cvc(|desc)\.py.*',
                      r'%(libdir)s/.*/conary/cmds/(cvccmd|clone|branch)\.py.*',
                      '%(mandir)s/.*/cvc.*',
                      '%(libdir)s/.*/conary/build/',
                      r'%(libdir)s/.*/conary/(checkin|clone|branch)\.py.*',
                      '%(libdir)s/conary/',
                      '%(libexecdir)s/conary/perlreqs.pl',
                      '%(localstatedir)s/conary/emerge', #/var/conary for emerge
                      '%(sysconfdir)s/conary/mirrors/',
                      )
        # keyrings are binary, and we are providing the initial version
        # only
        r.InitialContents('%(sysconfdir)s/conary/.*gpg')

        # Ensure that we get the right version of python when migrating
        # from rPL1-based to rPL2-based systems; this is critical when
        # any part of the update uses SSL. (RPL-3043)
        r.Requires('python:lib(%(targetarch)s)', '%(bindir)s/conary')

        r.Requires('conary-policy:lib',
                   '%(libdir)s/.*/conary/build/packagepolicy.py')

        # Conary pieces need to work together with the same version
        r.ComponentProvides('%(version)s')
        r.ComponentProvides('group-scripts')
        r.Requires('conary:runtime(%(version)s)',
                   '%(libdir)s/.*/conary/cvc.py')
        r.Requires('conary:runtime(%(version)s)',
                   '%(libdir)s/.*/conary/server/server.py')
        r.Requires('conary:python(%(version)s)',
                   '%(bindir)s/conary')

        r.UtilizeUser('emerge', '%(libdir)s/.*/conary/cvc.py')
        # emerge really requires all of conary-build, so if
        # it moves to cvc we can remove this whiteout
        r.Requires(exceptDeps=('(%(bindir)s/conary|conarycmd.py)',
                               'python: conary.build.cook'))
        # CNY-3314 -- conary.commit should not depend on conary.cvc
        r.Requires(exceptDeps=('.*/conary/commit\.py.*$',
                               'python: conary.cvc'))

        # This is only required when called from conary-repository,
        # which contains the dependency
        r.Requires(exceptDeps=('.*/conary/local/deptable\.py.*$',
                               'python: conary.repository.*'))

        # keyutils should not be a dep as it is included conditionally
        r.Requires(exceptDeps=('.*/conary/callbacks.py.*$',
                               'python: keyutils.*'))

        # This exception needs to be here in order to bootstrap perl;
        # if we don't have perl, we won't be using this file or those
        # modules anyway.
        r.Requires(exceptions='%(libexecdir)s/conary/perlreqs.pl')
        r.Requires(exceptDeps='perl:.*')
        # We use embedded epdb if epdb is not installed
        r.Requires(exceptDeps='python: epdb')
        # Server works in standalone mode without mod_python
        r.Requires(exceptDeps='python: mod_python.*')

        # MySQL is optional.
        r.Requires(exceptDeps='python: MySQLdb.*')
        # postgresql is also optional
        r.Requires(exceptDeps='python: pgsql')

        r.AutoDoc('EULA_Conary_Dual_License.txt')

        # Conary no longer adds python requires when building the bootstrap
        # flavor of packages.
        if Use.bootstrap:
            r.Requires('python:lib', '%(sitepkgs)s/.*')
            r.Requires('pycrypto:python', '%(sitepkgs)s/lib/sha1helper.py')
            r.Requires('elementtree:python', '%(sitepkgs)s/build/packagepolicy.py')

        r.macros.pybin = "/usr/bin/python%(pyver)s"
        versionMap = [ ('/usr/bin/python%s' % x, '%(pybin)s'
            for x in [ '', '2.4', '2.5', '2.6' ] ]
        r.NormalizePythonInterpreterVersion(versionMap=versionMap)
