#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


class Conary(CPackageRecipe):
    name = 'conary'
    version = ''

    clearBuildRequires('xz:rpm', 'unzip:rpm')
    if Use.bootstrap._get():
        if Use.bootstrap: pass
    # Built in an EL environment
    buildRequires = [
        'openssl-devel:rpm',
        'zlib-devel:rpm',
        'bzip2-devel:rpm'
    ]
    buildRequires.extend([
        'python-conary:devel', # depends on :lib, :devellib, and :runtime
        'libelf-lgpl:devel',
        'm2crypto-conary:python',
    ])

    def setup(r):
        r.macros.sqlitever = '3070800'
        r.macros.sqlite = 'sqlite-autoconf-%(sqlitever)s'

        r.macros.pyver = '2.6'
        r.macros.pyroot = '/usr/conary'
        # This is needed due to the way python dep policy currently works
        r.macros.bindir = '%(pyroot)s/bin'
        r.macros.oldbindir = '/usr/bin'
        r.macros.pylib = '%(pyroot)s/%(lib)s'
        r.macros.pybin = '%(bindir)s/python%(pyver)s'
        r.macros.sitepkgs = '%(pylib)s/python%(pyver)s/site-packages'
        r.Environment('PATH', '%(bindir)s:/bin:/sbin:/usr/bin:/usr/sbin')

        r.addArchive('ftp://download.rpath.com/conary/')
        # r.addMercurialSnapshot('http://hg.rpath.com/conary')
        r.addPatch('el5-build-flags.patch')

        ### Build internal sqlite library for Conary to use
        r.addArchive('http://sqlite.org/%(sqlite)s.tar.gz',
            dir='%(maindir)s/conary/pysqlite3/')

        # Stay backward-compatible with kernels we've already built in
        # in this platform (CNY-3518)
        r.Replace('^        self.mergeKmodSymbols = False', 
                  '        self.mergeKmodSymbols = True', 
                  'conary/build/capsulepolicy.py')

        r.Configure('--disable-shared --enable-threadsafe',
                    dir='conary/pysqlite3/%(sqlite)s')
        r.Make('CFLAGS="%(cflags)s -fPIC"', dir='conary/pysqlite3/%(sqlite)s')


        ####  Finally, actually build Conary

        # %(x11prefix)s deprecated (CNY-1205)
        r.Replace('^x11prefix.*$', 'x11prefix = \'%(exec_prefix)s\'',
                  'config/macros')

        # RPM provides debugedit on this platform
        r.Replace("debugedit           = 'debugedit'",
                  "debugedit           = '/usr/lib/rpm/debugedit'",
                  'config/macros')

        r.Make('NO_KID=1 libdir=%(libdir)s sitedir=%(sitepkgs)s'
               ' PYTHON=%(pybin)s PYVER=%(pyver)s'
               ' PYINCLUDE="%(pyroot)s/include/python%(pyver)s"'
               ' LDFLAGS="-L%(pylib)s -Wl,-rpath,%(pylib)s"')
        r.MakeInstall('NO_KID=1 libdir=%(libdir)s sitedir=%(sitepkgs)s'
                      ' PYTHON=%(pybin)s PYVER=%(pyver)s')

        # Change any #! lines to point to internal python interpreter
        r.NormalizePythonInterpreterVersion(
            versionMap=(('/usr/bin/python', '%(pybin)s'),
                        ('/usr/bin/python2.4', '%(pybin)s'),
                        ('/usr/bin/python2.5', '%(pybin)s'),
                        ('/usr/bin/python2.6', '%(pybin)s')))

        r.Create('%(sysconfdir)s/conaryrc',
                 contents='includeConfigFile %(sysconfdir)s/conary/config.d/*\n')
        r.MakeDirs('%(sysconfdir)s/conary/config.d/')
        r.ExcludeDirectories(exceptions=[
            '%(sysconfdir)s/conary/config.d',
            '%(sysconfdir)s/conary-repos/vhosts',
            ])

        r.Create('%(sysconfdir)s/logrotate.d/conary',
                 contents='\n'.join(('/var/log/conary {',
                                     '    missingok',
                                     '    notifempty',
                                     '    size 10M',
                                     '}',
                                     )))

        r.ComponentSpec('python', '.*/site-packages/.*')
        r.PackageSpec('conary',
                      '%(sitepkgs)s/conary/build/__init__.py.*',
                      '%(sitepkgs)s/conary/build/errors.py.*',
                      '%(sitepkgs)s/conary/build/filter.py.*',
                      '%(sitepkgs)s/conary/build/nextversion.py.*',
                      '%(sitepkgs)s/conary/build/tags.py.*',
                      '%(sitepkgs)s/conary/build/use.py.*')
        r.PackageSpec('conary-repository',
                      '%(sitepkgs)s/conary/repository/netrepos/',
                      r'%(sitepkgs)s/conary/repository/shimclient\.py.*',
                      '%(sitepkgs)s/conary/web/',
                      '%(sitepkgs)s/conary/server/',
                      '%(datadir)s/conary/migration/',
                      '%(datadir)s/conary/logcat',
                      '%(sysconfdir)s/conary-repos/',
                      '%(sysconfdir)s/sysconfig/conary-repos',
                      )
        r.PackageSpec('conary-build',
                      '%(oldbindir)s/cvc(|desc)',
                      r'%(sitepkgs)s/conary/cvc(|desc)\.py.*',
                      r'%(sitepkgs)s/conary/cmds/(cvccmd|clone|branch)\.py.*',
                      '%(mandir)s/.*/cvc.*',
                      '%(sitepkgs)s/conary/build/',
                      r'%(sitepkgs)s/conary/(checkin|clone|branch)\.py.*',
                      '%(libdir)s/conary/',
                      '%(libexecdir)s/conary/perlreqs.pl',
                      '%(localstatedir)s/conary/emerge', #/var/conary for emerge
                      '%(sysconfdir)s/conary/mirrors/',
                      )
        # keyrings are binary, and we are providing the initial version only
        r.InitialContents('%(sysconfdir)s/conary/.*gpg')

        r.Requires('conary-policy:lib',
                   '%(sitepkgs)s/conary/build/packagepolicy.py')

        # Conary pieces need to work together with the same version
        r.ComponentProvides('%(version)s')
        r.ComponentProvides('group-scripts')
        r.Requires('conary:runtime(%(version)s)',
                   '%(sitepkgs)s/conary/cvc.py')
        r.Requires('conary:runtime(%(version)s)',
                   '%(sitepkgs)s/conary/server/server.py')
        r.Requires('conary:python(%(version)s)',
                   '%(oldbindir)s/conary')

        # emerge is not supported on encapsulated platforms
        #r.UtilizeUser('emerge', '%(sitepkgs)s/conary/cvc.py')
        # emerge really requires all of conary-build, so if
        # it moves to cvc we can remove this whiteout
        r.Requires(exceptDeps=('(%(bindir)s/conary|conarycmd.py)',
                               'python: conary.build.cook'))
        # CNY-3314 -- conary.commit should not depend on conary.cvc
        r.Requires(exceptDeps=('.*/conary/commit\.py.*$',
                               'python: conary.cvc'))


        # This exception needs to be here in order to bootstrap perl;
        # if we don't have perl, we won't be using this file or those
        # modules anyway.
        r.Requires(exceptions='%(libexecdir)s/conary/perlreqs.pl')
        r.Requires(exceptDeps='perl:.*')

        # .py files without #!
        r.Requires(exceptions=r'%(sysconfdir)s/conary/components/')
        # We use an internal python with Conary
        r.Requires(pythonFlagNamespace='conary')
        # We can't go back and change deps on rpm:python, so white it out
        r.Requires(exceptDeps=r'python\:\ rpm')
        r.Requires('rpm:python', '%(sitepkgs)s/conary/local/rpmcapsule.py')
        r.ComponentRequires({'python': set(('runtime',))})

        r.AutoDoc('EULA_Conary_Dual_License.txt')

        r.RemoveNonPackageFiles(r'/.*\.pyo') # not needed in this context
        r.Remove('%(oldbindir)s/rpm2cpio') # conflict with the platform
        r.Remove('%(oldbindir)s/dbsh') # might conflict, not needed in package

        # All trove dependencies even in the bootstrap build are correct
        try:
            del r.RemoveBootstrapTroveDependencies
        except KeyError:
            # In a bootstrapping context, this recipe may be loaded in
            # a context that does not define the
            # RemoveBootstrapTroveDependencies policy
            pass
