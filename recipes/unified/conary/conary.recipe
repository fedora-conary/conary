#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


class Conary(CPackageRecipe):
    name = 'conary'
    version = '2'

    plat = 'centos'
    platver = '6'
    embedded = False
    encapsulated = True

    have_kid = True
    gpl = False
    if plat == 'rpath':
        buildRequires = [
            'elementtree:python',
            'kid:python',
            'kid:runtime',
            'libelf-lgpl:devel',
            'openssl:devel',
            'pycrypto:python',
            'python:devel',
            'zlib:devel',
            ]
        if platver == '2-py26':
            buildRequires.append('python:bin')
        if platver == '1':
            patchName = None
        else:
            patchName = 'rpl2-build-flags.patch'
    elif plat == 'centos' and not encapsulated:
        buildRequires = [
            'libelf-lgpl:devel',
            'openssl:devel',
            'pycrypto:python',
            'python:devel',
            'python-elementtree:python',
            'python:lib',
            'zlib:devel',
            ]
        have_kid = False
        patchName = 'rpl2-build-flags.patch'
    elif plat == 'centos' and encapsulated:
        buildRequires = [
            'openssl-devel:rpm',
            'zlib-devel:rpm',
            'bzip2-devel:rpm',
            ]
        if not embedded:
            # System python
            buildRequires.extend([
                'elfutils-libelf-devel:rpm',
                'm2crypto:rpm',
                'python-crypto:rpm',
                'python-devel:rpm',
                'python-kid:rpm',
                ])
            gpl = True
        else:
            # python-conary
            buildRequires.extend([
                'python-conary:devel',
                'libelf-lgpl:devel',
                'm2crypto-conary:python',
                ])
            have_kid = False
        patchName = 'el5-build-flags.patch'
    elif plat == 'sles' and encapsulated:
        assert embedded
        buildRequires = [
            'zlib-devel:rpm',

            # python-conary
            'python-conary:devel',
            'libelf-lgpl:devel',
            'm2crypto-conary:python',
            ]
        if platver.startswith('10'):
            buildRequires.extend([
                # bzip2-devel is missing, it seems
                'openssl-devel:rpm',
                ])
        else:
            buildRequires.extend([
                'libbz2-devel:rpm',
                'libopenssl-devel:rpm',
                ])
        have_kid = False
        patchName = 'sles10-build-flags.patch'
    else:
        raise RuntimeError("Wrong value for 'plat' class variable")

    def setup(r):
        r.macros.sqlitever = '3071201'
        r.macros.sqlite = 'sqlite-autoconf-%(sqlitever)s'

        if r.embedded:
            r.macros.pyroot = '/usr/conary'
        else:
            r.macros.pyroot = '/usr'
        r.macros.pybin = '%(pyroot)s/bin'
        r.macros.pylib = '%(pyroot)s/%(lib)s'
        r.macros.pyinc = '%(pyroot)s/include/python%(pyver)s'
        r.macros.python = '%(pybin)s/python%(pyver)s'
        r.macros.sitepkgs = '%(pylib)s/python%(pyver)s/site-packages'
        r.Environment('PATH', '%(pybin)s:/bin:/sbin:/usr/bin:/usr/sbin')

        #r.addArchive('ftp://download.rpath.com/conary/')
        r.addMercurialSnapshot('http://hg.rpath.com/conary')
        for patchName in [
                'el5-build-flags.patch',
                'rpl2-build-flags.patch',
                'sles10-build-flags.patch',
                ]:
            r.addPatch(patchName, use=(patchName == r.patchName))

        ### Build internal sqlite library for Conary to use
        r.addArchive('http://sqlite.org/%(sqlite)s.tar.gz',
            dir='%(maindir)s/conary/pysqlite3/')
        r.Configure('--disable-shared --enable-threadsafe',
                    dir='conary/pysqlite3/%(sqlite)s')
        r.Make('CFLAGS="%(cflags)s -fPIC"', dir='conary/pysqlite3/%(sqlite)s')

        ### Platform-specific Conary tweaks
        # %(x11prefix)s deprecated in rPL2 (CNY-1205)
        r.Replace('^x11prefix.*$', 'x11prefix = \'%(exec_prefix)s\'',
                'config/macros')
        if r.plat == 'centos':
            # Stay backward-compatible with kernels we've already built in
            # in this platform (CNY-3518)
            r.Replace('^        self.mergeKmodSymbols = False', 
                      '        self.mergeKmodSymbols = True', 
                      'conary/build/capsulepolicy.py')
            # RPM provides debugedit on this platform
            r.Replace("debugedit           = 'debugedit'",
                      "debugedit           = '/usr/lib/rpm/debugedit'",
                      'config/macros')

        ####  Finally, actually build Conary
        mkargs = (
            'LDFLAGS="%(ldflags)s -L%(pylib)s -Wl,-rpath,%(pylib)s" '
            'PYINCLUDE=%(pyinc)s '
            'PYTHON=%(python)s '
            'PYVER=%(pyver)s '

            'prefix=%(pyroot)s '
            'bindir=%(bindir)s '
            'datadir=%(datadir)s '
            )
        if not r.have_kid:
            mkargs += 'NO_KID=1 '
        if r.gpl:
            mkargs += 'libelf=-lelf '
        r.Make(mkargs, preMake='CFLAGS="%(cflags)s -fPIC" ')
        r.MakeInstall(mkargs)

        # Change any #! lines to point to the correct interpreter
        r.NormalizePythonInterpreterVersion(
            versionMap=(('/usr/bin/python', '%(python)s'),
                        ('/usr/bin/python2.4', '%(python)s'),
                        ('/usr/bin/python2.5', '%(python)s'),
                        ('/usr/bin/python2.6', '%(python)s')))

        ### Standard configuration
        r.Create('%(sysconfdir)s/conaryrc',
                 contents='includeConfigFile %(sysconfdir)s/conary/config.d/*\n')
        r.MakeDirs('%(sysconfdir)s/conary/config.d/')
        r.ExcludeDirectories(exceptions=(
            '%(sysconfdir)s/conary/config.d',
            '%(sysconfdir)s/conary-repos/vhosts',
            ))

        r.Create('%(sysconfdir)s/logrotate.d/conary',
                 contents='\n'.join(('/var/log/conary {',
                                     '    missingok',
                                     '    notifempty',
                                     '    size 10M',
                                     '}',
                                     )))

        ### Componentization
        r.ComponentSpec('python', '%(sitepkgs)s/')
        r.PackageSpec('conary',
                      '%(sitepkgs)s/conary/build/__init__.py.*',
                      '%(sitepkgs)s/conary/build/errors.py.*',
                      '%(sitepkgs)s/conary/build/filter.py.*',
                      '%(sitepkgs)s/conary/build/nextversion.py.*',
                      '%(sitepkgs)s/conary/build/tags.py.*',
                      '%(sitepkgs)s/conary/build/use.py.*')
        r.PackageSpec('conary-repository',
                      '%(sitepkgs)s/conary/repository/netrepos/',
                      r'%(sitepkgs)s/conary/repository/shimclient\.py.*',
                      '%(sitepkgs)s/conary/web/',
                      '%(sitepkgs)s/conary/server/',
                      '%(datadir)s/conary/migration/',
                      '%(datadir)s/conary/logcat',
                      '%(sysconfdir)s/conary-repos/',
                      '%(sysconfdir)s/sysconfig/conary-repos',
                      )
        r.PackageSpec('conary-build',
                      '%(bindir)s/cvc(|desc)',
                      r'%(sitepkgs)s/conary/cvc(|desc)\.py.*',
                      r'%(sitepkgs)s/conary/cmds/(cvccmd|clone|branch)\.py.*',
                      '%(mandir)s/.*/cvc.*',
                      '%(sitepkgs)s/conary/build/',
                      r'%(sitepkgs)s/conary/(checkin|clone|branch)\.py.*',
                      '%(libdir)s/conary/',
                      '%(pyroot)s/libexec/conary/perlreqs.pl',
                      '%(localstatedir)s/conary/emerge', #/var/conary for emerge
                      '%(sysconfdir)s/conary/recipeTemplates/',
                      '%(sysconfdir)s/conary/mirrors/',
                      '%(pylib)s/conary/',
                      )
        # keyrings are binary, and we are providing the initial version only
        r.InitialContents('%(sysconfdir)s/conary/.*gpg')


        ### Dependencies
        r.Requires('conary-policy:lib',
                   '%(sitepkgs)s/conary/build/packagepolicy.py')
        if r.embedded:
            r.Requires(pythonFlagNamespace='conary')
        # Conary pieces need to work together with the same version
        r.ComponentProvides('%(version)s')
        r.ComponentProvides('group-scripts')
        r.Requires('conary:python(%(version)s)',
                   '%(sitepkgs)s/conary/cvc.py')
        r.Requires('conary:python(%(version)s)',
                   '%(sitepkgs)s/conary/server/server.py')

        if not r.encapsulated:
            r.UtilizeUser('emerge', '%(sitepkgs)s/conary/cvc.py')
        # emerge really requires all of conary-build, so if
        # it moves to cvc we can remove this whiteout
        r.Requires(exceptDeps=('(%(bindir)s/conary|conarycmd.py)',
                               'python: conary.build.cook'))
        # CNY-3314 -- conary.commit should not depend on conary.cvc
        r.Requires(exceptDeps=('.*/conary/commit\.py.*$',
                               'python: conary.cvc'))

        # This exception needs to be here in order to bootstrap perl;
        # if we don't have perl, we won't be using this file or those
        # modules anyway.
        r.Requires(exceptions='%(pyroot)s/libexec/conary/perlreqs.pl')
        r.Requires(exceptDeps='perl:.*')

        # .py files without #!
        r.Requires(exceptions=r'%(sysconfdir)s/conary/components/')
        # We can't go back and change deps on rpm:python, so white it out
        r.Requires(exceptDeps=r'python\:\ rpm')
        if r.encapsulated:
            r.Requires('rpm:python', '%(sitepkgs)s/conary/local/rpmcapsule.py')
        if r.plat == 'rpath':
            # Ensure that we get the right version of python when migrating
            # from rPL1-based to rPL2-based systems; this is critical when
            # any part of the update uses SSL. (RPL-3043)
            r.Requires('python:lib(%(targetarch)s)', '%(bindir)s/conary')
        r.ComponentRequires({'python': set(('runtime',))})

        r.AutoDoc('EULA_Conary_Dual_License.txt')

        if r.encapsulated:
            r.Remove('%(bindir)s/rpm2cpio') # conflict with the platform
            r.Remove('%(bindir)s/dbsh') # might conflict, not needed in package
        elif r.plat != 'rpath':
            r.Move('%(bindir)s/rpm2cpio', '%(bindir)s/rpm2cpio-conary')
