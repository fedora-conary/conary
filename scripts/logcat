#!/usr/bin/env python2.4
# -*- mode: python -*-
#
# Copyright (c) 2006 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/cpl.php.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#
#

import os
import socket
import sys
import time

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

import optparse, tarfile

from conary.lib import util
from conary.repository.netrepos import calllog

sys.excepthook = util.genExcepthook(debug=True)

parser = optparse.OptionParser(version = '%prog 0.1')
parser.add_option("--exceptions", "-e", dest = "showExcepts", default = False,
                  action = "store_true", help = "display only entries which generated exceptions")
parser.add_option("--follow", "-f", dest = "follow", default = False,
                  action = "store_true", help = "follow updates to the log")
parser.add_option("-n", dest = "noReverseDNS", default = False,
                  action = "store_true", help = "skip reverse dns")
parser.add_option("--params", "-p", dest = "showParams", default = False,
                  action = "store_true", help = "display method parameters")
(options, args) = parser.parse_args()

if len(args) != 1:
    print >> sys.stderr, "logcat: a single file name was expected"
    sys.exit(1)

hostnameCache = {}

log = calllog.CallLogger(args[0], None, readOnly = True)
if options.follow:
    iterator = log.follow()
else:
    iterator = iter(log)

for entry in iterator:
    if not entry.remoteIp:
        hostname = "(unknown)"
    elif options.noReverseDNS:
        hostname = entry.remoteIp
    else:
        hostname = hostnameCache.get(entry.remoteIp, None)
        if hostname is None:
            try:
                hostname = socket.gethostbyaddr(entry.remoteIp)[0]
            except socket.herror:
                hostname = entry.remoteIp

            hostnameCache[entry.remoteIp] = hostname

    userInfo = []
    if entry.user is not None:
        userInfo.append("user=%s" % entry.user)
    if entry.entitlement is not None:
        userInfo.append("entitlement=%s" % entry.entitlement)

    if userInfo:
        userStr = " ".join(userInfo) + " "
    else:
        userStr = ""

    if options.showParams:
        params = str(entry.args)
    else:
        params = ""

    if entry.exceptionStr is not None:
        excpt = " " + str(entry.exceptionStr)
    elif options.showExcepts:
        continue
    else:
        excpt =""

    print "%s %s %s %s%s%s%s" % (
        hostname,
        time.strftime("%B %d %H:%M", time.localtime(entry.timeStamp)),
        entry.serverName,
        userStr,
        entry.methodName,
        params,
        excpt
    )
