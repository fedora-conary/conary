#!/usr/bin/env python2.4
# -*- mode: python -*-
#
# Copyright (c) 2006 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#
#

import cPickle
import os
import socket
import struct
import sys
import time

class ClientDumper:
    def __init__(self, options):
        self.options = options

    def dump(self, entry):
        if entry.entitlement:
            entitlement = "ENTITLEMENTS=%s" % entry.entitlement
        else:
            entitlement = ""

        if (options.showLatency and entry.latency is not None):
            latency = " runtime=%f" % entry.latency
        else:
            latency = ''

        print "%s %s %s %s%s%s" % (
            entry.url,
            entry.methodName,
            entry.args,
            entry.result,
            latency,
            entitlement
        )

class ReposDumper:

    def __init__(self, options):
        self.hostnameCache = {}
        self.options = options

    def dump(self, entry):
        if not entry.remoteIp:
            hostname = "(unknown)"
        elif options.noReverseDNS:
            hostname = entry.remoteIp
        else:
            hostname = self.hostnameCache.get(entry.remoteIp, None)
            if hostname is None:
                try:
                    hostname = socket.gethostbyaddr(entry.remoteIp)[0]
                except (socket.herror, socket.gaierror):
                    hostname = entry.remoteIp

                self.hostnameCache[entry.remoteIp] = hostname

        userInfo = []

        if (options.showLatency and entry.revision >= 5 and
                    entry.latency is not None):
            latency = " runtime=%f" % entry.latency
        else:
            latency = ''

        if entry.user is not None:
            userInfo.append("user=%s" % entry.user)
        if entry.revision > 2:
            userInfo.append("entitlements=[%s]" % 
                               ",".join(x[1] for x in entry.entitlements
                                         if x[1] is not None))
        elif entry.entClass is not None:
            userInfo.append("entclass=%s" % entry.entClass)
        if hasattr(entry, 'entKey') and entry.entKey is not None:
            userInfo.append("entkey=%s" % entry.entKey)
        if hasattr(entry, 'entitlements') and entry.entitlements is not None:
            ents = [ x for x in entry.entitlements if x[1] is not None ]
            if ents:
                userInfo.append("entitlements=%s" % entry.entitlements)

        if userInfo:
            userStr = " ".join(userInfo) + " "
        else:
            userStr = ""

        if options.showParams:
            params = str(entry.args)
        else:
            params = ""

        if entry.exceptionStr is not None:
            excpt = " EXCEPTION(%s)" % str(entry.exceptionStr)
        elif options.showExcepts:
            return
        else:
            excpt =""

        print "%s %s %s %s%s%s%s%s" % (
            hostname,
            time.strftime("%B %d %H:%M", time.localtime(entry.timeStamp)),
            entry.serverName,
            userStr,
            entry.methodName,
            params,
            latency,
            excpt
        )

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

import optparse, tarfile

from conary.lib import util
from conary.repository import calllog
from conary.repository.netrepos import reposlog

sys.excepthook = util.genExcepthook(debug=True)

parser = optparse.OptionParser(version = '%prog 0.1')
parser.add_option("--exceptions", "-e", dest = "showExcepts", default = False,
                  action = "store_true", help = "display only entries which generated exceptions")
parser.add_option("--follow", "-f", dest = "follow", default = False,
                  action = "store_true", help = "follow updates to the log")
parser.add_option("-n", dest = "noReverseDNS", default = False,
                  action = "store_true", help = "skip reverse dns")
parser.add_option("--params", "-p", dest = "showParams", default = False,
                  action = "store_true", help = "display method parameters")
parser.add_option("--times", "-t", dest = "showLatency", default = False,
                  action = "store_true", help = "display method run times")
(options, args) = parser.parse_args()

if len(args) != 1:
    print >> sys.stderr, "logcat: a single file name was expected"
    sys.exit(1)

hostnameCache = {}

# read the first bit of the first entry so we can tell if this is a
# client or repository log
f = open(args[0])
length = f.read(4)
if not length:
    # nothing to do; this breaks -f, but we don't know what we're following...
    sys.exit(0)

length = struct.unpack("!I", length)[0]
entry = f.read(length)
entryRevision = cPickle.loads(entry)[0]
clientLog = entryRevision >= calllog.CLIENT_LOG

if clientLog:
    log = calllog.ClientCallLogger(args[0], readOnly = True)
    dumper = ClientDumper(options)
else:
    log = reposlog.RepositoryCallLogger(args[0], None, readOnly = True)
    dumper = ReposDumper(options)

if options.follow:
    iterator = log.follow()
else:
    iterator = iter(log)

for entry in iterator:
    dumper.dump(entry)
