#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import optparse, os, sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

from conary import dbstore, files, streams, trove, versions
from conary.deps import deps
from conary.server import schema
from conary.repository.netrepos import netserver, trovestore

labels = []
def labelCallback(option, opt, val, parser):
    labels.append(val)

parser = optparse.OptionParser(usage = "usage: %prog <servercfg>")
parser.add_option('--fix', action = "store_true",
                  help ="fix bad signatures")
parser.add_option('--label', action = "callback", type = "string",
                  callback = labelCallback,
                  help ="label to check signatures on")
(options, args) = parser.parse_args()

fixSigs = options.fix

if len(args) != 1:
    parser.error("Not enough arguments")

cfg = netserver.ServerConfig()
cfg.read(args[0])

db = dbstore.connect(cfg.repositoryDB[1], driver = cfg.repositoryDB[0])
cu = db.cursor()
cu2 = db.cursor()

schema.setupTempTables(db)
ts = trovestore.TroveStore(db)

if labels:
    cu.execute("""
        create temporary table tmpLabels (label VARCHAR(254))
    """)

    for label in labels:
        cu.execute("insert into tmpLabels values (?)", label)

    cu.execute("""
        select item, version, flavor, instanceId from tmpLabels
           join labels using (label)
           join labelmap using (labelid)
           join nodes using (branchId, itemId)
           join instances using (itemId, versionId)
           join items using (itemid)
           join versions using (versionid)
           join flavors using (flavorid)
    """)
else:
    cu.execute("""
        select item, version, flavor, instanceId from instances
           join items using (itemid)
           join versions using (versionid)
           join flavors using (flavorid)
           where ispresent != 0
    """)

troveTups = [ ((x[0], versions.VersionFromString(x[1]),
                deps.ThawFlavor(x[2])), x[3]) for x in cu ]

sys.stdout.flush()

seen = 0
total = len(troveTups)
fixList = []
fixed = False
while seen < total:
    here = troveTups[seen:seen+500]
    for instanceId, trv in zip([ x[1] for x in here],
                                 ts.iterTroves([ x[0] for x in here ],
                                               hidden = True)):
        seen += 1
        if seen % 10 == 0:
            print "%d/%d\r" % (seen, total),
            sys.stdout.flush()
        if not trv:
            print 'MISSING', instanceId
            continue
        if not trv.verifyDigests():
            print "%s=%s[%s]" % trv.getNameVersionFlavor()
            if fixSigs:
                fixed = True
                trv.computeDigests()
                cu2.execute(
                    "update troveinfo set data=? where instanceId = ? "
                    "and infoType = 9", trv.troveInfo.sigs.freeze(),
                    instanceId)

    if fixSigs and fixed:
	db.commit()
    else:
	db.rollback()


print "%d/%d" % (total, total)
