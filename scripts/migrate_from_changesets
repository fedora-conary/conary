#!/usr/conary/bin/python
#
# Copyright (c) 2006-2011 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

"""
Script to migrate a system using a directory of changeset files as a
update source.
"""

import os
import sys

from conary.lib import util
sys.excepthook = util.genExcepthook()

from conary import conarycfg
from conary import conaryclient
from conary.lib import openpgpkey
from conary.repository import changeset
from conary.cmds.updatecmd import UpdateCallback
from conary.conaryclient.update import NoNewTrovesError

def getClient(csPath, disconnected=True):
    cfg = conarycfg.ConaryConfiguration(True)
    callback = UpdateCallback(cfg)
    client = conaryclient.ConaryClient(cfg, updateCallback=callback)

    if disconnected:
        client.disconnectRepos()

    # If this is an update ISO there should be a keyring a directory level up
    # from csPath.
    keyPath = os.path.abspath(os.path.join(csPath, '..', 'public_keys.gpg'))
    if os.path.exists(keyPath):
        keyCache = openpgpkey.getKeyCache()
        keyCacheCallback = openpgpkey.KeyringCacheCallback(keyPath, cfg)
        keyCache.setCallback(keyCacheCallback)

    return client

def getChangeSets(csPath):
    lzCache = util.LazyFileCache()
    csFiles = [ x for x in os.listdir(csPath) if x.endswith('.ccs') ]

    changesets = [
        changeset.ChangeSetFromFile(lzCache.open(os.path.join(csPath, x)))
        for x in csFiles
    ]

    return lzCache, changesets

def doUpdate(csPath):
    client = getClient(csPath)
    lzCache, changesets = getChangeSets(csPath)

    updateItems = client.fullUpdateItemList()
    applyList = [ (x[0], (None, None), (x[1], x[2]), True)
        for x in updateItems ]

    updJob, suggMap = client.updateChangeSet(
        applyList, migrate=True, fromChangesets=changesets)

    client.applyUpdateJob(updJob)

def usage(args):
    print >>sys.stderr, 'usage: %s <changeset_directory_path>' % args[0]
    return 1

def main(args):
    debug = False
    if '--debug' in args:
        args.pop(args.index('--debug'))
        debug = True

    if len(args) != 2:
        return usage(args)

    csPath = args[1]

    try:
        doUpdate(csPath)
    except NoNewTrovesError, e:
        print >>sys.stderr, '\nNo updates available.'
    except Exception, e:
        if debug: raise
        print >>sys.stderr, 'Error: %s' % str(e)
        return 1

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
