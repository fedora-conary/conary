#!/usr/bin/python2.4
# -*- mode: python -*-
#
# Copyright (c) 2006 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/cpl.php.
#
# This program is distributed in the hope that it will be useful, but
# without any waranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#
#

import os
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary.conaryclient import mirror
from conary.repository import netclient
from conary.lib import util, log
import optparse

#sys.excepthook = util.genExcepthook(debug=True)

def parseArgs():
    parser = optparse.OptionParser(version = '%prog 0.1')
    parser.add_option("--config-file", dest = "configFile",
                      help = "configuration file", metavar = "FILE")
    parser.add_option("--full-sig-sync", dest = "syncSigs",
                      action = "store_true", default = False,
                      help = "replace all of the trove signatures on "
                             "the target repository")
    parser.add_option("--full-trove-sync", dest = "sync", action = "store_true",
                      default = False,
                      help = "ignore the last-mirrored timestamp in the "
                             "target repository")
    parser.add_option("--test", dest = "test", action = "store_true",
                      default = False,
                      help = "skip commiting changes to the target repository")
    parser.add_option("-v", "--verbose", dest = "verbose",
                      action = "store_true", default = False,
                      help = "display information on what is going on")

    (options, args) = parser.parse_args()

    if options.configFile is None:
        print >> sys.stderr, 'a mirror configuration must be provided'
        sys.exit(1)
    elif args:
        print >> sys.stderr, 'unexpected arguments:', " ".join(args)
        sys.exit(1)

    return options


options = parseArgs()
cfg = mirror.MirrorConfiguration()
cfg.read(options.configFile, exception = True)

if options.verbose:
    log.setVerbosity(log.DEBUG)

# We need two repos clients, one for the server and one for the client. Since
# they have the same name (the repositorymap gets us to the right hosts).
sourceRepos = netclient.NetworkRepositoryClient(cfg.source.repositoryMap,
                          cfg.source.user,
                          uploadRateLimit = cfg.uploadRateLimit,
                          downloadRateLimit = cfg.downloadRateLimit,
                          entitlementDir = cfg.entitlementDirectory)

targetRepos = netclient.NetworkRepositoryClient(cfg.target.repositoryMap,
                          cfg.target.user,
                          uploadRateLimit = cfg.uploadRateLimit,
                          downloadRateLimit = cfg.downloadRateLimit,
                          entitlementDir = cfg.entitlementDirectory)

# we pass in the sync flag only the first time around, because after
# that we need the targetRepos mark to advance accordingly after being
# reset to -1
count = mirror.mirrorRepository(sourceRepos, targetRepos, cfg,
                                test = options.test, sync = options.sync,
                                syncSigs = options.syncSigs)
while not options.test and count:
    count = mirror.mirrorRepository(sourceRepos, targetRepos, cfg,
                                    test = options.test)
