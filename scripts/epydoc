#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


"""
This is a script that works identically to epydoc, but implements a
Conary-specific semantic for determining if an interface is public or
private.
"""
import epydoc_html
from epydoc.cli import cli
from epydoc import docintrospecter, apidoc
import inspect
import sys

def _is_developer(var):
    s = str(var.value.docstring)
    return 'PUBLIC API' in s or 'DEVELOPER API' in s

def _is_public(var):
    s = str(var.value.docstring)
    return 'PUBLIC API' in s

def _mark_public(doc, recurse=True):
    any_public = False
    for name, var in doc.variables.iteritems():
        has_public_child = False
        if isinstance(var.value, apidoc.ClassDoc):
            if isinstance(doc, apidoc.ModuleDoc):
                if var.value.defining_module != doc:
                    continue
                has_public_child |= _mark_public(var.value)
            else:
                # classes containing subclasses - the subclass can't
                # be public
                var.is_public = getattr(var, 'is_public', False)
                continue
        elif isinstance(var.value, apidoc.VariableDoc):
            has_public_child = _mark_public(var.value)
        elif isinstance(var.value, apidoc.ModuleDoc):
            # importing a public module doesn't make you public!
            has_public_child = False
        if is_public(var) or has_public_child:
            if var.value.defining_module != doc.defining_module:
                # only display docs about something once.
                var.is_public = False
                continue
            any_public = True
            var.is_public = True
        elif isinstance(var.value, apidoc.VariableDoc):
            var.is_public = False
        else:
            var.is_public = getattr(doc, 'is_public', False)
    return any_public or getattr(doc, 'is_public', False)

def force_public(doc):
    """
    This module/class has been marked as public, so walk through its
    children and mark them as public as well unless they start with
    an underscore.
    """
    doc.is_public = True
    for name, var in doc.variables.iteritems():
        if name[:2] == '__' and name[-2:] == '__':
            pass
        elif name.startswith('_'):
            var.is_public = getattr(var, 'is_public', False)
            if isinstance(var.value, apidoc.ClassDoc):
                _mark_public(var.value)
            continue
        if isinstance(var.value, apidoc.ClassDoc):
            if isinstance(doc, apidoc.ModuleDoc):
                if var.value.defining_module != doc:
                    continue
                force_public(var.value)
            else:
                # classes containing subclasses - the subclass can't
                # be public
                continue
        elif isinstance(var.value, apidoc.VariableDoc):
            force_public(var.value)


def introspect_class(cls, class_doc, module_name=None):
    doc = docintrospecter.introspect_class(cls, class_doc,
                                           module_name=module_name)
    _mark_public(doc)
    return doc

docintrospecter.register_introspecter(docintrospecter.isclass,
                                      introspect_class, priority=10)

def introspect_module(module, module_doc, module_name=None, preliminary=False):
    doc = docintrospecter.introspect_module(module, module_doc,
                                            module_name=module_name,
                                            preliminary=preliminary)
    if doc.variables.get('__developer_api__', False):
        is_public = True
        force_public(doc)
    else:
        is_public = _mark_public(doc)
    doc.is_public = is_public
    package = doc.package
    if is_public:
        while package and not package.is_public:
            package.is_public = True
            package = package.package
    return doc

apidoc.ModuleDoc.is_public = False
apidoc.ClassDoc.is_public = False
docintrospecter.register_introspecter(inspect.ismodule,
                                      introspect_module, priority=10)

def main(argv):
    global is_public
    if '--public' in argv:
        argv.append('--no-private')
        argv.remove('--public')
        is_public = _is_public
    elif '--developer' in argv:
        argv.append('--no-private')
        argv.remove('--developer')
        is_public = _is_developer
    else:
        # we simply don't hide private
        is_public = _is_public
    cli()


if __name__ == '__main__':
    main(sys.argv)
