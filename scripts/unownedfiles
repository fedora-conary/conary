#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


""" Finds file(s) matching the given regexp that are unowned """

import os
import re
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary import conarycfg
from conary.deps import deps
from conary.local import database
from conary.lib import util
from conary import versions
from conary import updatecmd

def usage():
    print """\
Usage: unowned [-r] <file>+
         """
    return 1

sys.excepthook = util.genExcepthook()


def main(argv):
    if argv < 2:
        return usage()
    if len(argv) > 1 and argv[1] == '-r':
        recursive = True
        pathList = argv[2:]
    else:
        recursive = False
        pathList = argv[1:]

    if not pathList:
        return usage()

    expandedPathList = []
    for path in pathList:
        expandedPathList.extend(util.braceGlob(os.path.abspath(util.normpath(path))))

    cfg = conarycfg.ConaryConfiguration()
    db = database.Database(cfg.root, cfg.dbPath)
    for path in pathList:
        if not os.path.isdir(path) or not recursive:
            found = False
            for trove in db.iterTrovesByPath(path):
                found = True
                break
            if not found:
                unownedFile(path)
        else:
            for (root, dirnames, fileNames) in os.walk(path):
                dirnames.sort()
                found = False
                for fileName in sorted(fileNames):
                    filePath = root + '/' + fileName
                    for trove in db.iterTrovesByPath(filePath):
                        found = True
                        break
                    if not found:
                        unownedFile(filePath)

    return 0

def unownedFile(path):
    print path

if __name__ == "__main__":
    sys.exit(main(sys.argv))
