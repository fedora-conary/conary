#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


"""
Intended to be a fast, cheap subset of conary verify --all that
checks some files that it can do easily and quickly.
The output format is NOT fixed, and is likely to change from
time to time.  transient file contents are ignored unless
the --transient-contents argument is provided.
"""

import os
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary import conarycfg, files
from conary.lib import options, sha1helper, util
from conary import conaryclient
from conary.local import database

def usage():
    print 'usage: %s [--root rootpath] [--transient-contents]' %sys.argv[0]

def main(argv):
    sys.excepthook = util.genExcepthook()
    client = conaryclient.getClient()
    repos = client.getRepos()
    cfg = client.cfg

    argDef = {}
    argDef['transient-contents'] = options.NO_PARAM

    cfgMap = {'root': 'root'}
    try:
        argSet, otherArgs = options.processArgs(argDef, cfgMap, cfg, usage,
                                                argv=argv)
    except options.OptionError, s:
        print s
        sys.exit(1)

    transientContents = argSet.has_key('transient-contents')
    
    dbPath = os.sep.join((cfg.root, cfg.dbPath, 'conarydb'))
    db = database.Database(cfg.root, cfg.dbPath)
    cu = db.db.db.cursor()

    cu.execute('SELECT pathId, path, versionId, stream '
               'FROM DBTroveFiles where isPresent=1 '
               'ORDER BY path')
    for pathId, path, versionId, stream in cu:
        f = files.ThawFile(stream, pathId)
        fullpath = os.path.join(cfg.root, path)
        existsOnFilesystem = False
        if util.exists(fullpath):
            s = os.lstat(fullpath)
            perms = s.st_mode & 07777
            if f.inode.perms() != perms:
                print 'perms mismatch for %s: %o should be %o' %(
                    path, perms, f.inode.perms())
            existsOnFilesystem = True
        if (isinstance(f, files.RegularFile)):
            if existsOnFilesystem == True:
                if not (f.flags.isConfig() or f.flags.isInitialContents()):
                    filetype = 'regular'
                    if f.flags.isTransient():
                        if transientContents:
                            filetype = 'transient'
                        else:
                            continue
                    try:
                        troveSha1 = f.contents.sha1()
                        if s.st_size == f.contents.size():
                            systemSha1 = sha1helper.sha1FileBin(fullpath)
                            if troveSha1 != systemSha1:
                                print 'sha1 mismatch for %s file %s' %(
                                    filetype, path)
                        else:
                            print 'size mismatch for %s: %d should be %d' %(
                                path, s.st_size, f.contents.size())
                    except OSError, s:
                        print s
            else:
                print '%s missing from filesystem' %path
        elif isinstance(f, files.SymbolicLink):
            if existsOnFilesystem == True:
                fullpath = os.path.join(cfg.root, path)
                c = os.readlink(fullpath)
                if c != f.target():
                    print 'symlink %s contains %s instead of %s' %(
                        path, c, f.target())
            else:
                print 'symlink %s missing from filesystem' %path
        elif isinstance(f, (files.Directory, files.Socket, files.NamedPipe,
                            files.DeviceFile)):
            # no further checking than permissions for these types
            pass
        else:
            print 'not checking special file %s' % path


if __name__ == '__main__':
    main(sys.argv)
