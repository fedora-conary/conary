#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import os
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

import optparse, tarfile

from conary import files, trove
from conary.lib import util
from conary.repository import changeset

sys.excepthook = util.genExcepthook(debug=True)

parser = optparse.OptionParser(version = '%prog 0.1')
(options, args) = parser.parse_args()

if len(args) != 1:
    print >> sys.stderr, "ccs2tar: a single path name was expected"
    sys.exit(1)

try:
    cs = changeset.ChangeSetFromFile(args[0])
except Exception, e:
    print >> sys.stderr, "failed to open %s: %s" % (args[0], str(e))
    sys.exit(1)

if not cs.isAbsolute():
    print >> sys.stderr, "ccs2tar: absolute change set expected"
    sys.exit(1)

troveList = [ trove.Trove(x) for x in cs.iterNewTroveList() ]
fileList = []
for trv in troveList:
    fileList.extend([ (x[0], x[1], x[2]) for x in trv.iterFileList() ])
fileList.sort()

del troveList

tf = tarfile.open(fileobj=sys.stdout, mode='w|')

delayedContents = {}
linkGroups = {}
inodeCount = 0

for pathId, path, fileId in fileList:
    stream = cs.getFileChange(None, fileId)
    f = files.ThawFile(stream, pathId)

    if path[0] == '/':
        path = path[1:]

    tarInfo = tarfile.TarInfo(path)

    tarInfo.mtime = f.inode.mtime()
    tarInfo.size = 0
    tarInfo.mode = f.inode.perms()
    tarInfo.uid = 0
    tarInfo.gid = 0
    tarInfo.uname = f.inode.owner()
    tarInfo.gname = f.inode.group()

    fObj = None

    if isinstance(f, files.RegularFile):
        tarInfo.size = f.contents.size()
        tarInfo.type = tarfile.REGTYPE
        contentsType, contents = cs.getFileContents(pathId, fileId)
        fObj = contents.get()
        if contentsType == changeset.ChangedFileTypes.ptr:
            ptr = fObj.read()
            delayedContents.setdefault(ptr, []).append((tarInfo, f))
            tarInfo = None
        else:
            if f.linkGroup():
                linkGroups[f.linkGroup()] = tarInfo

    elif isinstance(f, files.Directory):
        tarInfo.type = tarfile.DIRTYPE
    elif isinstance(f, files.SymbolicLink):
        tarInfo.type = tarfile.SYMTYPE
        tarInfo.linkname = f.target()
    else:
        print >> sys.stderr, "ccs2tar doesn't know about file type %s", \
                    stream[0]
        sys.exit(0)

    if not tarInfo:
        continue

    tf.addfile(tarInfo, fObj)

    for tarInfo, delayedF in delayedContents.get(pathId + fileId, []):
        if delayedF.linkGroup() and delayedF.linkGroup() == f.linkGroup():
            tarInfo.linkname = path
            tarInfo.type = tarfile.LNKTYPE
            tf.addfile(tarInfo)
        else:
            fObj.seek(0)
            tf.addfile(tarInfo, fObj)
            if f.linkGroup():
                linkGroups[f.linkGroup()] = tarInfo

tf.close()
sys.stdout.write('\0' * 1024)
