#!/usr/bin/env python2.4
# -*- mode: python -*-
#
# Copyright (c) 2005-2006 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/cpl.php.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

"""
checkdatabase examines each trove in a conary database and verifies
its integrity by comparing with data downloaded from the repository.
"""
import os
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary import conarycfg
from conary import deps
from conary import files
from conary.lib import options, sha1helper, util
from conary.repository import netclient, repository
from conary import sqlite3
from conary import trove
from conary.local import database
from conary import conaryclient

def usage():
    print 'usage: %s [--root rootpath]' %sys.argv[0]

def main(argv):
    sys.excepthook = util.genExcepthook()
    cfg = conarycfg.ConaryConfiguration()

    argDef = {}
    cfgMap = {'root': 'root'}

    try:
        argSet, otherArgs = options.processArgs(argDef, cfgMap, cfg, usage,
                                                argv=argv)
    except options.OptionError, s:
        print s
        sys.exit(1)

    db = database.Database(cfg.root, cfg.dbPath)
    client = conaryclient.ConaryClient(cfg)
    repos = client.getRepos()

    troveList = otherArgs[1:]
    if not troveList:
        troveList = db.iterAllTroveNames()

    for troveName in troveList:
        for dbTrove in db.db.iterFindByName(troveName, pristine = True):
            troveVersion = dbTrove.getVersion()
            troveFlavor = dbTrove.getFlavor()
            if troveVersion.isOnLocalHost():
                # skip local troves
                continue
            print 'checking', troveName, troveVersion.asString()
            d = {troveName: {troveVersion: [troveFlavor]}}
            try:
                ret = repos.getTroveVersionFlavors(d)
            except repository.OpenError, e:
                print ('error accessing repository when finding trove %s: %s'
                       %(troveName, e))
            if not ret.has_key(troveName):
                print ('error: %s trove version %s in the database has flavor '
                       '"%s", but there are no troves in the repository with '
                       'that version and flavor.'
                       %(troveName, troveVersion.asString(), troveFlavor))
                continue
            for t in repos.iterFilesInTrove(troveName, troveVersion,
                                            troveFlavor, withFiles=True):
                pathId, path, fileId, version, fileObj = t
                try:
                    dbPath, dbFileId, dbVersion = dbTrove.getFile(pathId)
                except KeyError:
                    print ('error: the repository version of %s has a pathId '
                           '%s that does not exist in the trove from the '
                           'database' %(troveName,
                                        sha1helper.md5ToString(pathId)))
                    continue
                #print >> sys.stderr, '  ', path
                if dbPath != path:
                    print ('error: repository path for pathId %s is %s, '
                           'database thinks it is %s'
                           %(sha1helper.md5ToString(pathId), path, dbPath))
                if dbFileId != fileId:
                    print ('error: repository fileId for pathId %s (%s) is '
                           '%s, database thinks it is %s'
                           %(sha1helper.md5ToString(pathId),
                             path,
                             sha1helper.sha1ToString(fileId),
                             sha1helper.sha1ToString(dbFileId)))
                if dbVersion != version:
                    print ('error: repository fileVersion for pathId %s (%s) '
                           'is %s, database thinks it is %s'
                           %(sha1helper.md5ToString(pathId),
                             path,
                             version.asString(),
                             dbVersion.asString()))
                dbFileObj = db.getFileVersion(pathId, dbFileId,
                                              dbVersion)
                if dbFileObj != fileObj:
                    print ('error: file stream for fileId %s (%s) does not '
                           'match.  Diff from db to repos is: %s.  Diff '
                           'from repos to db is: %s'
                           %(sha1helper.md5ToString(pathId),
                             path,
                             files.fieldsChanged(dbFileObj.diff(fileObj)),
                             files.fieldsChanged(fileObj.diff(dbFileObj))))

if __name__ == '__main__':
    main(sys.argv)

