#!/usr/bin/python2.3
# -*- mode: python -*-
#
# Copyright (c) 2004 Specifix, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/cpl.php.
#
# This program is distributed in the hope that it will be useful, but
# without any waranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

""" Compares local packages against the current install label and 
    lists those that are out of date """

import os
import sys
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
	fullPath = os.path.dirname(sys.argv[0])
    else:
	fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.append(os.path.dirname(fullPath))

import conarycfg
from local import database
from lib import util
from repository import netclient
import versions
import updatecmd

def usage():
    print "Usage: localoutofdate [--missing]"
    return 1

sys.excepthook = util.genExcepthook()


def main(argv):
    listMissing = False
    doUpdate = False
    args = argv[1:]
    for arg in args:
        if arg == '--missing':
            listMissing = True
        elif arg == '--update':
            
            doUpdate = True
        else:
            return usage()
        args.remove(arg)

    cfg = conarycfg.ConaryConfiguration()
    repos = netclient.NetworkRepositoryClient(cfg.repositoryMap)
    db = database.Database(cfg.root, cfg.dbPath)
    dbpkgs = [ x for x in db.iterAllTroveNames() if x.find(':') == -1 ]
    dbpkgs.sort()
    versionList = repos.getTroveLeavesByLabel(dbpkgs, cfg.installLabel)

    for pkg in dbpkgs:
        if not versionList[pkg]:
            continue
        v = versionList[pkg][0]
        lv = db.getTroveVersionList(pkg)[0]
        vt = v.trailingVersion()
        lvt = lv.trailingVersion()
        
        if isinstance(lv.branch().label(), versions.CookBranch) or\
           isinstance(lv.branch().label(), versions.EmergeBranch):
            continue

        if (v.branch(),vt.getVersion(),vt.getRelease(),vt.buildCount) != (lv.branch(),lvt.getVersion(),lvt.getRelease(),lvt.buildCount):
            print "%-35s%-25s%-20s" % (pkg, lvt.asString(), vt.asString())

            if doUpdate:
                updatecmd.doUpdate(repos, cfg, [ "%s=%s" %(pkg, v.asString()) ])

    if listMissing:
        
        missing = []
        repopkgs = [ x for x in repos.iterAllTroveNames(cfg.installLabel.getHost()) if x.find(':') == -1 and not (x.startswith('cross-') or x.startswith('bootstrap-')) ]
        for pkg in repopkgs:
            if not dbpkgs:
                missing.append(pkg)
                continue
            elif pkg != dbpkgs[0]:
                while dbpkgs and dbpkgs[0] < pkg:
                    del dbpkgs[0]
                if not dbpkgs or pkg != dbpkgs[0]: 
                    missing.append(pkg)
            else: 
                del dbpkgs[0]
        print "Missing packages: %s" % missing
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
