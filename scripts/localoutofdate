#!/usr/bin/python2.3
# -*- mode: python -*-
#
# Copyright (c) 2004 Specifix, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/cpl.php.
#
# This program is distributed in the hope that it will be useful, but
# without any waranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

""" Compares local packages against the current install label and 
    lists those that are out of date """

import os
import sys
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
	fullPath = os.path.dirname(sys.argv[0])
    else:
	fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.append(os.path.dirname(fullPath))

import conarycfg
from local import database
from lib import util
from repository import netclient
from repository import repository
import versions
import updatecmd

def usage():
    print "Usage: localoutofdate [--missing] [--update] [--except <exception,...>]"
    return 1

sys.excepthook = util.genExcepthook()


def main(argv):
    listMissing = False
    doUpdate = False
    updateExceptions = []
    display = {}
    displayOrder = ['change', 'name', 'local', 'version', 'repo']
    for param in displayOrder:
        display[param] = True
    args = argv[1:]
    lastArg = ''
    while args:
        arg = args[0]
        args = args[1:]
        if arg == '--except':
            arg = args[0]
            args = args[1:]
            updateExceptions = arg.split(',')
            lastArg = ''
            continue
        elif arg == '--missing':
            listMissing = True
        elif arg == '--display':
            arg = args[0]
            args = args[1:]
            params = arg.split(',')
            for param in params:
                if param.startswith('no'):
                    value = False
                    param = param[2:]
                else:
                    value = True
                if param not in display:
                    usage()
                    print "Error: Unknown display parameter %s.  Available options: %s" % (param, displayOrder)
                    return 1
                display[param] = value
        elif arg == '--update':
            doUpdate = True
        else:
            usage()
            print "Error: unknown option", arg
            return 1

    # remove items from displayOrder that we don't plan on displaying:
    for param in display.keys():
        if not display[param]:
            displayOrder.remove(param)
    
    cfg = conarycfg.ConaryConfiguration()
    repos = netclient.NetworkRepositoryClient(cfg.repositoryMap)
    db = database.Database(cfg.root, cfg.dbPath)
    dbpkgs = [ x for x in db.iterAllTroveNames() if x.find(':') == -1 ]
    dbVersions = {}
    labelPkgs = {}
    for pkg in dbpkgs:
        if pkg in updateExceptions:
            continue
        dbVersions = db.getTroveVersionList(pkg)
        for v in dbVersions:
            label = v.branch().label()
            if isinstance(label, versions.CookBranch) or\
               isinstance(label, versions.EmergeBranch):
                continue
            if label not in labelPkgs:
                labelPkgs[label] = {}
            if pkg not in labelPkgs[label]:
                labelPkgs[label][pkg] = []
            labelPkgs[label][pkg].append(v)
    dbpkgs.sort()

    updates = []
    notavail = []
    for label in labelPkgs.keys():
        labelDbpkgs = labelPkgs[label].keys()
        labelDbpkgs.sort()
        try:
            versionList = repos.getTroveLeavesByLabel(labelDbpkgs, label)
        except repository.OpenError, e:
            print "Warning: could not access %s: %s" % (label.asString(), e)
            print "Skipping packages %s" % labelDbpkgs
            continue
        for pkg in labelDbpkgs:
            dbVersions = labelPkgs[label][pkg]
            repoVersions = versionList[pkg]
            # only look for updates to this version on the same branch
            for lv in dbVersions:
                if not repoVersions:
                    
                    lvt = lv.trailingVersion()
                    notavail.append((label, pkg, lv, None))
                for v in repoVersions:
                    if lv.branch() != v.branch():
                        continue
                    if v.isAfter(lv):
                        updates.append((label, pkg, lv, v))

    maxL = 0
    maxP = 0
    maxLV = 0
    if notavail:
        maxV = len('<Not Avail>')
    else:
        maxV = 0

    
    for (label, pkg, lv, v) in updates + notavail:
        maxL = max(maxL, len(label.asString()))
        maxP = max(maxP, len(pkg))
        maxLV = max(maxLV, len(lv.trailingVersion().asString()))
        if v:
            maxV = max(maxV, len(v.trailingVersion().asString()))

    displayVars = {}
    displayVars['repo'] = ("%-*s" , [maxL])
    displayVars['change'] = ("%-3s" , [])
    displayVars['name'] = ("%-*s" , [maxP + 3])
    displayVars['local'] = ("%-*s" , [maxLV + 3])
    displayVars['version'] = ("%-*s" , [maxV + 3])

    displayStr = []
    for param in displayOrder:
        displayStr.append(displayVars[param][0])
    displayStr = ''.join(displayStr)
    

    for (label, pkg, lv, v) in updates + notavail:
        lvt = lv.trailingVersion()
        if v:
            vt = v.trailingVersion()
            if lvt.getVersion() != vt.getVersion():
                change = 'V'
            elif lvt.getRelease() != vt.getRelease():
                change = 'S'
            else:
                change = 'B'
            vt = vt.asString()
        else:
            vt = '<Not Avail>'
            change = ' '
        lvt = lvt.asString()
        displayVals = {}
        displayVals['local'] = lvt
        displayVals['version'] = vt
        displayVals['change'] = change
        displayVals['repo'] = label.asString()
        displayVals['name'] =  pkg
        

        
        displayArgs = []
        for param in displayOrder:
            displayArgs.extend(displayVars[param][1])
            displayArgs.append(displayVals[param])

        print displayStr % tuple(displayArgs)
        #print "%s  %-*s   %-*s   %-*s    %-*s" % (change, maxP, pkg, maxLV, lvt, maxV, vt, maxL, label.asString())
        if doUpdate:
            updatecmd.doUpdate(repos, cfg, [ "%s=%s" %(pkg, v.asString()) ])

    if listMissing:
        missing = []
        repoMap = {}
        for label in cfg.installLabelPath:
            repopkgs = [ x for x in repos.iterAllTroveNames(label.getHost()) if x.find(':') == -1 and not (x.startswith('cross-') or x.startswith('bootstrap-')) ]
            for pkg in repopkgs:
                if pkg not in repoMap:
                    repoMap[pkg] = label
        allpkgs = repoMap.keys()
        allpkgs.sort()
        for pkg in allpkgs:
            if not dbpkgs:
                missing.append(pkg)
                continue
            elif pkg != dbpkgs[0]:
                while dbpkgs and dbpkgs[0] < pkg:
                    del dbpkgs[0]
                if not dbpkgs or pkg != dbpkgs[0]: 
                    missing.append(pkg)
            else: 
                del dbpkgs[0]
        maxL = 0
        maxP = 0
        for pkg in missing:
            maxP = max(maxP, len(pkg))
            maxL = max(maxL, len(repoMap[pkg].asString()))
        print "=" * 78
        for pkg in missing:
            print "   %-*s    <Not Installed>    %-*s" % (maxP, pkg, maxL, repoMap[pkg].asString())
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
