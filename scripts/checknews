#!/usr/bin/python
#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os
import sys
import re

if 'JIRANEMO_PATH' in os.environ:
    sys.path.insert(0, os.environ['JIRANEMO_PATH'])
# use jiranemo to crib off the configuration files, etc.
from jiranemo import main
from conary.lib import options

class CheckNewsCommand(main.JiraNemoCommand, options.AbstractCommand):
    commands = ['check']

    def addParameters(self, argDef):
        d = {}
        d["project"] = options.ONE_PARAM
        argDef.update(d)
        main.JiraNemoCommand.addParameters(self, argDef)

    def runCommand(self, client, cfg, argSet, args):
        keyre = re.compile('[A-Z]+-[0-9]+')
        project = argSet.pop('project', 'CNY')
        if len(args) != 3:
            self.usage()
            return
        news = args[2]
        f = open(news)
        started = False
        fixVer = None
        closedStates = [ 'Closed', 'Document', 'Resolved' ]
        notClosed = []
        for line in f:
            if line.startswith('Changes in'):
                if started:
                    break
                else:
                    started = True
                    # cut off "Changes in " and the trailing ":"
                    line = line.strip()[11:]
                    version = line.split(':')[0]
                if version == '@NEW@':
                    print 'change @NEW@ first'
                    sys.exit(1)
                version = 'Conary ' + version
            if not fixVer:
                versions = client.getVersions(project)
                v = [ x for x in versions if x.name == version ]
                if not v:
                    print 'no such version', version, 'in %s project' % project
                    break
                fixVer = v[0]
                versionToId = dict((x.name, x.id) for x in versions)
            match = keyre.search(line)
            if match:
                key = match.group()
                if not key.startswith(project):
                    print 'not checking', key
                    continue
                print 'getting', key
                issue = client.getIssue(key)
                fixVers = [ x for x in issue.fixVersions if x.name == version ]
                if issue.status not in closedStates:
                    notClosed.append(key)
                if not fixVers:
                    print key, 'does not have fix version set to', version, 'setting...',
                    fixVersions = issue.fixVersions[:]
                    fixVersions.append(fixVer)
                    newVersions = [ versionToId[x.name] for x in fixVersions ]
                    d = { 'id': 'fixVersions',
                          'values': newVersions }
                    client.client.updateIssue(key, [ d ])
                    print 'ok.'
        if notClosed:
            print "Issues that are not in a closed state (%s):" % \
                ", ".join(closedStates)
            print " ".join(notClosed)

class CheckerMain(main.JiraNemoMain, options.MainHandler):
    commandList = [ CheckNewsCommand ]

    def usage(self, rc=1):
        return options.MainHandler.usage(self, rc)

if __name__ == '__main__':
    Main = CheckerMain()
    argv = sys.argv[:]
    argv.insert(1, 'check')
    sys.exit(Main.main(argv))
