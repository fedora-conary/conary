#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import os
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

import itertools, optparse

from conary import dbstore, trove, versions
from conary.deps import deps
from conary.repository.netrepos import trovestore
from conary.server import schema

parser = optparse.OptionParser(version = '%prog 0.1')
(options, args) = parser.parse_args()

if len(args) != 2:
    print >> sys.stderr, "usage: resha1 <driver> <reposdb>"
    sys.exit(1)

db = dbstore.connect(args[1], driver = args[0])
schema.setupTempTables(db)

cu = db.cursor()

store = trovestore.TroveStore(db)

cu.execute("""
            SELECT instanceId, item, version, flavor FROM Instances 
                JOIN Items ON
                    Instances.itemId = Items.itemId
                JOIN Versions ON
                    Instances.versionId = Versions.versionId
                JOIN Flavors ON
                    Instances.flavorId = Flavors.flavorId
                WHERE
                    Instances.isPresent = 1
           """)

allTroves = [ (x[0], (x[1], versions.VersionFromString(x[2]),
                   deps.ThawFlavor(x[3]))) for x in cu ]

fixes = []
for count, (instanceId, trv) in enumerate(itertools.izip(
            (x[0] for x in  allTroves), 
            store.iterTroves([ x[1] for x in allTroves ]))):
    if count % 50 == 0:
        print "Trove %d of %d\r" % (count, len(allTroves)),
        sys.stdout.flush()

    if trv.verifySignatures():
        continue

    trv.computeSignatures()
    fixes.append((instanceId, trv.troveInfo.sigs.freeze()))

print "%d of %d troves need new sha1s" % (len(fixes), len(allTroves))

cu.execute("CREATE TEMPORARY TABLE Fixes (instanceId INTEGER, sigs BLOB)")
for instanceId, sigs in fixes:
    cu.execute("INSERT INTO Fixes (instanceId, sigs) VALUES (?, ?)",
               instanceId, sigs)

cu.execute("""DELETE FROM TroveInfo WHERE instanceId IN
                    (SELECT instanceId FROM Fixes) AND
                    infoType = %d""" % trove._TROVEINFO_TAG_SIGS)
cu.execute("""INSERT INTO TroveInfo (instanceId, infoType, data)
                SELECT instanceId, %d, sigs FROM Fixes""" 
                            % trove._TROVEINFO_TAG_SIGS)

db.commit()
