#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import sys

from conary import sqlite3
from conary import versions

def renameSeq(s, old, new):
    for l in s.iterLabels():
        if l == old:
            l.host = new.host
            l.namespace = new.namespace
            l.branch = new.branch

def rename(cu, old, new):
    print 'renaming %s to %s' %(old, new)
    oldLabel = versions.Label(old)
    newLabel = versions.Label(new)

    cu.execute("select versionid, version from versions")
    for (versionId, oldVersion) in [ x for x in cu]:
        if not versionId: continue

        vObj = versions.VersionFromString(oldVersion)
        renameSeq(vObj, oldLabel, newLabel)
        version = vObj.asString()

        if oldVersion != version:
            print oldVersion, version

        cu.execute("update versions set version=? where versionid=?", 
                   version, versionId)

    cu.execute("select name from sqlite_master where name='Branches'")
    if cu.fetchone() is not None:
        cu.execute("select branchid, branch from branches")
        for (branchId, oldBranch) in [ x for x in cu]:
            if not branchId: continue

            bObj = versions.VersionFromString(oldBranch)
            renameSeq(bObj, oldLabel, newLabel)
            branch = bObj.asString()

            if oldBranch != branch:
                print oldBranch, branch

            cu.execute("update branches set branch=? where branchid=?", 
                       branch, branchId)

        cu.execute("select labelid, label from labels")
        for (labelId, label) in [ x for x in cu]:
            if not labelId: continue
            label = label.replace(old, new)
            cu.execute("update labels set label=? where labelId=?", 
                       label, labelId)

if len(sys.argv) == 2:
    db = sqlite3.connect(sys.argv[1])
elif len(sys.argv) > 1:
    print "ACK"
    sys.exit(1)
else:
    db = sqlite3.connect("/var/lib/conarydb/conarydb")

cu = db.cursor()

rename(cu, "conary.rpath.com@rpl:1", 
           "conary.rpath.com@something:else")

db.commit()
