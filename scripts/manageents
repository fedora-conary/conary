#!/usr/bin/env python2.4
# -*- mode: python -*-
#
# Copyright (C) 2005-2006 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

import os
import sys
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
	fullPath = os.path.dirname(sys.argv[0])
    else:
	fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary.lib import util
sys.excepthook = util.genExcepthook(debug=True)

def usage():
    print "manageents [--config <value>] add-entitlement <server> <class> <entitlement>"
    print "manageents [--config <value>] create-class <server> <class> <group>"
    print "manageents [--config <value>] delete-entitlement <server> <class> <entitlement>"
    print "manageents [--config <value>] list-entitlements <server> <class>"
    print "manageents [--config <value>] list-classes <server>"
    sys.exit(1)

from conary import conaryclient, conarycfg, versions
from conary.lib import options

argDef = {}
cfgMap = {}

argDef["config"] = options.MULT_PARAM

cfg = conarycfg.ConaryConfiguration(readConfigFiles=True)

try:
    argSet, otherArgs = options.processArgs(argDef, cfgMap, cfg, usage,
                                            argv = sys.argv)
except options.OptionError, e:
    print >> sys.stderr, e
    sys.exit(e.val)
except versions.ParseError, e:
    print >> sys.stderr, e
    sys.exit(1)

client = conaryclient.ConaryClient(cfg)
repos = client.getRepos()

if len(otherArgs) < 2:
    usage()

if otherArgs[1] == 'add-entitlement':
    if len(otherArgs) != 5: usage()
    repos.addEntitlementKeys(otherArgs[2], otherArgs[3], [ otherArgs[4] ])
elif otherArgs[1] == 'create-class':
    if len(otherArgs) != 5: usage()
    repos.addEntitlementClass(otherArgs[2], otherArgs[3], otherArgs[4])
elif otherArgs[1] == 'delete-entitlement':
    if len(otherArgs) != 5: usage()
    repos.deleteEntitlementKeys(otherArgs[2], otherArgs[3], [ otherArgs[4] ])
elif otherArgs[1] == 'list-entitlements':
    if len(otherArgs) != 4: usage()
    print "\n".join(repos.listEntitlementKeys(otherArgs[2], otherArgs[3]))
elif otherArgs[1] == 'list-classes':
    if len(otherArgs) != 3: usage()
    print "\n".join(repos.listEntitlementClasses(otherArgs[2]))
else:
    usage()
