#!/usr/bin/env python
# -*- mode: python -*-
#
# Copyright (c) 2009 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#
#

import itertools, os, sys
from optparse import OptionParser

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary import conarycfg, conaryclient, trove

cfg = conarycfg.ConaryConfiguration()
cfg.readFiles()

def configCallback(option, opt, val, parser):
    cfg.configLine(val)

def configFileCallback(option, opt, val, parser):
    cfg.readFile(val)

parser = OptionParser(usage = "usage: mkcompetecs <out.ccs> [troveSpecs]+")
parser.add_option('', '--config-file', type = "string", action = "callback",
                  callback = configFileCallback,
                  help = "configuration file to load after the defaults")
parser.add_option('', '--config', action = "callback", type = "string",
                  callback = configCallback,
                  help = "configuration statement")
(options, args) = parser.parse_args()
if len(args) < 2:
    parser.print_help()
    sys.exit(1)

outFile = args.pop(0)
cb = conaryclient.callbacks.ChangesetCallback()

cl = conaryclient.ConaryClient(cfg = cfg)
repos = cl.getRepos()

troveSpecs = []
jobSummaries = []
for arg in args:
    items = arg.split('--')
    firstSpec = conaryclient.cmdline.parseTroveSpec(items[0])
    troveSpecs.append(firstSpec)
    if len(items) > 1:
        newVer = "%s=%s" % (firstSpec[0], items[1])
        if firstSpec[2]:
            newVer += '[%s]' % firstSpec[2]

        secondSpec = conaryclient.cmdline.parseTroveSpec(newVer)
        troveSpecs.append(secondSpec)
        jobSummaries.append((firstSpec, secondSpec))
    else:
        jobSummaries.append((None, firstSpec))

trvInfoDict = repos.findTroves([], troveSpecs)

masterJob = []
for jobSummary in jobSummaries:
    new = trvInfoDict[jobSummary[1]][0]
    if jobSummary[0]:
        old = trvInfoDict[jobSummary[0]][0]
        masterJob.append( (old[0], old[1:], new[1:], False) )
    else:
        masterJob.append( (new[0], (None, None), new[1:], True) )

trvInfoList = list(itertools.chain(*trvInfoDict.values()))

# this picks random version/flavor; we don't care what those are particularly
# anyway
oldSet = trove.Trove('@list', masterJob[0][2][0], masterJob[0][2][1])
newSet = trove.Trove('@list', masterJob[0][2][0], masterJob[0][2][1])

# we don't just use recursive changesets because we need troves which are
# byDefault False
job = ([ (x[0], (None, None), x[1], True) for x in
             masterJob if x[1][0] is not None ] +
       [ (x[0], (None, None), x[2], True) for x in masterJob ])
cs = repos.createChangeSet(job, recurse = False, callback = cb)
for (name, oldInfo, newInfo, relative) in masterJob:
    if oldInfo[0]:
        oldTrv = trove.Trove(cs.getNewTroveVersion(name, oldInfo[0],
                                                   oldInfo[1]))
        for info in oldTrv.iterTroveList(strongRefs = True,
                                         weakRefs = True):
            oldSet.addTrove(presentOkay = True, *info)

    newTrv = trove.Trove(cs.getNewTroveVersion(name, newInfo[0],
                                               newInfo[1]))
    for info in newTrv.iterTroveList(strongRefs = True,
                                     weakRefs = True):
        newSet.addTrove(presentOkay = True, *info)

masterJob += newSet.diff(oldSet, False)[2]

newCs = repos.createChangeSetFile(masterJob, outFile, recurse = False,
                                  callback = cb)
