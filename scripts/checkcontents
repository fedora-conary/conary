#!/usr/bin/env python
# -*- mode: python -*-
#
# Copyright (c) 2005-2008 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

"""
checkcontents examines the database and data store on a system to see
if there are missing contents.  If the --repair flag is given, the contents
will be downloaded from the appropriate repositories and restored.
"""

import os
import sys

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.insert(0, os.path.dirname(fullPath))

from conary import conarycfg, deps, files
from conary.repository import datastore
from conary.lib import options, sha1helper, util
from conary import conaryclient
from conary import sqlite3
from conary.local import database

def usage():
    print 'usage: %s [--root rootpath] [--repair]' %sys.argv[0]

def getTroveInfo(db, instanceId):
    "return troveName, version, and flavor for a given db's instanceId"
    cu = db.db.db.cursor()
    cu.execute('SELECT troveName, flavor FROM DBInstances '
               '    INNER JOIN DBFlavors '
               '        ON DBInstances.flavorId = DBFlavors.flavorId '
               'WHERE instanceId=?', (instanceId))
    troveName, frozenFlavor = cu.next()
    flavor = deps.deps.ThawFlavor(frozenFlavor)
    version = db.db.instances.getVersion(instanceId)
    return troveName, version, flavor

def main(argv):
    sys.excepthook = util.genExcepthook()
    client = conaryclient.getClient()
    repos = client.getRepos()
    cfg = client.cfg

    argDef = {}
    argDef['repair'] = options.NO_PARAM

    cfgMap = {'root': 'root'}
    try:
        argSet, otherArgs = options.processArgs(argDef, cfgMap, cfg, usage,
                                                argv=argv)
    except options.OptionError, s:
        print s
        sys.exit(1)
    
    repair = argSet.has_key('repair')

    dbPath = os.sep.join((cfg.root, cfg.dbPath, 'conarydb'))
    db = database.Database(cfg.root, cfg.dbPath)

    # list of needed (fileId, fileVersion) tuples
    neededFiles = []
    # list of needed contents sha1 hashes
    neededSha1s = []
    sha1Counts = {}

    # loop over all the files in the database
    cu = db.db.db.cursor()
    cu.execute('SELECT pathId, path, versionId, instanceId, stream '
               'FROM DBTroveFiles')
    for pathId, path, versionId, instanceId, stream in cu:
        f = files.ThawFile(stream, pathId)
        # if it's a config file, check to make sure that it is in the
        # data store
        if f.flags.isConfig():
            h = sha1helper.sha1ToString(f.contents.sha1())
            if not db.contentsStore.hasFile(h):
                # uh-oh, we're missing contents. print an error and make note
                troveName, troveVersion, flavor = getTroveInfo(db, instanceId)
                fileVersion = db.db.versionTable.getBareId(versionId)
                print troveName, troveVersion.asString(), path, \
                      '(sha1: %s)' %h, 'missing from data store',
                if fileVersion.isOnLocalHost():
                    print ('but this trove was built locally so the contents '
                           'can not be restored'),
                else:
                    neededFiles.append((f.fileId(), fileVersion))
                    neededSha1s.append(h)
                print
            else:
                # excellent, not missing the contents.  let's count
                # how many instances we have
                sha1Counts[h] = sha1Counts.get(h, 0) + 1

    for h, count in sha1Counts.iteritems():
        realCount = cu.execute('SELECT count from DataStore WHERE hash=?',
                               h).next()[0]
        if realCount != count:
            print ('count incorrect for %s. '
                   'expected %d got %d' %(h, count, realCount)),
            if repair:
                cu.execute('UPDATE DataStore set count=? where hash=?',
                           (count, h))
                print 'fixed.',
            print

    if repair:
        # request the contents we're missing
        contents = repos.getFileContents(neededFiles)
        # loop over the contents we got back and the list of sha1s
        # we're missing
        for fileObj, h in zip(contents, neededSha1s):
            # save the contents we got in the datastore
            db.contentsStore.addFile(fileObj.get(), h)
            # double check that the contents sha1 matches what we expect
            h2 = sha1helper.sha1String(db.contentsStore.openFile(h).read())
            h2 = sha1helper.sha1ToString(h2)
            assert(h == h2)
        db.commit()

if __name__ == '__main__':
    main(sys.argv)
