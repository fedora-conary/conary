#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import os
import sys

if os.path.dirname(sys.argv[0]):
    if sys.argv[0][0] == "/":
	fullPath = os.path.dirname(sys.argv[0])
    else:
	fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.append(os.path.dirname(fullPath))
from conary.repository.changeset import ChangeSetFromFile
from conary.repository import netclient
from conary.local import database
from conary import conarycfg
from conary.lib import util
from conary import queryrep
from conary import checkin
from conary versions

sys.excepthook = util.genExcepthook()

cfg = conarycfg.ConaryConfiguration()
repos = netclient.NetworkRepositoryClient(cfg.repositoryMap)

if len(sys.argv) != 2:
    print "Usage: graphbranch <trovename>"
    sys.exit(1)

troveName = sys.argv[1]

def getNestedBranches(troveName, host, label):
    versions = repos.getTroveVersionList(host, [troveName])
    
    branches = []
    for v in versions[troveName]:
	if v.branch() not in branches:
	    # skip ourself
	    if v.branch().label().asString() == label:
		continue
	    # make sure our parent is directly underneath us
	    if v.branch().hasParent() and v.branch().parentNode().branch().label().asString() == label:
		branches.append(v.branch())

    return branches 

def printVersionsAndLeaves(trove, label, level):
    branches = getNestedBranches(trove, cfg.installLabel.getHost(), label.asString())
    versions = repos.getTroveVersionsByLabel([trove], label)

    flavors = repos.getTroveVersionFlavors(versions) 
   
    for branch in branches:
	print '"%s" [shape=box,label="%s"];' % (branch.label().asString(), branch.asString())
	if branch.hasParent():
	    print '"%s" -> "%s";' % (branch.parentNode().asString(), branch.label().asString())
	printVersionsAndLeaves(trove, branch.label(), level+1)
   
    for version in flavors[trove]:
	for flavor in flavors[trove][version]:
	    print '"%s" [label="%s"];' % (version.asString(), version.trailingRevision().asString())
	    print '"%s" -> "%s"' % (label.asString(), version.asString())

# go
print "digraph branch_structure {"
print '"%s" [shape=box,peripheries=2,label="%s"]' % (cfg.installLabel.asString(), troveName)
printVersionsAndLeaves(troveName, cfg.installLabel, 0)
print "}"
