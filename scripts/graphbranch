#!/usr/bin/env python
#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os
import sys

if os.path.dirname(sys.argv[0]):
    if sys.argv[0][0] == "/":
	fullPath = os.path.dirname(sys.argv[0])
    else:
	fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.append(os.path.dirname(fullPath))
from conary.repository.changeset import ChangeSetFromFile
from conary.repository import netclient
from conary.local import database
from conary import conarycfg
from conary.lib import util
from conary import queryrep
from conary import checkin
from conary versions

sys.excepthook = util.genExcepthook()

cfg = conarycfg.ConaryConfiguration()
repos = netclient.NetworkRepositoryClient(cfg.repositoryMap)

if len(sys.argv) != 2:
    print "Usage: graphbranch <trovename>"
    sys.exit(1)

troveName = sys.argv[1]

def getNestedBranches(troveName, host, label):
    versions = repos.getTroveVersionList(host, [troveName])
    
    branches = []
    for v in versions[troveName]:
	if v.branch() not in branches:
	    # skip ourself
	    if v.branch().label().asString() == label:
		continue
	    # make sure our parent is directly underneath us
	    if v.branch().hasParent() and v.branch().parentNode().branch().label().asString() == label:
		branches.append(v.branch())

    return branches 

def printVersionsAndLeaves(trove, label, level):
    branches = getNestedBranches(trove, cfg.installLabel.getHost(), label.asString())
    versions = repos.getTroveVersionsByLabel([trove], label)

    flavors = repos.getTroveVersionFlavors(versions) 
   
    for branch in branches:
	print '"%s" [shape=box,label="%s"];' % (branch.label().asString(), branch.asString())
	if branch.hasParent():
	    print '"%s" -> "%s";' % (branch.parentNode().asString(), branch.label().asString())
	printVersionsAndLeaves(trove, branch.label(), level+1)
   
    for version in flavors[trove]:
	for flavor in flavors[trove][version]:
	    print '"%s" [label="%s"];' % (version.asString(), version.trailingRevision().asString())
	    print '"%s" -> "%s"' % (label.asString(), version.asString())

# go
print "digraph branch_structure {"
print '"%s" [shape=box,peripheries=2,label="%s"]' % (cfg.installLabel.asString(), troveName)
printVersionsAndLeaves(troveName, cfg.installLabel, 0)
print "}"
