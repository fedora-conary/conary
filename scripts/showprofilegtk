#!/usr/bin/env python
#
# Copyright (c) rPath, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import cPickle
import gobject
import gtk
import sys
import pango
import os

class ProfileStat(gobject.GObject):
    func = None
    cc = 0
    nc = 0
    tt = 0.0
    ct = 0.0
    callers = None
    callees = None
gobject.type_register(ProfileStat)

class Caller(gobject.GObject):
    func = None
    nc = 0
    cc = 0
    tt = 0
    ct = 0
gobject.type_register(Caller)

def compare(a, b):
    if a < b:
        return -1
    if a > b:
        return 1
    return 0

def format_float(x):
    return '%.4f' % x

def set_func(tree, cell, model, iter):
    info = model.get_value(iter, 0)
    cell.set_property('text', '%s:%d(%s)' % info.func)

def sort_func(model, iter1, iter2):
    info1 = model.get_value(iter1, 0)
    info2 = model.get_value(iter2, 0)
    return compare(info1.func, info2.func)

def set_num_calls(tree, cell, model, iter):
    info = model.get_value(iter, 0)
    if info.nc != info.cc:
        c = '%d/%d' %(info.nc, info.cc)
    else:
        c = str(info.nc)
    cell.set_property('text', c)

def sort_num_calls(model, iter1, iter2):
    info1 = model.get_value(iter1, 0)
    info2 = model.get_value(iter2, 0)
    return compare(info1.nc, info2.nc)

def set_t_time(tree, cell, model, iter):
    info = model.get_value(iter, 0)
    cell.set_property('text', format_float(info.tt))

def sort_t_time(model, iter1, iter2):
    info1 = model.get_value(iter1, 0)
    info2 = model.get_value(iter2, 0)
    return compare(info1.tt, info2.tt)

def set_t_time_per_call(tree, cell, model, iter):
    info = model.get_value(iter, 0)
    if info.nc != 0:
        cell.set_property('text', format_float(info.tt/info.nc))
    else:
        cell.set_property('text', '')

def sort_t_time_per_call(model, iter1, iter2):
    info1 = model.get_value(iter1, 0)
    info2 = model.get_value(iter2, 0)
    t1 = 0
    if info1.nc != 0:
        t1 = info1.tt/info1.nc
    t2 = 0
    if info2.nc != 0:
        t2 = info2.tt/info2.nc
    return compare(t1, t2)

def set_c_time(tree, cell, model, iter):
    info = model.get_value(iter, 0)
    cell.set_property('text', format_float(info.ct))

def sort_c_time(model, iter1, iter2):
    info1 = model.get_value(iter1, 0)
    info2 = model.get_value(iter2, 0)
    return compare(info1.ct, info2.ct)

def set_c_time_per_call(tree, cell, model, iter):
    info = model.get_value(iter, 0)
    if info.cc != 0:
        cell.set_property('text', format_float(info.ct/info.cc))
    else:
        cell.set_property('text', '')

def sort_c_time_per_call(model, iter1, iter2):
    info1 = model.get_value(iter1, 0)
    info2 = model.get_value(iter2, 0)
    t1 = 0
    if info1.cc != 0:
        t1 = info1.ct/info1.cc
    t2 = 0
    if info2.cc != 0:
        t2 = info2.ct/info2.cc
    return compare(t1, t2)

def setup_tree_view(treeview, model, cols):
    renderer = gtk.CellRendererText()
    for title, set, sort in cols:
        col = treeview.insert_column_with_data_func(-1, title, renderer, set)
        col -= 1
        column = treeview.get_column(col)
        model.set_sort_func(col, sort)
        column.set_sort_column_id(col)

    treeview.set_search_column(len(cols) - 1)
    treeview.set_search_equal_func(search_equal_func)

def search_equal_func(model, column, key, iter):
    info = model.get_value(iter, 0)
    key = key.lower()
    if key in info.func[0].lower():
        return False
    if key in info.func[2].lower():
        return False
    return True

class StatWindow(gtk.Window):
    ui_info = """
<ui>
  <menubar name='MenuBar'>
    <menu action='FileMenu'>
      <menuitem action='Refresh'/>
      <menuitem action='Quit'/>
    </menu>
    <menu action='View'>
      <menuitem action='Parent'/>
      <menuitem action='Child'/>
    </menu>
  </menubar>
</ui>
"""

    def build_action_group(self):
        entries = (
          ( 'FileMenu', None, '_File' ),
          ( 'Refresh', gtk.STOCK_REFRESH, '_Refresh', '<control>R', 'Refresh',
            self.activate_action ),
          ( 'Quit', gtk.STOCK_QUIT, '_Quit', '<control>Q', 'Quit',
            self.activate_action ),
          ( 'View', None, '_View' ),
          ( 'Parent', None, '_Parent Functions', 'P', None,
            self.activate_action ),
          ( 'Child', None, '_Child Functions', 'C', None,
            self.activate_action ),
        )

        action_group = gtk.ActionGroup('AppWindowActions')
        action_group.add_actions(entries)

        return action_group

    def __init__(self, filename):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.filename = filename

        ui = gtk.UIManager()
        self.set_data('ui-manager', ui)
        ui.insert_action_group(self.build_action_group(), 0)
        self.add_accel_group(ui.get_accel_group())

        uiid = ui.add_ui_from_string(self.ui_info)
        bar = ui.get_widget('/MenuBar')
        bar.show()

        self.disable_callbacks = False
        self.set_title('Profile viewer: %s' %filename)
        basedir = os.path.realpath(
            os.path.dirname(os.path.join(os.getcwd(), filename)))
        self.connect('destroy', lambda *x: gtk.main_quit())
        self.set_default_size(800, 400)
        self.source_window = SourceWindow(basedir)
        vbox = gtk.VBox()
        vbox.pack_start(bar, False, False)

        mainpane = gtk.VPaned()
        vbox.pack_start(mainpane)
        mainpane.pack1(self.source_window)
        pane = gtk.VPaned()
        mainpane.pack2(pane)

        self.funcstore = gtk.ListStore(ProfileStat)
        self.funcview = gtk.TreeView(self.funcstore)
        self.funcview.connect('cursor-changed',
                              self.on_funcview_cursor_changed)

        self.funcselection = self.funcview.get_selection()
        self.funcselection.set_mode(gtk.SELECTION_SINGLE)

        cols = (('Num calls', set_num_calls, sort_num_calls),
                ('Total Time', set_t_time, sort_t_time),
                ('Per call', set_t_time_per_call, sort_t_time_per_call),
                ('Cumulative time', set_c_time, sort_c_time),
                ('Per call', set_c_time_per_call, sort_c_time_per_call),
                ('Function', set_func, sort_func))
        setup_tree_view(self.funcview, self.funcstore, cols)
        # set to total time, decending
        self.funcstore.set_sort_column_id(1, gtk.SORT_DESCENDING)

        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        sw.set_size_request(150, 150)
        sw.add(self.funcview)
        pane.pack1(sw, True, False)

        nb = gtk.Notebook()
        self.nb = nb
        sw, self.callerstore = self.setup_callinfo_list('Calling')
        nb.append_page(sw, tab_label=gtk.Label('Parent Functions'))

        sw, self.calleestore = self.setup_callinfo_list('Called')
        nb.append_page(sw, tab_label=gtk.Label('Called Functions'))

        nb.connect('switch-page', self.on_switch_page)

        pane.pack2(nb, False, True)

        self.add(vbox)

        self.load_stats()

    def on_switch_page(self, nb, page, page_num):
        self.disable_callbacks = True
        gobject.idle_add(self.enable_callbacks)

    def setup_callinfo_list(self, what):
        store = gtk.ListStore(Caller)
        view = gtk.TreeView(store)
        view.connect('cursor-changed', self.on_caller_cursor_change)

        selection = view.get_selection()
        selection.set_mode(gtk.SELECTION_SINGLE)
        # when the user selects a different caller/callee
        # change the current function to the selected function

        cols = (('Num calls', set_num_calls, sort_num_calls),
                ('Total time', set_t_time, sort_t_time),
                ('Cumulative time', set_c_time, sort_c_time),
                ('%s function' %what, set_func, sort_func))
        setup_tree_view(view, store, cols)
        # set to number of calls, decending
        store.set_sort_column_id(0, gtk.SORT_DESCENDING)

        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        sw.set_size_request(-1, 150)
        sw.add(view)

        return sw, store

    def activate_action(self, action):
        name = action.get_name()
        if name == 'Quit':
            gtk.main_quit()
        elif name == 'Parent':
            self.nb.set_current_page(0)
        elif name == 'Child':
            self.nb.set_current_page(1)
        elif name == 'Refresh':
            self.load_stats()

    def enable_callbacks(self):
        self.disable_callbacks = False

    def on_funcview_cursor_changed(self, view):
        if self.disable_callbacks:
            return
        self.disable_callbacks = True
        gobject.idle_add(self.enable_callbacks)

        path, col = view.get_cursor()
        if not path:
            return

        model = view.get_model()
        iter = model.get_iter(path)

        # show the relevant source
        info = model.get_value(iter, 0)
        path, lineno, func = info.func
        self.source_window.load_source(path, lineno)

        for store, callinfo in ((self.callerstore, info.callers),
                                (self.calleestore, info.callees)):
            store.clear()
            for func, nc in callinfo.iteritems():
                caller = Caller()
                caller.func = func
                if type(nc) == tuple:
                    caller.nc = nc[0]
                    caller.cc = nc[1]
                    caller.tt = nc[2]
                    caller.ct = nc[3]
                else:
                    caller.nc = nc
                    caller.cc = nc
                    caller.tt = stats[func][2]
                    caller.ct = stats[func][3]
                iter = store.append()
                store.set(iter, 0, caller)

    def on_caller_cursor_change(self, view):
        if self.disable_callbacks:
            return
        path, col = view.get_cursor()
        if not path:
            return

        # first look up the caller/callee clicked on
        model = view.get_model()
        iter = model.get_iter(path)
        caller = model.get_value(iter, 0)

        # now look up that function in the function list so we
        # can change to it
        iter = self.funcstore.get_iter_first()
        while iter:
            stat = self.funcstore.get_value(iter, 0)
            if stat.func == caller.func:
                # this is the function we want to switch to
                # select it.
                self.funcselection.unselect_all()
                self.funcselection.select_iter(iter)
                path = self.funcstore.get_path(iter)
                col = self.funcview.get_column(0)
                self.funcview.scroll_to_cell(path, col, True, 0.5, 0.5)
                self.funcview.set_cursor(path, col, False)
                break
            iter = self.funcstore.iter_next(iter)

    def load_stats(self):
        self.funcstore.clear()
        self.callerstore.clear()
        self.calleestore.clear()

        filename = self.filename
        if '.pickle' in filename:
            f = open(filename)
            stats = cPickle.load(f).stats
        else:
            import marshal
            f = open(filename)
            stats = marshal.load(f)
        self.populate(stats)

    def populate(self, stats):
        callees = {}
        for func, (cc, nc, tt, ct, callers) in stats.iteritems():
            callees.setdefault(func, {})
            for caller, num in callers.iteritems():
                d = callees.setdefault(caller, {})
                d[func] = num

        for func, (cc, nc, tt, ct, callers) in stats.iteritems():
            stat = ProfileStat()
            stat.func = func
            stat.cc = cc
            stat.nc = nc
            stat.tt = tt
            stat.ct = ct
            stat.callers = callers
            stat.callees = callees[func]
            iter = self.funcstore.append()
            self.funcstore.set(iter, 0, stat)

class SourceWindow(gtk.ScrolledWindow):
    def __init__(self, basedir):
        self.last_file = None
        self.source_buffer = None
        self.start = None
        self.end = None
        gtk.ScrolledWindow.__init__(self)
        self.set_size_request(700, 400)
        view = self.view = gtk.TextView()
        view.set_property('editable', False)
        self.add(view)
        self.basedir = basedir

    def idle_load_source(self, args):
        path, lineno = args
        if path != self.last_file:
            self.last_file = path
            source_buffer = SourceBuffer()
            self.source_buffer = source_buffer
            self.start = None
            self.end = None
            try:
                fn = os.path.normpath(os.path.join(self.basedir, path))
                f = open(fn, 'r')
            except IOError:
                buffer = source_buffer.get_buffer()
                self.view.set_buffer(buffer)
                return

            source_buffer.insert_source(f.read())
            f.close()
        else:
            source_buffer = self.source_buffer
            if self.start and self.end:
                source_buffer.get_buffer().remove_tag_by_name('current',
                                                              self.start,
                                                              self.end)

        buffer = source_buffer.get_buffer()
        self.view.set_buffer(buffer)

        # buffer lines start at 0
        iter = buffer.get_iter_at_line(lineno - 1)
        buffer.place_cursor(iter)
        mark = buffer.create_mark(None, iter)
        self.view.scroll_to_mark(buffer.get_insert(), 0, True, 0.5, 0.5)
        start = iter.copy()
        end = iter.copy()
        end.forward_chars(start.get_bytes_in_line())
        buffer.apply_tag_by_name('current', start, end)
        self.start = start
        self.end = end

    def load_source(self, path, lineno=0):
        gobject.idle_add(self.idle_load_source, (path, lineno))

class SourceBuffer:
    def __init__(self):
        buffer = self.buffer = gtk.TextBuffer(None)
        tag = buffer.create_tag('source', font='monospace',
                                pixels_above_lines=0,
                                pixels_below_lines=0)
        buffer.create_tag('current', paragraph_background='#aaaaff')
        buffer.create_tag('lineno', foreground='#00b000',
                          font='monospace')

    def get_buffer(self):
        return self.buffer

    def insert_source(self, data):
        buffer = self.buffer
        iter = buffer.get_iter_at_offset(0)
        data = data.split('\n')
        for num, line in enumerate(data):
            while '\t' in line:
                line = line.replace('\t', '        ')
            lineno = '%5d ' %(num +1)
            buffer.insert_with_tags_by_name(iter, lineno, 'lineno')
            buffer.insert_with_tags_by_name(iter, line, 'source')
            buffer.insert_with_tags_by_name(iter, '\n', 'source')

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print 'usage: %s profile-file' %sys.argv[0]
        sys.exit(1)

    filename = sys.argv[1]

    app = StatWindow(filename)
    app.show_all()
    gtk.main()
