#!/usr/bin/env python
# -*- mode: python -*-
#
# Copyright (c) 2005-2010 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

"""
recreatedb attempts to reconstruct or supplement a conary database
from a list of (name, version, flavor) tuples, which it can get from
several sources.  On a conary-managed system, the file
/var/lib/conarydb/manifest is the most likely complete source of
this data.  If the manifest is unavailable, and only a corrupted
conarydb file is available, recreatedb will use minimal queries
within the damaged conarydb that may succeed even for some damaged
databases, to create a new copy without the damage.  It can also use
an RPM database for a source of installed RPM packages that should
be sought in conary repositories and matching packages represented
in the conary database.
"""

import itertools
import os
import struct
import sys
import tempfile

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
	fullPath = os.path.dirname(sys.argv[0])
    else:
	fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()

sys.path.append(os.path.dirname(fullPath))

from conary.deps import deps
from conary.lib import util, sha1helper
from conary.repository import filecontents, netclient, changeset
from conary.local import database
from conary import callbacks
from conary import conarycfg
from conary import conaryclient
from conary import files
from conary import rpmhelper
from conary import sqlite3
from conary import trove
from conary import updatecmd
from conary import versions

def usage():
    print 'usage: %s [conarydb|manifest|rpmdb] newroot' %sys.argv[0]

def collectTrovesFromConaryDb(db):
    """
    Collect (name, version, flavor) tuples from a database.  The
    minimal SQL possible is used to increase the chance of success
    on a damaged database

    @param db: an open sqlite3 connection to the database
    @type db: sqlite3.Connection
    @return: iterator that yields (name, version, flavor) tuples
    @rtype: iterator
    """
    cu = db.cursor()
    cu.execute('SELECT trovename, version, flavor from '
               '       Instances, Versions, Flavors '
               '   WHERE '
               '           Instances.versionid=Versions.versionid '
               '       AND Instances.flavorid=Flavors.flavorid '
               '       AND Instances.isPresent = 1')
    for name, versionStr, flavorStr in cu:
        flavor = deps.ThawFlavor(flavorStr)
        version = versions.VersionFromString(versionStr)
        if not version.isOnLocalHost():
            yield (name, version, flavor)
        else:
            print >> sys.stderr, ('warning: %s is cooked locally, '
                                  'cannot be restored' %name)

def collectTrovesFromManifest(manifest):
    """
    Collect (name, version, flavor) tuples from a manifest.

    @param manifest: an open file containing name=version[flavor] lines
    @type manifest: file
    @return: iterator that yields (name, version, flavor) tuples
    @rtype: iterator
    """
    for troveSpec in (x.strip() for x in manifest):
        name, versionStr, flavor = conaryclient.cmdline.parseTroveSpec(troveSpec)
        version = versions.VersionFromString(versionStr)
        if not version.isOnLocalHost():
            yield (name, version, flavor)
        else:
            print >> sys.stderr, ('warning: %s is cooked locally, '
                                  'cannot be restored' %name)

def collectNewTrovesFromRPMDb(cfg):
    """
    Collect (name, version, flavor) tuples from an RPM db.

    @param cfg: configuration object pointing to a conary db
    @type cfg: conarycfg.ConaryConfiguration
    @return: list of (name, version, flavor) tuples
    @rtype: list
    """
    import rpm # in other cases do not require RPM be installed

    db = database.Database(cfg.root, cfg.dbPath)
    # mapping is not important, we care only whether they exist
    installedCapsuleInfo = [
        x for x in db.getCapsulesTroveList(db.iterAllTroves())
        if x]

    existingNevras = set(
        (x.rpm.name(),
         x.rpm.epoch(),
         x.rpm.version(),
         x.rpm.release(),
         x.rpm.arch())
        for x in installedCapsuleInfo if x.rpm)
    # record empty epochs a second time with 0, since 0 epochs were
    # sometimes recorded as empty epochs
    existingNevras.update(set(
        (x.rpm.name(),
         0,
         x.rpm.version(),
         x.rpm.release(),
         x.rpm.arch())
        for x in installedCapsuleInfo
        if x.rpm and x.rpm.epoch() == None))

    troveList = []
    # build a list of all installed rpms
    ts = rpm.TransactionSet()
    mi = ts.dbMatch()
    nevras = set([(h['name'],
                   h['epoch'],
                   h['version'],
                   h['release'],
                   h['arch'])
                  for h in mi])
    # don't re-add packages already in the database
    nevras -= existingNevras

    # if there is nothing to do, do nothing
    if not nevras:
        return []

    client = conaryclient.ConaryClient(cfg)
    repos = client.getRepos()

    matches = []
    missing = set()
    for label in cfg.installLabelPath:
        troveSpace = repos.getTroveVersionsByLabel({None: {label: None}},
                                                   bestFlavor=False)

        troveList = []
        for pkgName, vfs in troveSpace.iteritems():
            for version, flvs in vfs.iteritems():
                troveList.extend((pkgName, version, x) for x in flvs)

        troveInfo = repos.getTroveInfo(trove._TROVEINFO_TAG_CAPSULE, troveList)
        allNevras = dict()
        # reversed sorted in order to find newest versions first; we need
        # this so that when we rebuild capsules to fix bugs, we find the
        # latest version with bugs fixed, rather than an earlier version
        for trvTuple, capsuleInfo in reversed(sorted(zip(troveList, troveInfo))):
            if not capsuleInfo or (capsuleInfo.type() !=
                                   trove._TROVECAPSULE_TYPE_RPM):
                continue

            key = (capsuleInfo.rpm.name(), capsuleInfo.rpm.epoch(),
                   capsuleInfo.rpm.version(), capsuleInfo.rpm.release(),
                   capsuleInfo.rpm.arch())

            if key not in allNevras:
                allNevras[key] = trvTuple
            else:
                for flavor in cfg.flavorPreferences:
                    existingScore = flavor.score(allNevras[key][2])
                    newScore = flavor.score(trvTuple[2])
                    if (existingScore is False or
                        newScore > existingScore):
                        # this test works because False == 0
                        allNevras[key] = trvTuple
                        break
                
        for nevra in sorted(nevras):
            if nevra in allNevras:
                matches.append(allNevras[nevra])
                nevras.discard(nevra)
                missing.discard(nevra)
            # some 0 epochs were stored as None instead of 0
            elif nevra[1] == 0:
                nevraAlt = (nevra[0], None, nevra[2], nevra[3], nevra[4])
                if nevraAlt in allNevras:
                    matches.append(allNevras[nevraAlt])
                    nevras.discard(nevra)
                    missing.discard(nevra)
                else:
                    missing.add(nevra) # neither epoch encoding found
            else:
                missing.add(nevra) # non-zero epoch not found

    if missing:
        print >>sys.stderr, ('Could not find Conary packages for these RPMs:')
        for nevra in sorted(missing):
            print >> sys.stderr, (rpmhelper.NEVRA.filename(*nevra))

    # now add the packages that contain the components:
    matchingPackages = [(n.split(':')[0],v,f)
                        for n,v,f in matches
                        if n.endswith(':rpm')]

    return matches + matchingPackages

def buildCsList(client, troveList):
    """
    verify that (name, version, flavor) tuples exist in the repository
    and create a changeset request list

    @param client: the ConaryClient instance for accessing the repository
    @type client: conrayclient.ConaryClient
    @param troveList: a sequence of (name, version, flavor) tuples
    @type troveList: sequence
    @return: list of changeset requests
    @rtype: list
    """
    request = {}
    for numTroves, (name, version, flavor) in enumerate(troveList):
        versionDict = request.setdefault(name, {})
        flavorList = versionDict.setdefault(version, [])
        flavorList.append(flavor)
    print >> sys.stderr, ('requesting trove information for %d troves.'
                          %numTroves)
    reposTroves = client.repos.getTroveVersionFlavors(request)

    # verify everything actually exists, build up the applyList
    csList = []
    for name, version, flavor in troveList:
        if not reposTroves.has_key(name):
            print >> sys.stderr, 'repository has no trove named', name
            continue
        if not reposTroves[name].has_key(version):
            print >> sys.stderr, ('repository has no trove named %s '
                                  'with version' %(name, version.asString()))
            continue
        if not flavor in reposTroves[name][version]:
            print >> sys.stderr, ('repository has no trove named %s '
                                  'with version %s and flavor %s'
                                  %(name, version.asString(), flavor))
            continue

        csList.append((name, (None, None), (version, flavor), 0))
    return csList

def addConfigFileContents(client, cs, targetCs):
    """
    add file contents for config files to a changeset object

    @param client: the ConaryClient instance for accessing the repository
    @type client: conaryclient.ConaryClient
    @param cs: the changeset that needs config file contents added
    @type cs: repository.changeset.ReadOnlyChangeSet
    @param targetCs: the changeset to add the contents too; it should be
    merged into cs by the caller
    @type targetCs: repository.changeset.ChangeSet
    @return: None
    """
    needed = []
    empty = filecontents.FromString('')

    # collect info on all the needed config file contents
    for trove in cs.iterNewTroveList():
        for (pathid, path, fileid, version) in trove.getNewFileList():
            filediff = cs.getFileChange(None, fileid)
            fileobj = files.ThawFile(filediff, pathid)
            if not fileobj.flags.isConfig() or not fileobj.hasContents:
                continue
          
            diskSha1 = sha1helper.sha1FileBin(path)
            if diskSha1 == fileobj.contents.sha1():
		targetCs.addFileContents(pathid, fileid,
					 changeset.ChangedFileTypes.file,
                                         filecontents.FromFilesystem(path),
                                         True)
            else:
                needed.append(((fileid, version), (path, pathid)))

    # build up the repository request
    neededContents = [x[0] for x in needed]
    print >> sys.stderr, '\ndownloading %d config file contents...' % len(neededContents),
    sys.stderr.flush()
    contents = client.repos.getFileContents(neededContents)
    print >> sys.stderr, 'done.'
    # add the contents to the changeset
    for cont, ((fileid, version), (path, pathid)) in zip(contents, needed):
        #print >> sys.stderr, ('adding contents for %s (%s)'
        #                      %(path, sha1helper.md5ToString(pathid))
        # all the contents here are config files, so the isConfig parameter
        # is always true
        targetCs.addFileContents(pathid, fileid,
                                 changeset.ChangedFileTypes.file, cont, True)

def main(argv):
    sys.excepthook = util.genExcepthook()

    if len(sys.argv) != 3:
        usage()
        sys.exit(1)

    cfg = conarycfg.ConaryConfiguration(True)
    cfg.initializeFlavors()
    cfg.root = sys.argv[2]
    cfg.threaded = False
    client = conaryclient.ConaryClient(cfg)
    callback = updatecmd.UpdateCallback()

    # get a list of (name, version, flavor) from the old db
    if sys.argv[1] == 'rpmdb':
        # add ability to specify a path to an rpmdb
        troves = list(collectNewTrovesFromRPMDb(cfg))
        if not troves:
            print >> sys.stderr, 'No unmanaged RPM packages found'
            sys.exit(0)
    else:
        try:
            olddb = sqlite3.connect(sys.argv[1])
            troves = list(collectTrovesFromConaryDb(olddb))
        except sqlite3._sqlite.DatabaseError:
            manifest = file(sys.argv[1])
            troves = list(collectTrovesFromManifest(manifest))

    # double check that everything installed in the old db really exists
    # and build up a changeset request
    csList = buildCsList(client, troves)

    # create a changeset without any file contents
    cs = client.createChangeSet(csList, withFiles = True,
                                withFileContents = False,
                                callback = callback,
                                recurse = False)
    del csList

    # add the config file contents
    targetCs = changeset.ChangeSet()
    addConfigFileContents(client, cs, targetCs)
    cs.merge(targetCs)

    (fd, path) = tempfile.mkstemp()
    os.close(fd)
    cs.writeToFile(path)

    try:
        updatecmd.doUpdate(cfg, [ path ], depCheck = False,
                           recurse = False, justDatabase = True,
                           replaceFiles = True,
                           noRestart = True,
                           checkPathConflicts = False,
                           skipCapsuleOps = True,
                           callback = updatecmd.UpdateCallback())
    finally:
        os.unlink(path)

    # success!
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
