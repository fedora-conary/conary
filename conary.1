.\" Copyright (c) 2004 Specifix, Inc.
.TH CONARY 1 "13 July 2004" "Specifix, Inc."
.SH NAME
conary \- repository-based software configuration manager
.SH SYNOPSIS
.B conary \fIcommand \fR[\fI<args>\fR]

.B cvc \fIcommand \fR[\fI<args>\fR]
.SH DESCRIPTION
\fBConary\fR is a software configuration manager that uses distributed,
network-based, versioned repositories rather than disparate package
files as its canonical source of data.  Conary uses the repository
versioning to intelligently merge configuration files, file ownership
and permissions, and so forth.
.SH REFERENCE
Conary has several common command-line arguments, all of which modify 
configuration entries and are documented with other configuration
entries.  The rest of its command-line arguments are specific to
which conary \fBcommand\fP you are running, and are documented with
the commands. The \fIC\fPonary \fIv\fPersion \fIc\fPontrol program, called \fBcvc\fP, handles
build and source management.
.SS "System Management"
The following \fBcommands\fP are used to install, update, erase, and
otherwise manage software installed on a local system.
.TP 4
.B query \fItrovename\fP[=\fIversion\fP]*\fP [\fI\-\-path <path>\fP]*
Lists troves installed on the local system. Any number of trove names or
absolute paths may be given.
.TP
.B update [\fIargs\fP] <\fItrovename\fP[=\fIversion\fP]>* <\fIchangeset-file\fP>*
Updates the trove \fItrovename\fR from the appropriate repository to 
match the optional \fIversion\fP (otherwise the most recent version which 
matches the \fBinstall-label\fP) and applies the changesets contained in any
\fIchange-files\fP given.
.RS 4
.TP 4
.B \-\-keep-existing
.\" FIXME: add semantics
.TP
.B \-\-no-deps
Skip dependency resolution and errors.
.TP
.B \-\-resolve
Attempt to automatically resolve all dependencies
Can be made the default option by FIXME.
.TP
.B \-\-no-resolve
Do not resolve dependencies, only print out any dependency failures.
Unless \-\-resolve has been made the default by FIXME, \-\-no-resolve
is the default behavior.
.TP
.B \-\-no-deps-recurse
Do not search dependencies recursively, print out only direct dependencies
of the trove.  Meaningless with \-\-resolve because dependency resolution
implies recursion.
.TP
.B \-\-replace-files
.\" FIXME: add semantics
.RE
.TP
.TP
.B erase \fItrovename\fP[=\fRversion]\fP+
Erase all instances of \fItrovename\fP (or only a specified \fIversion\fP)
from the local system.
.TP
.B remove \fIpath\fP
Remove the file named \fIpath\fP from the system, and record in the
Conary database that the file has been removed.  After this, doing
\fBconary update\fP will not replace the file.  (If future versions
of the component rename the file, the removal will track the rename;
that is; if you run \fBconary remove /foo/bar\fP and \fI/foo/bar\fP
is later renamed \fI/foo/blah\fP, when you update to a version of
the component that now contains \fI/foo/blah\fP instead of
\fI/foo/bar\fP, \fI/foo/blah\fP will not be created on your system
as a new file.)
.TP
.B changeset \fItrovename\fP[=[\fIoldver\fP--]\fInewver\fP]+ \fIoutfile\fP
Creates an absolute changeset for \fItrovename newver\fP, or a relative
changeset between \fItrovename oldver\fP and \fItrovename newver\fP, and stores
it in outfile.
.TP
.B localcs \fItrovename outfile\fP
Creates a local changeset, which represents the changes made on the
local system to \fItrovename\fP, relative to the package as it is
represented in the repository.
.TP
.B localcommit
Applies a local changeset to the local system.  This is exactly
equivalent to making every change represented in the changeset
by hand on the local system, the locally-installed versions still
reference the repository as their source, future updates will still
come from the repository, and the changes represented in the local
changeset will be preserved as if they had been made by hand
locally.
.TP
.B commit \fIchangeset\fP [\-\-target-branch \fI<branch>\fP]
Commits a changeset to the repository.  This is not a reversible
operation, so take care.  The \fB\-\-target-branch\fP option
is only appropriate when you commit a \fBlocal changeset\fP
to a repository.
.TP
.B emerge \fI<component>...\fP
Builds the recipe for the given component (which it finds using the
\fIbuildLabel\fP) onto the \fBlocalhost@local:EMERGE\fP branch
and updates the local system to the new build.
.TP
.B rblist
Lists available rollbacks.
.TP
.B rollback \fIrollback\fP
Applies rollback \fIrollback\fP.  (Syntax may change in future versions
of Conary.)
.TP
.B repquery [\fIargs\fP] [\fItrovename\fP[=\fIversion\fP]]*
Lists troves in the repository.
Arguments include
.RS 4
.TP 4
.B \-\-all
.\" FIXME: document
.TP
.B \-\-deps
.\" FIXME: document
.TP
.B \-\-full-versions
.\" FIXME: document
.TP
.B \-\-ids
.\" FIXME: document
.TP
.B \-\-info
.\" FIXME: document
.TP
.B \-\-leaves
.\" FIXME: document
.TP
.B \-\-ls
.\" FIXME: document
.TP
.B \-\-sha1s
.\" FIXME: document
.TP
.B \-\-tags
.\" FIXME: document
.RE
.TP
.B showchangeset [\fIargs\fP \fI<changeset> [<changeset> ...]\fP
Lists the contents of the specified changesets. 
.\"
.\"
.\"
.SS "Building Components and Packages"
The \fBcvc\fP command handles actions related to source components.
.PP
A source component is checked out into a \fBsource directory\fP
with the \fBcheckout\fP command, or a source component and
source directory are created with the \fBcvc newpkg\fP subcommand.
Then the contents of the source directory are modified with other
subcommands, and the changes to the source component are then
committed to the repository with the \fBcvc commit\fP subcommand.
Only the \fBcvc commit\fP command modifies the repository; the
rest of the commands either query the repository for information
about a source package or schedule a change to be applied to the
repository by the next \fBcvc commit\fP command.
.PP
The default branch on which each of these commands operates
is specified by the \fBbuildLabel\fP configuration entry
(see below).
.PP
The following \fBcommands\fP to \fBcvc\fP are used to create,
modify, and cook source components:
.TP 4
.B cook \fI[\fR\-\-prep\fI] [\fR--macros file\fI] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-target-branch \fI<branch>\fP] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-resume [<linenums>|policy]] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-use-flag "<flag> True|False"] \e
.PD 0
.TP
.B \ \ \ \ \ [\fR\-\-use-macro <macro> <string>] \e
.PD 0
.TP
.B \ \ \ \ \ \fI<file>\fP.recipe\fI|<component>...
.PD

Build a package.  If \fB\-\-prep\fP is specified, the souce code is
unpacked, but is not built. if \fB\-\-macros\fP is specified, it
names a file containing macro definitions to apply to the recipe
macro set.  
.IP
If \fB\-\-resume <linenums>\fP is specified, 
conary will cook the specified line numbers of the recipe.  The format of
<linenums> is any number of pairs of n or n:m 
separated by commas, where n and m are line numbers in the recipe.  
If the initial line number in a pair is left off, leaving :m, 
conary will begin cooking from the beginning of the file.  
If the final line number is left off, leaving n:, conary will cook
until the end 
of the file, run all the policy, and create a changeset.  A \-\-resume n without
a colon is equivalent to n:n, if there are other ranges given to \-\-resume,
or n: if it is the only argument given to \-\-resume.  All resume line 
numbers must be provided in increasing order.

If \fB\-\-resume\fP is specified with no parameter,
the recipe will be recooked from the line of last failure.  
If \fB\-\-resume policy\fP is specified, the policy will be rechecked 
from the last build; this only works if the destdir still exists,
either because of a policy error or because the \fB\-\-noclean\fP option
was provided.

Example: cvc cook \-\-resume 5:10,15,35:

Note that the \fB\-\-resume\fP option may
be used only with local recipe files, not source components grabbed
from a repository.
.IP 
The \-\-use-flag option can be used to override the default Use flags 
and package-specific flags for this instantiaton.   The format for
<flag> may be Use.<useflag>, where <useflag> is a system-wide Use 
flag, or Flags.<package>.<pkgflag>, where <pkgflag> is a flag defined
in <package>, or Arch.<archflag>, where <archflag> is a flag defining the 
current architecture.  <package>, <useflag>, <pkgflag>, and <archflag>
are case sensitive.  Note that the flag and its boolean value must be 
enclosed in quotes, e.g. \-\-use-flag "Flags.kernel.smp False"

The \-\-use-macro option assigns the given string value to <macro>.  
The value given overrides any attempt to reset the value later in the 
recipe.  The macro and its boolean value must be enclosed in quotes.
.IP 
If the thing to be cooked ends in \fB.recipe\fP, then
it must be a recipe file and the package will be cooked from the
filesystem.  Otherwise, it must name a repository component and
the package will be cooked from the repository.
.IP
Conary will build a changeset that is relative to the current
\fBbuildLabel\fP unless the \fB\-\-target-branch\fP option is
specified.
.TP 4
.B add \fIfile...\fP
Adds all the files listed on the command line to the source
component.
.TP
.B annotate \fI<file>\fP
Show the version, date, and author of each of the lines in \fI<file>.
\fI<file> must be a file in a conary source dir.
.TP
.B branch \fInewbranch branchfrom [trove]\fP
Creates a new branch in the repository, relative to branch
\fIbranchfrom\fP.  If \fItrove\fP is listed, create the
branch only for that trove.
.TP
.B checkout [\-\-dir \fI<dir>\fP] \fI<trove>\fP [\fI<version>\fP]
Check the \fI<trove>\fB:source\fR component out of the repository
and put it in directory \fI<dir>\fP if specified, and directory
\fI<trove>\fP otherwise.  Fetches the most recent version
specified by \fBbuildLabel\fP unless \fI<version>\fP is specified.
.TP
.B commit [\-\-message \fI<message>\fP]
Different from \fBconary commit\fP, \fBcvc commit\fP
commits all the changes in the source directory to the repository. 
It will ask for a changelog message unless one is passed on the
command line with \fB\-\-message\fP.
.TP
.B diff
Show (in a slightly extended unified diff format) the changes that
have been made in the current source directory since the last
\fBcvc commit\fP
(or, if no commit, since the source component was checked out).
.TP
.B log [\fI<branch>\fP]
Prints the log messages for the branch specified by \fBbuildLabel\fP,
or for \fI<branch>\fP if specified.
.TP
.B newpkg \fI<name>\fP
Creates a new package.  This modifies the repository, and is
irreversable, so use this command with care.
.TP
.B rdiff \fI<name> <oldver> <newver>\fP
This source command operates only on the repository, not on a
source directory.  It creates a diff between two versions of
a source trove from the repository.
.TP
.B remove \fI<filename>...\fP
Unlike \(lq\fBcvs remove\fP\(rq, \fBcvc remove\fP both removes
the file from the filesystem and marks it to be removed from the next
version checked into the repository at the next \fBcvc commit\fP.
.TP
.B rename \fI<oldname> <newname>\fP
Renames the file \fI<oldname>\fP to \fI<newname>\fP on the filesystem,
and marks it to be removed from the repository at the next
\fBcvc commit\fP.
.TP
.B update [\fI<version>\fP]
Updates the current source directory to the latest version, or to
\fI<version>\fP if specified.  Merges changes when possible.
.RE
.\"
.\"
.\"
.SH JARGON
Conary introduces new concepts and makes new distinctions.
.TP 4
.B Repository
A network-accessible database that contains files for multiple packages,
and multiple versions of these packages, on multiple development branches.
Nothing is ever removed from the repository once it has been added.
.TP
.B Files
Conary tracks files by unique file identifier rather than path name.
(This allows Conary to track changes to file names.)  A reference to
a \(lqfile\(rq is not a reference to a path name, but rather to the
file referenced by the unique file identifier.
.TP
.B Troves
Every collection kept in a repository is generically called a
\fBtrove\fP.  A trove can contain either files or other troves.
.TP
.B Packages and Components
\fBPackages\fP contain logically-connected collections of files.
The files are grouped into \fBcomponents\fP, and the components
are grouped into packages.  Components have a package name, a
\fB:\fP character, and a component suffix; for example:
\fBconary:runtime\fP.
.IP
Not all components are part of a package.  Some components, such
as those with a \fBsource\fP or \fBtest\fP suffix, are independent
components that are related to but not included in a package.
.TP
.B Groups and Filesets
A \fBGroup\fP is an arbitrary collection of other troves, and its
name starts with \fBgroup-\fP.  A \fBFileset\fP is an arbitrary
collection of files, and its name starts with \fBfileset-\fP.
.TP
.B Labels, Versions, and Branchnames
Conary version strings are a \fB/\fP-separated sequence, normally 
\fB/\fP-prefixed, of specifiers of the form
\(lq\fI<label>[\fB/\fI<version>\fB-\fI<release>]\fR\(rq, and
a \fI<label>\fR follows the form
\(lq\fI[<repository>]\fB@\fI[<namespace>\fB:\fI]<tag>\fR\(rq.
A version string is \fBfully-qualified\fP if it is \fB/\fP-prefixed.
The \fI<namespace>\fB:\fI<tag>\fR pair is generally seen together,
and is called a \fBBranchname\fP.
.RS 4
.TP 4
\f(BI<version>\fP
The upstream version of the package
.TP
\f(BI<release>\fP
A \fI<release>\fP is a \fI<sourcebuild>\fP-\fI<binarybuild>\fP pair
of numbers, where \fI<sourcebuild>\fP specifies the source package
the binary came from, and \fI<binarybuild>\fP tells which build of the
sources is being installed. Source packages have release numbers which
exclude the -\fI<binarybuild>\fP portion. When new versions of a package
are cooked, conary will increment the \fI<binarybuild>\fP portion of
the release number.
.TP
\f(BI<tag>\fP and \fBbranch string\fP
\fI<tag>\fP is a simple string that is unique within a namespace.
A \fBbranch string\fP is a fully-qualified version string without a
trailing \fI<version>\fP-\fI<release>\fP pair.
.TP
\f(BI<label>\fP
A \fI<label>\fP does not include any leading \fB/\fP character, and
has the special property of being able to apply to more than one
branch at once.  Therefore, \fBconary.example.com@local:foo\fP might
refer to \fIboth\fP of the following at once:
.br
/conary.example.com@local:bar/conary.example.com@local:foo
.br
/conary.example.com@local:foo
.br
A label applies to any branch whose name ends with the label.
.RE
.TP
.B Changesets
A \fBchangeset\fP is a representation of the changes between two versions
(a \fBrelative changeset\fP) or the change between nil and a version
(an \fBabsolute changeset\fP).  Changesets are used internally as the
main form of communication between the Conary client and the repository,
and can also live independently as files.
.\"
.\"
.\"
.SH EXAMPLES
Coming soon to a man page near you!
.\"
.\"
.\"
.SH FILES
.\" do not put excess space in the file list
.PD 0
.TP 4
.I /etc/conaryrc
.TP
.I $HOME/.conaryrc
The configuration files for Conary; entries in \fI$HOME/.conaryrc\fR
override entries in \fI/etc/conaryrc,\fR and command-line options
(including the \fB\-\-config\fR option, which allows you to override
one line in the config file, and the \-\-config-file option, which 
reads in an additional, supplied config file) override both 
configuration files.  Conary configuration items can be strings,
booleans (\fBTrue\fP or \fBFalse\fP), or mappings (\f(BIto from\fP) and
can include:
.PD
.RS 4
.TP 4
.B buildLabel
The default label for troves during source code operations
(checkout, diff, etc) and for cooking.  Can be overridden by
the \fB\-\-build-label \fI<label>\fR command-line option.
.TP
.B buildPath
The path packages are built under; default \fI/usr/src/conary/builds
.TP
.B contact
The contact name (normally an email address or URL) to put in changelog
entries when committing changes to source components.
.TP
.B dbPath
The path to the Conary database on the local system.  It is relative
to \fBroot\fP (see below) and should normally not be changed.
.TP
.B installLabelPath
The ordered path of labels to use when an incomplete version is
specified to install package, query the repository, and abbreviate
versions when displaying them.
Can be overridden by the \fB\-\-install-label \fI<label>\fR command-line option.
.TP
.B lookaside
The transient lookaside cache used only during building, normally
\fI/var/cache/conary\fR
.TP
.B name
The name used in changelog entries when committing changes to source
components.
.TP
.B repositoryMap
Maps a hostname from a label to a full URL for a networked repository.
Multiple maps can be given for a single label. (If no mapping is found,
\fBhttp://\f(BIhostname\fB/conary/\fR is used as the default map.)
.TP
.B root
The path to install files into, normally \fI/\fR.
Can be overridden by the \fB\-\-root \fI<root>\fR command-line option.
.TP
.B Use.<useflag>
.B Arch.<archflag>
.B <package>.<packageflag>
Assigns the given boolean value to the flag. 
Can be overridden by the \fB\-\-use-flag \fI"<flag> <bool>"\fR command-line option.
.TP
.B Macros.<macro>
Assigns the given string to <macro>, for use in cooking.  Useful especially for setting march, os, target, and parallelmflags.
Can be overridden by the \fB\-\-use-macro \fI"<macro> <value>"\fR command-line option.  Note that all values are assumed to be strings -- no quotes are necessary around <value> on the command line or in the config file.
.TP
.B includeConfigFile
Immediately reads the listed configuration file.  The file name may include
shell globs, in which case all files matching the glob will be read in.
.RE
.TP 4
.I /etc/conary
Contains all local configuration for Conary except for the conaryrc file.
.TP
.I /etc/conary/tags/
Tagdescription files describing dynamic tags.
.\" FIXME: need a man page describing the tagdescription file format.
.TP
.I /usr/libexec/conary/tags/
Taghandler files implementing dynamic tags.
.\" FIXME: need a man page describing the taghandler calling convention.
.TP
.I /var/lib/conarydb/conarydb
The database file containing all the local system metadata.
.TP
.I /var/lib/conarydb/contents
Original file contents of configuration files Conary tracks.
.TP
.I /var/lib/conarydb/rollbacks
Changeset files representing rollbacks (listed via \fBconary
rblist\fP).
.\"
.\"
.\"
.SH BUGS
There are no bugs, only undocumented features.
.\"
.\"
.\"
.SH "SEE ALSO"
http://www.specifixinc.com/
.br
http://wiki.specifixinc.com/
.br
http://www.specifixinc.com/technology/conary.pdf
.I An Introduction to the Conary Software Provisioning System
.br
http://www.specifixinc.com/technology/Reprint-Wilson-OLS2004.pdf
.I Repository-based System Management Using Conary
